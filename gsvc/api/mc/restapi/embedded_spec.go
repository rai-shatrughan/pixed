// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\nMindConnect API provides following data ingestion functionalities:\n\n# Data Point Mappings\n\nCreating and managing mappings between an agent's data points and an entity's dynamic property to be able to upload TimeSeries data.\n\n\nEach agent has data points with unique ids. The mapping is between to this id to an entity's dynamic property set's property.\n\n- A data point can be mapped to many property of many property set of many\nentities.\n\n- A property cannot be mapped from more than one data point. \n\n- A propertyset can have mappings from many agents' many data points to its\nproperties.\n\n- The unit of the datapoint has to be same with the unit of the property.\n\n- The type of the datapoint has to be same with the type of the property.\n\n\nWhenever data source configuration of an agent is updated via Agent Management API; all mappings with __keepMapping__ attribute set gets their validity attribute updated and all mappings with __keepMapping__ attribute unset are deleted.\n\n\n# Exchange\n\nExchanging time series, events, files and data source configuration data. Combination of different data types can be uploaded via exchange endpoint within  multipart body. Maximum size of exchange body is 10MBs.\n\n# Diagnostic Activations\n\nManagement of Diagnostic Activations and querying Diagnostic Messages of time series, event, file and data source configuration requests.\n\n- Maximum 5 agents per tenant can be activated for data ingestion tracking.\n\n- For non-agents, the required permission allows to manage diagnostic activation resources of agents in the same tenant as in the token.\n\n- For agents, only the diagnostic activation related to the agent can be managed. Agents are forbidden to view/change the resources of other agents in the same tenant.\n\n- Agents are allowed to update activation for itself only. Users with sufficient scopes are allowed\n",
    "title": "MindConnect API",
    "version": "3.5.0",
    "x-visibility": "external"
  },
  "basePath": "/api/mindconnect/v3",
  "paths": {
    "/dataPointMappings": {
      "get": {
        "security": [
          {
            "mappings": [
              "map.r"
            ]
          }
        ],
        "description": "Retrieves a list of mappings.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Get mappings.",
        "parameters": [
          {
            "type": "string",
            "description": "Filter as JSON object.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedMapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "mappings": [
              "map.c"
            ]
          }
        ],
        "description": "Creates a single mapping.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Create single mapping",
        "parameters": [
          {
            "description": "Object describing new mapping resource.",
            "name": "mapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          },
          "400": {
            "description": "Bad Request. Request validations failed.",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/conflict"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/dataPointMappings/{id}": {
      "get": {
        "security": [
          {
            "mappings": [
              "map.r"
            ]
          }
        ],
        "description": "Gets a mapping by given id.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Get a mapping by id",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the mapping resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Mapping not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "mappings": [
              "map.d"
            ]
          }
        ],
        "description": "Deletes a mapping.  \n",
        "tags": [
          "Mappings"
        ],
        "summary": "Delete a mapping",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the mapping resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Mapping not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.r"
            ]
          }
        ],
        "description": "Get diagnostic activations. Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get all activations in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Gets diagnostic activations\n",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "diagnosticActivations": [
              "da.c"
            ]
          }
        ],
        "description": "Create a new diagnostic activation. \nAgents are allowed to create activation for itself only. Users with sufficient scopes are allowed to create activations of the agents in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Creates a new diagnostic activation\n",
        "parameters": [
          {
            "description": "Object describing new diagnostic activation resource.",
            "name": "diagnosticActivation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/conflict"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations/{id}": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.r"
            ]
          }
        ],
        "description": "Get a diagnostic activation with given id.  Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get any activation in the same tenant as in the token.  \n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Gets a diagnostic activation.  \n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "diagnosticActivations": [
              "da.u"
            ]
          }
        ],
        "description": "Updates status of Diagnostic Activation.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Update status of Diagnostic Activation\n",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Object describing updated diagnostic activation status.",
            "name": "diagnosticActivationStatus",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticActivationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "diagnosticActivations": [
              "da.d"
            ]
          }
        ],
        "description": "Delete a diagnostic activation. Agents are allowed to delete their own activation. Users with sufficient scopes are allowed to delete any activation in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Deletes a diagnostic activation\n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations/{id}/messages": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.m.r"
            ]
          }
        ],
        "description": "Get a diagnostic messages of specific activation resource. Agents are allowed to get their own activations' messages. Users with sufficient scopes are allowed to get any activations messages in the same tenant as in the token.  \n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Get a diagnostic messages of specific activation resource\n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "JSON based filter. Diagnostic messages can be filtered by the following fields\n - ` + "`" + `correlationId` + "`" + `\n - ` + "`" + `message` + "`" + `\n - ` + "`" + `source` + "`" + `\n - ` + "`" + `timestamp` + "`" + `\n - ` + "`" + `severity` + "`" + `\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticInformationMessages"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticInformation": {
      "get": {
        "security": [
          {
            "diagnosticInformation": [
              "di.r"
            ]
          }
        ],
        "description": "This operation is deprecated! Use \"/diagnosticActivations/{id}/messages\" instead. \nGets Diagnostic Information. \n",
        "tags": [
          "Diagnostic Information"
        ],
        "summary": "Get Diagnostic Information",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter. Diagnostic information can be filtered by the following fields\n - ` + "`" + `agentId` + "`" + `\n - ` + "`" + `correlationId` + "`" + `\n - ` + "`" + `message` + "`" + `\n - ` + "`" + `source` + "`" + `\n - ` + "`" + `timestamp` + "`" + `\n - ` + "`" + `severity` + "`" + `\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticInformation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/exchange": {
      "post": {
        "security": [
          {
            "exchange": [
              "exc.w"
            ]
          }
        ],
        "consumes": [
          "multipart/mixed"
        ],
        "tags": [
          "Exchange"
        ],
        "parameters": [
          {
            "description": "Multipart message.",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request, e.g. multi part body is not well formatted.",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "413": {
            "description": "Payload Too Large",
            "schema": {
              "$ref": "#/definitions/payLoadTooLarge"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords": {
      "get": {
        "security": [
          {
            "recordRecovery": [
              "rec.r"
            ]
          }
        ],
        "description": "Gets all recoverable records\n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Get all recoverable records",
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedRecoverableRecords"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}": {
      "delete": {
        "security": [
          {
            "recordRecovery": [
              "rec.d"
            ]
          }
        ],
        "description": "Deletes a recoverable record.  \n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Delete a recoverable record",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Recoverable record not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}/downloadLink": {
      "get": {
        "security": [
          {
            "recordRecovery": [
              "rec.r"
            ]
          }
        ],
        "description": "Gets download link of record payload\n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Get download link of record payload.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://bucketname-s3.eu-central-1.amazonaws.com/c9bcd-44ab-4cfa-a87e-d81e727d9af4?X"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}/replay": {
      "post": {
        "security": [
          {
            "recordRecovery": [
              "rec.c"
            ]
          }
        ],
        "description": "Re-play a recoverable record.  \n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Re-play a recoverable record",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DiagnosticActivation": {
      "type": "object",
      "required": [
        "agentId"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "id": {
          "description": "Unique identifier of diagnostic activation resource",
          "type": "string",
          "maxLength": 36,
          "readOnly": true,
          "example": "8f273818-e975-11e8-9f32-f2801f1b9fd1"
        },
        "status": {
          "description": "Status of the activation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "example": "ACTIVE"
        }
      }
    },
    "DiagnosticActivationStatus": {
      "type": "object",
      "required": [
        "agentId"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "status": {
          "description": "Status of the activation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "example": "ACTIVE"
        }
      }
    },
    "DiagnosticInformation": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "correlationId": {
          "type": "string",
          "maxLength": 36,
          "example": "3fcf2a5ecc7611e7abc4cec278b6b50a"
        },
        "message": {
          "type": "string",
          "maxLength": 4096,
          "example": "[Finished] TimeSeries upload completed, \u003c1\u003e samplings and \u003c1\u003e properties in \u003c1\u003e requests\u003e. \u003c0\u003e values are dropped."
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "source": {
          "description": "Source of diagnostic information.",
          "type": "string",
          "example": "TIMESERIES"
        },
        "state": {
          "description": "State of diagnostic information.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "RETRYING",
            "DROPPED",
            "PROCESSING",
            "FINISHED"
          ]
        },
        "timestamp": {
          "description": "Diagnostic information creation date.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "DiagnosticInformationMessage": {
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string",
          "maxLength": 36,
          "example": "3fcf2a5ecc7611e7abc4cec278b6b50a"
        },
        "message": {
          "type": "string",
          "maxLength": 4096,
          "example": "[Finished] TimeSeries upload completed, \u003c1\u003e samplings and \u003c1\u003e properties in \u003c1\u003e requests\u003e. \u003c0\u003e values are dropped."
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "source": {
          "description": "Source of diagnostic information.",
          "type": "string",
          "example": "TIMESERIES"
        },
        "state": {
          "description": "State of diagnostic information.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "RETRYING",
            "DROPPED",
            "PROCESSING",
            "FINISHED"
          ]
        },
        "timestamp": {
          "description": "Diagnostic information creation date.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "Mapping": {
      "type": "object",
      "required": [
        "agentId",
        "dataPointId",
        "entityId",
        "propertySetName",
        "propertyName"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "example": "11961bc396cd4a87a9b26b723f5b7ba0"
        },
        "dataPointId": {
          "description": "Unique identifier of the data point",
          "type": "string",
          "maxLength": 36,
          "example": "DP0001"
        },
        "dataPointType": {
          "description": "Type of the data point",
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BIG_STRING",
            "TIMESTAMP"
          ],
          "readOnly": true
        },
        "dataPointUnit": {
          "description": "Unit of the data point",
          "type": "string",
          "maxLength": 32,
          "readOnly": true,
          "example": "%"
        },
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "example": "83e78008eadf453bae4f5c7bef3db550"
        },
        "id": {
          "description": "Unique identifier of the mapping resource",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "4fad6258-5def-4d84-a4c2-1481b209c116"
        },
        "keepMapping": {
          "description": "Identifies auto deleting mapping or keeping mapping.",
          "type": "boolean",
          "default": false,
          "example": false
        },
        "propertyName": {
          "type": "string",
          "maxLength": 256,
          "example": "Voltage"
        },
        "propertySetName": {
          "type": "string",
          "maxLength": 256,
          "example": "ElectricalProperties"
        },
        "propertyType": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BIG_STRING",
            "TIMESTAMP"
          ],
          "readOnly": true
        },
        "propertyUnit": {
          "type": "string",
          "maxLength": 32,
          "readOnly": true,
          "example": "%"
        },
        "qualityEnabled": {
          "type": "boolean",
          "readOnly": true
        },
        "validity": {
          "allOf": [
            {
              "$ref": "#/definitions/Validity"
            }
          ],
          "readOnly": true
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "ascending": {
          "description": "Whether sorting for this property shall be ascending.",
          "type": "boolean"
        },
        "descending": {
          "description": "Whether sorting for this property shall be descending.",
          "type": "boolean"
        },
        "direction": {
          "description": "The order the property shall be sorted for.",
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        },
        "ignoreCase": {
          "description": "Whether or not the sort will be case sensitive.",
          "type": "boolean"
        },
        "nullHandling": {
          "type": "string",
          "enum": [
            "NATIVE",
            "NULLS_FIRST",
            "NULLS_LAST"
          ]
        },
        "property": {
          "description": "The property to order for.",
          "type": "string"
        }
      }
    },
    "PagedDiagnosticActivation": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticActivation"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedDiagnosticInformation": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticInformation"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedDiagnosticInformationMessages": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticInformationMessage"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedMapping": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mapping"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedRecoverableRecords": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoverableRecords"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RecoverableRecords": {
      "type": "object",
      "properties": {
        "agentId": {
          "description": "agentId",
          "type": "string",
          "format": "string",
          "maxLength": 36,
          "readOnly": true,
          "example": "33238f98784711e8adc0fa7ae01bbebc"
        },
        "correlationId": {
          "description": "Unique identifier of the record",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "7had568-5def-4d84-a4c2-1481b209c116"
        },
        "dropReason": {
          "description": "Drop reason of data",
          "type": "string",
          "format": "string",
          "maxLength": 1024,
          "readOnly": true,
          "example": " \u003c[Dropped] TimeSeries Data is dropped. Validation failed for reason \u003cPre-processing of \u003c153000\u003e data points ended with \u003c60600\u003e valid and \u003c92400\u003e dropped data points. Following issues found: Data point with no mapping count is \u003c92400\u003e, including \u003c[variable101, variable102, variable103, variable104, variable105, variable106, variable107, variable108, variable109, variable110]\u003e.\u003e\u003e"
        },
        "id": {
          "description": "Unique identifier of the record",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "4fad6258-5def-4d84-a4c2-1481b209c116"
        },
        "requestTime": {
          "description": "Ingestion date of the data.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "Validity": {
      "type": "object",
      "required": [
        "status",
        "reasons"
      ],
      "properties": {
        "reasons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "MISSING_DATAPOINT",
              "MISSING_PROPERTY",
              "INVALID_TYPE",
              "INVALID_UNIT"
            ]
          },
          "example": [
            "MISSING_DATAPOINT"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "VALID",
            "INVALID"
          ],
          "example": "INVALID"
        }
      }
    },
    "badrequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "The request is not valid."
        }
      }
    },
    "conflict": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "A newer resource version is available."
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "forbidden": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Insufficient authorization for this resource."
        }
      }
    },
    "notfound": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Resource not found."
        }
      }
    },
    "payLoadTooLarge": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "The request is too large."
        }
      }
    },
    "unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    }
  },
  "securityDefinitions": {
    "diagnosticActivations": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "da.c": "Permission to create a diagnostic activation.",
        "da.d": "Permission to delete a diagnostic activation.",
        "da.m.r": "Permission to read a/all diagnostic messages of specific activation resource.",
        "da.r": "Permission to read a/all diagnostic activation.",
        "da.u": "Permission to update a diagnostic activation."
      }
    },
    "diagnosticInformation": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "di.r": "Permission to read diagnostic information."
      }
    },
    "exchange": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "exc.w": "Permission to exchange data."
      }
    },
    "mappings": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "map.c": "Permission to create a mapping",
        "map.d": "Permission to delete a mapping",
        "map.r": "Permission to read mapping(s)."
      }
    },
    "recordRecovery": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "rec.c": "Permission to replay recoverable record.",
        "rec.d": "Permission to delete recoverable record.",
        "rec.r": "Permission to read recoverable record."
      }
    }
  },
  "tags": [
    {
      "description": "Mapping Operations",
      "name": "Mappings"
    },
    {
      "description": "Exchange Operations",
      "name": "Exchange"
    },
    {
      "description": "Diagnostic Activations Operations",
      "name": "Diagnostic Activations"
    },
    {
      "description": "Record Recovery Operations",
      "name": "Record Recovery"
    },
    {
      "description": "Diagnostic Information Operations",
      "name": "Diagnostic Information"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\nMindConnect API provides following data ingestion functionalities:\n\n# Data Point Mappings\n\nCreating and managing mappings between an agent's data points and an entity's dynamic property to be able to upload TimeSeries data.\n\n\nEach agent has data points with unique ids. The mapping is between to this id to an entity's dynamic property set's property.\n\n- A data point can be mapped to many property of many property set of many\nentities.\n\n- A property cannot be mapped from more than one data point. \n\n- A propertyset can have mappings from many agents' many data points to its\nproperties.\n\n- The unit of the datapoint has to be same with the unit of the property.\n\n- The type of the datapoint has to be same with the type of the property.\n\n\nWhenever data source configuration of an agent is updated via Agent Management API; all mappings with __keepMapping__ attribute set gets their validity attribute updated and all mappings with __keepMapping__ attribute unset are deleted.\n\n\n# Exchange\n\nExchanging time series, events, files and data source configuration data. Combination of different data types can be uploaded via exchange endpoint within  multipart body. Maximum size of exchange body is 10MBs.\n\n# Diagnostic Activations\n\nManagement of Diagnostic Activations and querying Diagnostic Messages of time series, event, file and data source configuration requests.\n\n- Maximum 5 agents per tenant can be activated for data ingestion tracking.\n\n- For non-agents, the required permission allows to manage diagnostic activation resources of agents in the same tenant as in the token.\n\n- For agents, only the diagnostic activation related to the agent can be managed. Agents are forbidden to view/change the resources of other agents in the same tenant.\n\n- Agents are allowed to update activation for itself only. Users with sufficient scopes are allowed\n",
    "title": "MindConnect API",
    "version": "3.5.0",
    "x-visibility": "external"
  },
  "basePath": "/api/mindconnect/v3",
  "paths": {
    "/dataPointMappings": {
      "get": {
        "security": [
          {
            "mappings": [
              "map.r"
            ]
          }
        ],
        "description": "Retrieves a list of mappings.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Get mappings.",
        "parameters": [
          {
            "type": "string",
            "description": "Filter as JSON object.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedMapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "mappings": [
              "map.c"
            ]
          }
        ],
        "description": "Creates a single mapping.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Create single mapping",
        "parameters": [
          {
            "description": "Object describing new mapping resource.",
            "name": "mapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          },
          "400": {
            "description": "Bad Request. Request validations failed.",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/conflict"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/dataPointMappings/{id}": {
      "get": {
        "security": [
          {
            "mappings": [
              "map.r"
            ]
          }
        ],
        "description": "Gets a mapping by given id.\n",
        "tags": [
          "Mappings"
        ],
        "summary": "Get a mapping by id",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the mapping resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Mapping"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Mapping not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "mappings": [
              "map.d"
            ]
          }
        ],
        "description": "Deletes a mapping.  \n",
        "tags": [
          "Mappings"
        ],
        "summary": "Delete a mapping",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the mapping resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Mapping not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.r"
            ]
          }
        ],
        "description": "Get diagnostic activations. Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get all activations in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Gets diagnostic activations\n",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "diagnosticActivations": [
              "da.c"
            ]
          }
        ],
        "description": "Create a new diagnostic activation. \nAgents are allowed to create activation for itself only. Users with sufficient scopes are allowed to create activations of the agents in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Creates a new diagnostic activation\n",
        "parameters": [
          {
            "description": "Object describing new diagnostic activation resource.",
            "name": "diagnosticActivation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/conflict"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations/{id}": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.r"
            ]
          }
        ],
        "description": "Get a diagnostic activation with given id.  Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get any activation in the same tenant as in the token.  \n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Gets a diagnostic activation.  \n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "diagnosticActivations": [
              "da.u"
            ]
          }
        ],
        "description": "Updates status of Diagnostic Activation.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Update status of Diagnostic Activation\n",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Object describing updated diagnostic activation status.",
            "name": "diagnosticActivationStatus",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnosticActivationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DiagnosticActivation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "diagnosticActivations": [
              "da.d"
            ]
          }
        ],
        "description": "Delete a diagnostic activation. Agents are allowed to delete their own activation. Users with sufficient scopes are allowed to delete any activation in the same tenant as in the token.\n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Deletes a diagnostic activation\n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticActivations/{id}/messages": {
      "get": {
        "security": [
          {
            "diagnosticActivations": [
              "da.m.r"
            ]
          }
        ],
        "description": "Get a diagnostic messages of specific activation resource. Agents are allowed to get their own activations' messages. Users with sufficient scopes are allowed to get any activations messages in the same tenant as in the token.  \n",
        "tags": [
          "Diagnostic Activations"
        ],
        "summary": "Get a diagnostic messages of specific activation resource\n",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of diagnostic activation resource.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "JSON based filter. Diagnostic messages can be filtered by the following fields\n - ` + "`" + `correlationId` + "`" + `\n - ` + "`" + `message` + "`" + `\n - ` + "`" + `source` + "`" + `\n - ` + "`" + `timestamp` + "`" + `\n - ` + "`" + `severity` + "`" + `\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticInformationMessages"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/diagnosticInformation": {
      "get": {
        "security": [
          {
            "diagnosticInformation": [
              "di.r"
            ]
          }
        ],
        "description": "This operation is deprecated! Use \"/diagnosticActivations/{id}/messages\" instead. \nGets Diagnostic Information. \n",
        "tags": [
          "Diagnostic Information"
        ],
        "summary": "Get Diagnostic Information",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter. Diagnostic information can be filtered by the following fields\n - ` + "`" + `agentId` + "`" + `\n - ` + "`" + `correlationId` + "`" + `\n - ` + "`" + `message` + "`" + `\n - ` + "`" + `source` + "`" + `\n - ` + "`" + `timestamp` + "`" + `\n - ` + "`" + `severity` + "`" + `\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedDiagnosticInformation"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/exchange": {
      "post": {
        "security": [
          {
            "exchange": [
              "exc.w"
            ]
          }
        ],
        "consumes": [
          "multipart/mixed"
        ],
        "tags": [
          "Exchange"
        ],
        "parameters": [
          {
            "description": "Multipart message.",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "bad request, e.g. multi part body is not well formatted.",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "413": {
            "description": "Payload Too Large",
            "schema": {
              "$ref": "#/definitions/payLoadTooLarge"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords": {
      "get": {
        "security": [
          {
            "recordRecovery": [
              "rec.r"
            ]
          }
        ],
        "description": "Gets all recoverable records\n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Get all recoverable records",
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter.",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedRecoverableRecords"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}": {
      "delete": {
        "security": [
          {
            "recordRecovery": [
              "rec.d"
            ]
          }
        ],
        "description": "Deletes a recoverable record.  \n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Delete a recoverable record",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Recoverable record not found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}/downloadLink": {
      "get": {
        "security": [
          {
            "recordRecovery": [
              "rec.r"
            ]
          }
        ],
        "description": "Gets download link of record payload\n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Get download link of record payload.",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://bucketname-s3.eu-central-1.amazonaws.com/c9bcd-44ab-4cfa-a87e-d81e727d9af4?X"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/recoverableRecords/{id}/replay": {
      "post": {
        "security": [
          {
            "recordRecovery": [
              "rec.c"
            ]
          }
        ],
        "description": "Re-play a recoverable record.  \n",
        "tags": [
          "Record Recovery"
        ],
        "summary": "Re-play a recoverable record",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the recoverable record.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/notfound"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DiagnosticActivation": {
      "type": "object",
      "required": [
        "agentId"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "id": {
          "description": "Unique identifier of diagnostic activation resource",
          "type": "string",
          "maxLength": 36,
          "readOnly": true,
          "example": "8f273818-e975-11e8-9f32-f2801f1b9fd1"
        },
        "status": {
          "description": "Status of the activation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "example": "ACTIVE"
        }
      }
    },
    "DiagnosticActivationStatus": {
      "type": "object",
      "required": [
        "agentId"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "status": {
          "description": "Status of the activation",
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "example": "ACTIVE"
        }
      }
    },
    "DiagnosticInformation": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "correlationId": {
          "type": "string",
          "maxLength": 36,
          "example": "3fcf2a5ecc7611e7abc4cec278b6b50a"
        },
        "message": {
          "type": "string",
          "maxLength": 4096,
          "example": "[Finished] TimeSeries upload completed, \u003c1\u003e samplings and \u003c1\u003e properties in \u003c1\u003e requests\u003e. \u003c0\u003e values are dropped."
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "source": {
          "description": "Source of diagnostic information.",
          "type": "string",
          "example": "TIMESERIES"
        },
        "state": {
          "description": "State of diagnostic information.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "RETRYING",
            "DROPPED",
            "PROCESSING",
            "FINISHED"
          ]
        },
        "timestamp": {
          "description": "Diagnostic information creation date.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "DiagnosticInformationMessage": {
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string",
          "maxLength": 36,
          "example": "3fcf2a5ecc7611e7abc4cec278b6b50a"
        },
        "message": {
          "type": "string",
          "maxLength": 4096,
          "example": "[Finished] TimeSeries upload completed, \u003c1\u003e samplings and \u003c1\u003e properties in \u003c1\u003e requests\u003e. \u003c0\u003e values are dropped."
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "source": {
          "description": "Source of diagnostic information.",
          "type": "string",
          "example": "TIMESERIES"
        },
        "state": {
          "description": "State of diagnostic information.",
          "type": "string",
          "enum": [
            "ACCEPTED",
            "RETRYING",
            "DROPPED",
            "PROCESSING",
            "FINISHED"
          ]
        },
        "timestamp": {
          "description": "Diagnostic information creation date.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "Mapping": {
      "type": "object",
      "required": [
        "agentId",
        "dataPointId",
        "entityId",
        "propertySetName",
        "propertyName"
      ],
      "properties": {
        "agentId": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "example": "11961bc396cd4a87a9b26b723f5b7ba0"
        },
        "dataPointId": {
          "description": "Unique identifier of the data point",
          "type": "string",
          "maxLength": 36,
          "example": "DP0001"
        },
        "dataPointType": {
          "description": "Type of the data point",
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BIG_STRING",
            "TIMESTAMP"
          ],
          "readOnly": true
        },
        "dataPointUnit": {
          "description": "Unit of the data point",
          "type": "string",
          "maxLength": 32,
          "readOnly": true,
          "example": "%"
        },
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "example": "83e78008eadf453bae4f5c7bef3db550"
        },
        "id": {
          "description": "Unique identifier of the mapping resource",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "4fad6258-5def-4d84-a4c2-1481b209c116"
        },
        "keepMapping": {
          "description": "Identifies auto deleting mapping or keeping mapping.",
          "type": "boolean",
          "default": false,
          "example": false
        },
        "propertyName": {
          "type": "string",
          "maxLength": 256,
          "example": "Voltage"
        },
        "propertySetName": {
          "type": "string",
          "maxLength": 256,
          "example": "ElectricalProperties"
        },
        "propertyType": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING",
            "BIG_STRING",
            "TIMESTAMP"
          ],
          "readOnly": true
        },
        "propertyUnit": {
          "type": "string",
          "maxLength": 32,
          "readOnly": true,
          "example": "%"
        },
        "qualityEnabled": {
          "type": "boolean",
          "readOnly": true
        },
        "validity": {
          "allOf": [
            {
              "$ref": "#/definitions/Validity"
            }
          ],
          "readOnly": true
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "ascending": {
          "description": "Whether sorting for this property shall be ascending.",
          "type": "boolean"
        },
        "descending": {
          "description": "Whether sorting for this property shall be descending.",
          "type": "boolean"
        },
        "direction": {
          "description": "The order the property shall be sorted for.",
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        },
        "ignoreCase": {
          "description": "Whether or not the sort will be case sensitive.",
          "type": "boolean"
        },
        "nullHandling": {
          "type": "string",
          "enum": [
            "NATIVE",
            "NULLS_FIRST",
            "NULLS_LAST"
          ]
        },
        "property": {
          "description": "The property to order for.",
          "type": "string"
        }
      }
    },
    "PagedDiagnosticActivation": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticActivation"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedDiagnosticInformation": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticInformation"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedDiagnosticInformationMessages": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiagnosticInformationMessage"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedMapping": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mapping"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "PagedRecoverableRecords": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoverableRecords"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "RecoverableRecords": {
      "type": "object",
      "properties": {
        "agentId": {
          "description": "agentId",
          "type": "string",
          "format": "string",
          "maxLength": 36,
          "readOnly": true,
          "example": "33238f98784711e8adc0fa7ae01bbebc"
        },
        "correlationId": {
          "description": "Unique identifier of the record",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "7had568-5def-4d84-a4c2-1481b209c116"
        },
        "dropReason": {
          "description": "Drop reason of data",
          "type": "string",
          "format": "string",
          "maxLength": 1024,
          "readOnly": true,
          "example": " \u003c[Dropped] TimeSeries Data is dropped. Validation failed for reason \u003cPre-processing of \u003c153000\u003e data points ended with \u003c60600\u003e valid and \u003c92400\u003e dropped data points. Following issues found: Data point with no mapping count is \u003c92400\u003e, including \u003c[variable101, variable102, variable103, variable104, variable105, variable106, variable107, variable108, variable109, variable110]\u003e.\u003e\u003e"
        },
        "id": {
          "description": "Unique identifier of the record",
          "type": "string",
          "format": "uuid",
          "maxLength": 36,
          "readOnly": true,
          "example": "4fad6258-5def-4d84-a4c2-1481b209c116"
        },
        "requestTime": {
          "description": "Ingestion date of the data.",
          "type": "string",
          "format": "date-time",
          "example": "2018-08-27T16:40:11.235Z"
        }
      }
    },
    "Validity": {
      "type": "object",
      "required": [
        "status",
        "reasons"
      ],
      "properties": {
        "reasons": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "MISSING_DATAPOINT",
              "MISSING_PROPERTY",
              "INVALID_TYPE",
              "INVALID_UNIT"
            ]
          },
          "example": [
            "MISSING_DATAPOINT"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "VALID",
            "INVALID"
          ],
          "example": "INVALID"
        }
      }
    },
    "badrequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "The request is not valid."
        }
      }
    },
    "conflict": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "A newer resource version is available."
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "forbidden": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Insufficient authorization for this resource."
        }
      }
    },
    "notfound": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Resource not found."
        }
      }
    },
    "payLoadTooLarge": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "The request is too large."
        }
      }
    },
    "unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    }
  },
  "securityDefinitions": {
    "diagnosticActivations": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "da.c": "Permission to create a diagnostic activation.",
        "da.d": "Permission to delete a diagnostic activation.",
        "da.m.r": "Permission to read a/all diagnostic messages of specific activation resource.",
        "da.r": "Permission to read a/all diagnostic activation.",
        "da.u": "Permission to update a diagnostic activation."
      }
    },
    "diagnosticInformation": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "di.r": "Permission to read diagnostic information."
      }
    },
    "exchange": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "exc.w": "Permission to exchange data."
      }
    },
    "mappings": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "map.c": "Permission to create a mapping",
        "map.d": "Permission to delete a mapping",
        "map.r": "Permission to read mapping(s)."
      }
    },
    "recordRecovery": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "rec.c": "Permission to replay recoverable record.",
        "rec.d": "Permission to delete recoverable record.",
        "rec.r": "Permission to read recoverable record."
      }
    }
  },
  "tags": [
    {
      "description": "Mapping Operations",
      "name": "Mappings"
    },
    {
      "description": "Exchange Operations",
      "name": "Exchange"
    },
    {
      "description": "Diagnostic Activations Operations",
      "name": "Diagnostic Activations"
    },
    {
      "description": "Record Recovery Operations",
      "name": "Record Recovery"
    },
    {
      "description": "Diagnostic Information Operations",
      "name": "Diagnostic Information"
    }
  ]
}`))
}
