// Code generated by go-swagger; DO NOT EDIT.

package record_recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/mc/models"
)

// DeleteRecoverableRecordsIDHandlerFunc turns a function with the right signature into a delete recoverable records ID handler
type DeleteRecoverableRecordsIDHandlerFunc func(DeleteRecoverableRecordsIDParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRecoverableRecordsIDHandlerFunc) Handle(params DeleteRecoverableRecordsIDParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteRecoverableRecordsIDHandler interface for that can handle valid delete recoverable records ID params
type DeleteRecoverableRecordsIDHandler interface {
	Handle(DeleteRecoverableRecordsIDParams, *models.Principal) middleware.Responder
}

// NewDeleteRecoverableRecordsID creates a new http.Handler for the delete recoverable records ID operation
func NewDeleteRecoverableRecordsID(ctx *middleware.Context, handler DeleteRecoverableRecordsIDHandler) *DeleteRecoverableRecordsID {
	return &DeleteRecoverableRecordsID{Context: ctx, Handler: handler}
}

/*
	DeleteRecoverableRecordsID swagger:route DELETE /recoverableRecords/{id} Record Recovery deleteRecoverableRecordsId

# Delete a recoverable record

Deletes a recoverable record.
*/
type DeleteRecoverableRecordsID struct {
	Context *middleware.Context
	Handler DeleteRecoverableRecordsIDHandler
}

func (o *DeleteRecoverableRecordsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteRecoverableRecordsIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
