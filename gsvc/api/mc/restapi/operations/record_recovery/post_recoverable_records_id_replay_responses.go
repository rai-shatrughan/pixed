// Code generated by go-swagger; DO NOT EDIT.

package record_recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/mc/models"
)

// PostRecoverableRecordsIDReplayOKCode is the HTTP code returned for type PostRecoverableRecordsIDReplayOK
const PostRecoverableRecordsIDReplayOKCode int = 200

/*
PostRecoverableRecordsIDReplayOK OK

swagger:response postRecoverableRecordsIdReplayOK
*/
type PostRecoverableRecordsIDReplayOK struct {
}

// NewPostRecoverableRecordsIDReplayOK creates PostRecoverableRecordsIDReplayOK with default headers values
func NewPostRecoverableRecordsIDReplayOK() *PostRecoverableRecordsIDReplayOK {

	return &PostRecoverableRecordsIDReplayOK{}
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostRecoverableRecordsIDReplayBadRequestCode is the HTTP code returned for type PostRecoverableRecordsIDReplayBadRequest
const PostRecoverableRecordsIDReplayBadRequestCode int = 400

/*
PostRecoverableRecordsIDReplayBadRequest Bad Request

swagger:response postRecoverableRecordsIdReplayBadRequest
*/
type PostRecoverableRecordsIDReplayBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Badrequest `json:"body,omitempty"`
}

// NewPostRecoverableRecordsIDReplayBadRequest creates PostRecoverableRecordsIDReplayBadRequest with default headers values
func NewPostRecoverableRecordsIDReplayBadRequest() *PostRecoverableRecordsIDReplayBadRequest {

	return &PostRecoverableRecordsIDReplayBadRequest{}
}

// WithPayload adds the payload to the post recoverable records Id replay bad request response
func (o *PostRecoverableRecordsIDReplayBadRequest) WithPayload(payload *models.Badrequest) *PostRecoverableRecordsIDReplayBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post recoverable records Id replay bad request response
func (o *PostRecoverableRecordsIDReplayBadRequest) SetPayload(payload *models.Badrequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRecoverableRecordsIDReplayUnauthorizedCode is the HTTP code returned for type PostRecoverableRecordsIDReplayUnauthorized
const PostRecoverableRecordsIDReplayUnauthorizedCode int = 401

/*
PostRecoverableRecordsIDReplayUnauthorized Unauthorized

swagger:response postRecoverableRecordsIdReplayUnauthorized
*/
type PostRecoverableRecordsIDReplayUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Unauthorized `json:"body,omitempty"`
}

// NewPostRecoverableRecordsIDReplayUnauthorized creates PostRecoverableRecordsIDReplayUnauthorized with default headers values
func NewPostRecoverableRecordsIDReplayUnauthorized() *PostRecoverableRecordsIDReplayUnauthorized {

	return &PostRecoverableRecordsIDReplayUnauthorized{}
}

// WithPayload adds the payload to the post recoverable records Id replay unauthorized response
func (o *PostRecoverableRecordsIDReplayUnauthorized) WithPayload(payload *models.Unauthorized) *PostRecoverableRecordsIDReplayUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post recoverable records Id replay unauthorized response
func (o *PostRecoverableRecordsIDReplayUnauthorized) SetPayload(payload *models.Unauthorized) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRecoverableRecordsIDReplayForbiddenCode is the HTTP code returned for type PostRecoverableRecordsIDReplayForbidden
const PostRecoverableRecordsIDReplayForbiddenCode int = 403

/*
PostRecoverableRecordsIDReplayForbidden Forbidden

swagger:response postRecoverableRecordsIdReplayForbidden
*/
type PostRecoverableRecordsIDReplayForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Forbidden `json:"body,omitempty"`
}

// NewPostRecoverableRecordsIDReplayForbidden creates PostRecoverableRecordsIDReplayForbidden with default headers values
func NewPostRecoverableRecordsIDReplayForbidden() *PostRecoverableRecordsIDReplayForbidden {

	return &PostRecoverableRecordsIDReplayForbidden{}
}

// WithPayload adds the payload to the post recoverable records Id replay forbidden response
func (o *PostRecoverableRecordsIDReplayForbidden) WithPayload(payload *models.Forbidden) *PostRecoverableRecordsIDReplayForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post recoverable records Id replay forbidden response
func (o *PostRecoverableRecordsIDReplayForbidden) SetPayload(payload *models.Forbidden) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRecoverableRecordsIDReplayNotFoundCode is the HTTP code returned for type PostRecoverableRecordsIDReplayNotFound
const PostRecoverableRecordsIDReplayNotFoundCode int = 404

/*
PostRecoverableRecordsIDReplayNotFound Not Found

swagger:response postRecoverableRecordsIdReplayNotFound
*/
type PostRecoverableRecordsIDReplayNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Notfound `json:"body,omitempty"`
}

// NewPostRecoverableRecordsIDReplayNotFound creates PostRecoverableRecordsIDReplayNotFound with default headers values
func NewPostRecoverableRecordsIDReplayNotFound() *PostRecoverableRecordsIDReplayNotFound {

	return &PostRecoverableRecordsIDReplayNotFound{}
}

// WithPayload adds the payload to the post recoverable records Id replay not found response
func (o *PostRecoverableRecordsIDReplayNotFound) WithPayload(payload *models.Notfound) *PostRecoverableRecordsIDReplayNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post recoverable records Id replay not found response
func (o *PostRecoverableRecordsIDReplayNotFound) SetPayload(payload *models.Notfound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostRecoverableRecordsIDReplayDefault unexpected error

swagger:response postRecoverableRecordsIdReplayDefault
*/
type PostRecoverableRecordsIDReplayDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRecoverableRecordsIDReplayDefault creates PostRecoverableRecordsIDReplayDefault with default headers values
func NewPostRecoverableRecordsIDReplayDefault(code int) *PostRecoverableRecordsIDReplayDefault {
	if code <= 0 {
		code = 500
	}

	return &PostRecoverableRecordsIDReplayDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post recoverable records ID replay default response
func (o *PostRecoverableRecordsIDReplayDefault) WithStatusCode(code int) *PostRecoverableRecordsIDReplayDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post recoverable records ID replay default response
func (o *PostRecoverableRecordsIDReplayDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post recoverable records ID replay default response
func (o *PostRecoverableRecordsIDReplayDefault) WithPayload(payload *models.Error) *PostRecoverableRecordsIDReplayDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post recoverable records ID replay default response
func (o *PostRecoverableRecordsIDReplayDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRecoverableRecordsIDReplayDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
