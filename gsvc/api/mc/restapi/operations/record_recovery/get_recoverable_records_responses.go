// Code generated by go-swagger; DO NOT EDIT.

package record_recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/mc/models"
)

// GetRecoverableRecordsOKCode is the HTTP code returned for type GetRecoverableRecordsOK
const GetRecoverableRecordsOKCode int = 200

/*
GetRecoverableRecordsOK OK

swagger:response getRecoverableRecordsOK
*/
type GetRecoverableRecordsOK struct {

	/*
	  In: Body
	*/
	Payload *models.PagedRecoverableRecords `json:"body,omitempty"`
}

// NewGetRecoverableRecordsOK creates GetRecoverableRecordsOK with default headers values
func NewGetRecoverableRecordsOK() *GetRecoverableRecordsOK {

	return &GetRecoverableRecordsOK{}
}

// WithPayload adds the payload to the get recoverable records o k response
func (o *GetRecoverableRecordsOK) WithPayload(payload *models.PagedRecoverableRecords) *GetRecoverableRecordsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recoverable records o k response
func (o *GetRecoverableRecordsOK) SetPayload(payload *models.PagedRecoverableRecords) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecoverableRecordsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecoverableRecordsBadRequestCode is the HTTP code returned for type GetRecoverableRecordsBadRequest
const GetRecoverableRecordsBadRequestCode int = 400

/*
GetRecoverableRecordsBadRequest Bad Request

swagger:response getRecoverableRecordsBadRequest
*/
type GetRecoverableRecordsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Badrequest `json:"body,omitempty"`
}

// NewGetRecoverableRecordsBadRequest creates GetRecoverableRecordsBadRequest with default headers values
func NewGetRecoverableRecordsBadRequest() *GetRecoverableRecordsBadRequest {

	return &GetRecoverableRecordsBadRequest{}
}

// WithPayload adds the payload to the get recoverable records bad request response
func (o *GetRecoverableRecordsBadRequest) WithPayload(payload *models.Badrequest) *GetRecoverableRecordsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recoverable records bad request response
func (o *GetRecoverableRecordsBadRequest) SetPayload(payload *models.Badrequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecoverableRecordsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecoverableRecordsUnauthorizedCode is the HTTP code returned for type GetRecoverableRecordsUnauthorized
const GetRecoverableRecordsUnauthorizedCode int = 401

/*
GetRecoverableRecordsUnauthorized unauthorized

swagger:response getRecoverableRecordsUnauthorized
*/
type GetRecoverableRecordsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Unauthorized `json:"body,omitempty"`
}

// NewGetRecoverableRecordsUnauthorized creates GetRecoverableRecordsUnauthorized with default headers values
func NewGetRecoverableRecordsUnauthorized() *GetRecoverableRecordsUnauthorized {

	return &GetRecoverableRecordsUnauthorized{}
}

// WithPayload adds the payload to the get recoverable records unauthorized response
func (o *GetRecoverableRecordsUnauthorized) WithPayload(payload *models.Unauthorized) *GetRecoverableRecordsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recoverable records unauthorized response
func (o *GetRecoverableRecordsUnauthorized) SetPayload(payload *models.Unauthorized) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecoverableRecordsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRecoverableRecordsForbiddenCode is the HTTP code returned for type GetRecoverableRecordsForbidden
const GetRecoverableRecordsForbiddenCode int = 403

/*
GetRecoverableRecordsForbidden Forbidden

swagger:response getRecoverableRecordsForbidden
*/
type GetRecoverableRecordsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Forbidden `json:"body,omitempty"`
}

// NewGetRecoverableRecordsForbidden creates GetRecoverableRecordsForbidden with default headers values
func NewGetRecoverableRecordsForbidden() *GetRecoverableRecordsForbidden {

	return &GetRecoverableRecordsForbidden{}
}

// WithPayload adds the payload to the get recoverable records forbidden response
func (o *GetRecoverableRecordsForbidden) WithPayload(payload *models.Forbidden) *GetRecoverableRecordsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recoverable records forbidden response
func (o *GetRecoverableRecordsForbidden) SetPayload(payload *models.Forbidden) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecoverableRecordsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetRecoverableRecordsDefault unexpected error

swagger:response getRecoverableRecordsDefault
*/
type GetRecoverableRecordsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRecoverableRecordsDefault creates GetRecoverableRecordsDefault with default headers values
func NewGetRecoverableRecordsDefault(code int) *GetRecoverableRecordsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRecoverableRecordsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get recoverable records default response
func (o *GetRecoverableRecordsDefault) WithStatusCode(code int) *GetRecoverableRecordsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get recoverable records default response
func (o *GetRecoverableRecordsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get recoverable records default response
func (o *GetRecoverableRecordsDefault) WithPayload(payload *models.Error) *GetRecoverableRecordsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get recoverable records default response
func (o *GetRecoverableRecordsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecoverableRecordsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
