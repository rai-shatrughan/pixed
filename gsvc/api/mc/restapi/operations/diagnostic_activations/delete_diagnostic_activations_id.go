// Code generated by go-swagger; DO NOT EDIT.

package diagnostic_activations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/mc/models"
)

// DeleteDiagnosticActivationsIDHandlerFunc turns a function with the right signature into a delete diagnostic activations ID handler
type DeleteDiagnosticActivationsIDHandlerFunc func(DeleteDiagnosticActivationsIDParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDiagnosticActivationsIDHandlerFunc) Handle(params DeleteDiagnosticActivationsIDParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteDiagnosticActivationsIDHandler interface for that can handle valid delete diagnostic activations ID params
type DeleteDiagnosticActivationsIDHandler interface {
	Handle(DeleteDiagnosticActivationsIDParams, *models.Principal) middleware.Responder
}

// NewDeleteDiagnosticActivationsID creates a new http.Handler for the delete diagnostic activations ID operation
func NewDeleteDiagnosticActivationsID(ctx *middleware.Context, handler DeleteDiagnosticActivationsIDHandler) *DeleteDiagnosticActivationsID {
	return &DeleteDiagnosticActivationsID{Context: ctx, Handler: handler}
}

/*
	DeleteDiagnosticActivationsID swagger:route DELETE /diagnosticActivations/{id} Diagnostic Activations deleteDiagnosticActivationsId

# Deletes a diagnostic activation

Delete a diagnostic activation. Agents are allowed to delete their own activation. Users with sufficient scopes are allowed to delete any activation in the same tenant as in the token.
*/
type DeleteDiagnosticActivationsID struct {
	Context *middleware.Context
	Handler DeleteDiagnosticActivationsIDHandler
}

func (o *DeleteDiagnosticActivationsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteDiagnosticActivationsIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
