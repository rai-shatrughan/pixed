// Code generated by go-swagger; DO NOT EDIT.

package diagnostic_activations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/mc/models"
)

// GetDiagnosticActivationsIDMessagesHandlerFunc turns a function with the right signature into a get diagnostic activations ID messages handler
type GetDiagnosticActivationsIDMessagesHandlerFunc func(GetDiagnosticActivationsIDMessagesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDiagnosticActivationsIDMessagesHandlerFunc) Handle(params GetDiagnosticActivationsIDMessagesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetDiagnosticActivationsIDMessagesHandler interface for that can handle valid get diagnostic activations ID messages params
type GetDiagnosticActivationsIDMessagesHandler interface {
	Handle(GetDiagnosticActivationsIDMessagesParams, *models.Principal) middleware.Responder
}

// NewGetDiagnosticActivationsIDMessages creates a new http.Handler for the get diagnostic activations ID messages operation
func NewGetDiagnosticActivationsIDMessages(ctx *middleware.Context, handler GetDiagnosticActivationsIDMessagesHandler) *GetDiagnosticActivationsIDMessages {
	return &GetDiagnosticActivationsIDMessages{Context: ctx, Handler: handler}
}

/*
	GetDiagnosticActivationsIDMessages swagger:route GET /diagnosticActivations/{id}/messages Diagnostic Activations getDiagnosticActivationsIdMessages

# Get a diagnostic messages of specific activation resource

Get a diagnostic messages of specific activation resource. Agents are allowed to get their own activations' messages. Users with sufficient scopes are allowed to get any activations messages in the same tenant as in the token.
*/
type GetDiagnosticActivationsIDMessages struct {
	Context *middleware.Context
	Handler GetDiagnosticActivationsIDMessagesHandler
}

func (o *GetDiagnosticActivationsIDMessages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDiagnosticActivationsIDMessagesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
