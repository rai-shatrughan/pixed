// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Validity validity
//
// swagger:model Validity
type Validity struct {

	// reasons
	// Example: ["MISSING_DATAPOINT"]
	// Required: true
	Reasons []string `json:"reasons"`

	// status
	// Example: INVALID
	// Required: true
	// Enum: [VALID INVALID]
	Status *string `json:"status"`
}

// Validate validates this validity
func (m *Validity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var validityReasonsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MISSING_DATAPOINT","MISSING_PROPERTY","INVALID_TYPE","INVALID_UNIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validityReasonsItemsEnum = append(validityReasonsItemsEnum, v)
	}
}

func (m *Validity) validateReasonsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validityReasonsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Validity) validateReasons(formats strfmt.Registry) error {

	if err := validate.Required("reasons", "body", m.Reasons); err != nil {
		return err
	}

	for i := 0; i < len(m.Reasons); i++ {

		// value enum
		if err := m.validateReasonsItemsEnum("reasons"+"."+strconv.Itoa(i), "body", m.Reasons[i]); err != nil {
			return err
		}

	}

	return nil
}

var validityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","INVALID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validityTypeStatusPropEnum = append(validityTypeStatusPropEnum, v)
	}
}

const (

	// ValidityStatusVALID captures enum value "VALID"
	ValidityStatusVALID string = "VALID"

	// ValidityStatusINVALID captures enum value "INVALID"
	ValidityStatusINVALID string = "INVALID"
)

// prop value enum
func (m *Validity) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validityTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Validity) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this validity based on context it is used
func (m *Validity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Validity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Validity) UnmarshalBinary(b []byte) error {
	var res Validity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
