// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoverableRecords recoverable records
//
// swagger:model RecoverableRecords
type RecoverableRecords struct {

	// agentId
	// Example: 33238f98784711e8adc0fa7ae01bbebc
	// Read Only: true
	// Max Length: 36
	AgentID string `json:"agentId,omitempty"`

	// Unique identifier of the record
	// Example: 7had568-5def-4d84-a4c2-1481b209c116
	// Read Only: true
	// Max Length: 36
	// Format: uuid
	CorrelationID strfmt.UUID `json:"correlationId,omitempty"`

	// Drop reason of data
	// Example:  \u003c[Dropped] TimeSeries Data is dropped. Validation failed for reason \u003cPre-processing of \u003c153000\u003e data points ended with \u003c60600\u003e valid and \u003c92400\u003e dropped data points. Following issues found: Data point with no mapping count is \u003c92400\u003e, including \u003c[variable101, variable102, variable103, variable104, variable105, variable106, variable107, variable108, variable109, variable110]\u003e.\u003e\u003e
	// Read Only: true
	// Max Length: 1024
	DropReason string `json:"dropReason,omitempty"`

	// Unique identifier of the record
	// Example: 4fad6258-5def-4d84-a4c2-1481b209c116
	// Read Only: true
	// Max Length: 36
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Ingestion date of the data.
	// Example: 2018-08-27T16:40:11.235Z
	// Format: date-time
	RequestTime strfmt.DateTime `json:"requestTime,omitempty"`
}

// Validate validates this recoverable records
func (m *RecoverableRecords) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorrelationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDropReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverableRecords) validateAgentID(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentID) { // not required
		return nil
	}

	if err := validate.MaxLength("agentId", "body", m.AgentID, 36); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) validateCorrelationID(formats strfmt.Registry) error {
	if swag.IsZero(m.CorrelationID) { // not required
		return nil
	}

	if err := validate.MaxLength("correlationId", "body", m.CorrelationID.String(), 36); err != nil {
		return err
	}

	if err := validate.FormatOf("correlationId", "body", "uuid", m.CorrelationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) validateDropReason(formats strfmt.Registry) error {
	if swag.IsZero(m.DropReason) { // not required
		return nil
	}

	if err := validate.MaxLength("dropReason", "body", m.DropReason, 1024); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", m.ID.String(), 36); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) validateRequestTime(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("requestTime", "body", "date-time", m.RequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recoverable records based on the context it is used
func (m *RecoverableRecords) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCorrelationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDropReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverableRecords) contextValidateAgentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "agentId", "body", string(m.AgentID)); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) contextValidateCorrelationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "correlationId", "body", strfmt.UUID(m.CorrelationID)); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) contextValidateDropReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dropReason", "body", string(m.DropReason)); err != nil {
		return err
	}

	return nil
}

func (m *RecoverableRecords) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverableRecords) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverableRecords) UnmarshalBinary(b []byte) error {
	var res RecoverableRecords
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
