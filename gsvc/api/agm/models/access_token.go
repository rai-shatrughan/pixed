// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccessToken access token
//
// swagger:model AccessToken
type AccessToken struct {

	// The access token to be used in calls to diot with Bearer authentication scheme.
	// Example: eyJh...
	AccessToken string `json:"access_token,omitempty"`

	// Number of seconds before this token expires from the time of issuance.
	// Example: 43199
	ExpiresIn int64 `json:"expires_in,omitempty"`

	// jti
	Jti Jti `json:"jti,omitempty"`

	// Agent permissions list.
	Scope []string `json:"scope"`

	// The type of the access token issued.
	// Example: bearer
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this access token
func (m *AccessToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJti(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessToken) validateJti(formats strfmt.Registry) error {
	if swag.IsZero(m.Jti) { // not required
		return nil
	}

	if err := m.Jti.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jti")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("jti")
		}
		return err
	}

	return nil
}

// ContextValidate validate this access token based on the context it is used
func (m *AccessToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJti(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessToken) contextValidateJti(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Jti.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jti")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("jti")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessToken) UnmarshalBinary(b []byte) error {
	var res AccessToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
