// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnlineStatus online status
//
// swagger:model OnlineStatus
type OnlineStatus struct {

	// since
	// Format: date-time
	Since strfmt.DateTime `json:"since,omitempty"`

	// status
	// Enum: [ONLINE OFFLINE]
	Status string `json:"status,omitempty"`
}

// Validate validates this online status
func (m *OnlineStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnlineStatus) validateSince(formats strfmt.Registry) error {
	if swag.IsZero(m.Since) { // not required
		return nil
	}

	if err := validate.FormatOf("since", "body", "date-time", m.Since.String(), formats); err != nil {
		return err
	}

	return nil
}

var onlineStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONLINE","OFFLINE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onlineStatusTypeStatusPropEnum = append(onlineStatusTypeStatusPropEnum, v)
	}
}

const (

	// OnlineStatusStatusONLINE captures enum value "ONLINE"
	OnlineStatusStatusONLINE string = "ONLINE"

	// OnlineStatusStatusOFFLINE captures enum value "OFFLINE"
	OnlineStatusStatusOFFLINE string = "OFFLINE"
)

// prop value enum
func (m *OnlineStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, onlineStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OnlineStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this online status based on context it is used
func (m *OnlineStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OnlineStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnlineStatus) UnmarshalBinary(b []byte) error {
	var res OnlineStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
