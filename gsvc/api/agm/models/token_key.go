// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenKey token key
//
// swagger:model TokenKey
type TokenKey struct {

	// alg
	Alg string `json:"alg,omitempty"`

	// e
	// Required: true
	E *string `json:"e"`

	// kid
	// Required: true
	Kid *string `json:"kid"`

	// kty
	// Example: RSA
	// Required: true
	Kty *string `json:"kty"`

	// n
	// Required: true
	N *string `json:"n"`

	// use
	Use string `json:"use,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this token key
func (m *TokenKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateN(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenKey) validateE(formats strfmt.Registry) error {

	if err := validate.Required("e", "body", m.E); err != nil {
		return err
	}

	return nil
}

func (m *TokenKey) validateKid(formats strfmt.Registry) error {

	if err := validate.Required("kid", "body", m.Kid); err != nil {
		return err
	}

	return nil
}

func (m *TokenKey) validateKty(formats strfmt.Registry) error {

	if err := validate.Required("kty", "body", m.Kty); err != nil {
		return err
	}

	return nil
}

func (m *TokenKey) validateN(formats strfmt.Registry) error {

	if err := validate.Required("n", "body", m.N); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token key based on context it is used
func (m *TokenKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenKey) UnmarshalBinary(b []byte) error {
	var res TokenKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
