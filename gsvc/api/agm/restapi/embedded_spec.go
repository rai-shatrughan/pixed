// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API defining resources and operations for managing agents.\n\nGenerating a Boarding Configuration action is an asynchronous operation therefore it may take a while. \nIn case Boarding Configuration is not generated, try to read the configuration again after a couple of seconds.\n",
    "title": "Agent Management API",
    "version": "3.4.0",
    "x-visibility": "external"
  },
  "basePath": "/api/agentmanagement/v3",
  "paths": {
    "/agents": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets the agents for the given filter.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get agents",
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter.\nFilter json can contain following fields:\n* securityProfile (Agents securityProfiles can be \"RSA_3072\", \"SHARED_SECRET\")\nE.g.: {\"securityProfile\":\"SHARED_SECRET\"}\n* id\nE.g.: {\"id\":\"3b27818ea09a46b48c7eb3fbd878349f\"}\n* name\nE.g.: {\"name\":\"Nanobox Agent\"}\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of agents",
            "schema": {
              "$ref": "#/definitions/PagedAgent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "security": [
          {
            "agents": [
              "agm.c"
            ]
          }
        ],
        "description": "Creates a new agent.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Create agent",
        "parameters": [
          {
            "description": "Object describing new agent resource.",
            "name": "agent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAgentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets the agent for the given agent id.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "agents": [
              "agm.u"
            ]
          }
        ],
        "description": "Updates the agent for the given agent id with given parameters.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Update agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Agent update dto to update agent.",
            "name": "agent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAgentRequest"
            }
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "security": [
          {
            "agents": [
              "agm.d"
            ]
          }
        ],
        "description": "Deletes the agent for the given agent id.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Delete agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/configuration": {
      "get": {
        "security": [
          {
            "boarding": [
              "obc.sec"
            ]
          }
        ],
        "description": "Boarding configuration holds necessary information of the agent to onboard it.(ex; iat, clientCredentialProfile). Generating a Boarding Configuration action is an asynchronous operation therefore it may take a few seconds. In case Boarding Configuration is not generated, try to read the configuration again after a couple of seconds.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Get boarding configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/offboard": {
      "post": {
        "security": [
          {
            "boarding": [
              "obc.sec"
            ]
          }
        ],
        "description": "Offboards the agent.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Offboard agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnboardingStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "409": {
            "description": "Resource in conflicting state.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/status": {
      "get": {
        "security": [
          {
            "boarding": [
              "obc.r"
            ]
          }
        ],
        "description": "Gets boarding status.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Get boarding status",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnboardingStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/dataSourceConfiguration": {
      "get": {
        "security": [
          {
            "dataSources": [
              "dsc.r"
            ]
          }
        ],
        "description": "Data source configuration is needed for interpreting the data received from an agent. It is crucial for diot to interpret the data sent by an agent. The data source configuration contains data sources and data points. Data sources are logical groups of data points, e.g. a sensor or a machine. Fetches data source configuration object.\n",
        "tags": [
          "Data Source Configuration Operations"
        ],
        "summary": "Get Data Source Configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "dataSources": [
              "dsc.u"
            ]
          }
        ],
        "description": "Creates or updates data source configuration object.\n",
        "tags": [
          "Data Source Configuration Operations"
        ],
        "summary": "Update Data Source Configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Data source configuration object.",
            "name": "configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataSourceConfigurationRequest"
            }
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/status": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets online status.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get online status",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnlineStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "description": "Grants an Access Token.\n",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "Token Operations"
        ],
        "summary": "Grant an Access Token",
        "parameters": [
          {
            "type": "string",
            "description": "The type of authentication being used to obtain the token, only  client_credentials is supported.",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Defines the assertion type, only urn:ietf:params:oauth:client-assertion-type:jwt-bearer is supported.",
            "name": "client_assertion_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "A jwt which is signed with client secret\n\nSigning keys (client secret) can vary depending on agent security profile:\u003cbr\u003e\n    - __SHARED_SECRET__: Client secret is provided by '/register' | ‘/register/\u003cclient_id\u003e’ endpoint\n    - __RSA_3072__: Private part of the client's RSA key which the public part was provided at '/register' | '/register/\u003cclient_id\u003e’\n    - __CACertifiedX509__: Private counterpart of device certificate’s public key.\n",
            "name": "client_assertion",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "headers": {
              "Server-Time": {
                "type": "integer",
                "format": "int64",
                "description": "Server time represented as epoch(unix) time in seconds."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            },
            "headers": {
              "Server-Time": {
                "type": "integer",
                "format": "int64",
                "description": "Server time represented as epoch(unix) time in seconds."
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token_key": {
      "get": {
        "description": "Provides current RSA public key of AgentIAM. AgentIAM uses corresponding RSA private key to sign access tokens, RATs and IATs.\n",
        "tags": [
          "Token Operations"
        ],
        "summary": "Returns the JWT signing key currently employed by Agent IAM",
        "parameters": [
          {
            "type": "string",
            "description": "If-None-Match Parameter.",
            "name": "If-None-Match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenKey"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token_keys": {
      "get": {
        "description": "Returns all valid JWT signing keys which can be used to verify JWTs (Bearer, RAT, IAT) issued by AgentIAM.\nThe first key corresponds to the currently employed one, all others have been used in the past.\nThe \"kid\" JWT claim allows to identify the signing key to be used.\nThis endpoint conforms with RFC 7517 and RFC 7518 and endpoints output can be parsed as stated in the above mentioned RFCs.\n",
        "tags": [
          "Token Operations"
        ],
        "summary": "Returns the JWT signing keys currently and previously employed by Agent IAM",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenKeys"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Registers client based on given security profile.\n",
        "tags": [
          "Registration Operations"
        ],
        "summary": "Register client.",
        "parameters": [
          {
            "type": "string",
            "description": "Initial Access Token value with Bearer authentication scheme. e.g :Bearer eyJh...",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "The client's key in JWKS for security profile RSA. If security profile is SHARED_SECRET the value is empty JSON.",
            "name": "keys",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keys"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientIdentifier"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedIAM"
            }
          },
          "429": {
            "description": "TooManyRequests",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/register/{client_id}": {
      "put": {
        "description": "Updates clients information.\n",
        "tags": [
          "Registration Operations"
        ],
        "summary": "Update client information.",
        "parameters": [
          {
            "type": "string",
            "description": "Registration Access Token value with Bearer authentication scheme. e.g :Bearer eyJh...",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier to update information.",
            "name": "client_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The client's key in JWKS for security profile RSA. If security profile is SHARED_SECRET there is only client_id in the JSON.",
            "name": "keys",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RotationKeys"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientIdentifier"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedIAM"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "The access token to be used in calls to diot with Bearer authentication scheme.",
          "type": "string",
          "example": "eyJh..."
        },
        "expires_in": {
          "description": "Number of seconds before this token expires from the time of issuance.",
          "type": "integer",
          "format": "int64",
          "example": 43199
        },
        "jti": {
          "$ref": "#/definitions/Jti"
        },
        "scope": {
          "description": "Agent permissions list.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "devicescope"
          }
        },
        "token_type": {
          "description": "The type of the access token issued.",
          "type": "string",
          "example": "bearer"
        }
      }
    },
    "Agent": {
      "type": "object",
      "required": [
        "name",
        "securityProfile",
        "entityId"
      ],
      "properties": {
        "eTag": {
          "type": "string",
          "example": "2"
        },
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "id": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "Badrequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "The request is not valid."
        }
      }
    },
    "BadrequestIAM": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "invalid_authorization_header"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[feae1a0b-48fb-4af5-bc0d-7c96d8058e37] Header is missing."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ClientId": {
      "description": "Client identifier, equals value of 'sub' claim in IAT.",
      "type": "string",
      "maxLength": 36,
      "example": "0b2d1cde-cc76-11e7-abc4-cec278b6b50a"
    },
    "ClientIdentifier": {
      "type": "object",
      "required": [
        "client_id",
        "registration_client_uri",
        "registration_access_token"
      ],
      "properties": {
        "client_id": {
          "$ref": "#/definitions/ClientId"
        },
        "client_secret": {
          "description": "Server generated client secret. Required if security profile is SHARED_SECRET.",
          "type": "string"
        },
        "client_secret_expires_at": {
          "description": "Epoch time in seconds which client secret expires at.",
          "type": "integer",
          "format": "int64",
          "example": 1511020133
        },
        "grant_types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SHARED_SECRET",
              "RSA_3072"
            ]
          }
        },
        "registration_access_token": {
          "description": "The access token to be used at the client configuration endpoint to perform subsequent operations upon the client registration.",
          "type": "string",
          "example": "eyJh..."
        },
        "registration_client_uri": {
          "description": "The fully qualified URL of the client configuration endpoint for this client.",
          "type": "string",
          "format": "uri",
          "example": "https://southgate.eu-central.diot.io/api/agentmanagement/v3/register/0b2d1cde-cc76-11e7-abc4-cec278b6b50a"
        },
        "token_endpoint_auth_method": {
          "description": "The client authentication method.",
          "type": "string",
          "enum": [
            "client_secret_jwt",
            "private_key_jwt"
          ]
        }
      }
    },
    "Configuration": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/OnboardingConfigurationContent"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Conflict": {
      "description": "Operation on resource is not allowed due to a conflicting state.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource is already available."
        }
      }
    },
    "CreateAgentRequest": {
      "type": "object",
      "required": [
        "name",
        "securityProfile",
        "entityId"
      ],
      "properties": {
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "DataPoint": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "unit"
      ],
      "properties": {
        "customData": {
          "description": "A list of string tuples. Max 5 tuples allowed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 1024
          },
          "example": {
            "Nominal": "~220 Volts"
          }
        },
        "description": {
          "type": "string",
          "maxLength": 256,
          "example": "Voltage value read."
        },
        "id": {
          "description": "Identifier of this data point. This id needs to be unique per data source configuration. Agents expected to upload timeseries value with this id, enabling backend services to match data with this data point. \nThis is NOT an auto generated field, enabling agents to specify it before uploading matching timeseries value.\n",
          "type": "string",
          "maxLength": 36,
          "example": "DP001"
        },
        "name": {
          "type": "string",
          "maxLength": 64,
          "example": "Voltage"
        },
        "type": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING"
          ],
          "example": "DOUBLE"
        },
        "unit": {
          "description": "Unit of data point. Can be empty.\n",
          "type": "string",
          "maxLength": 32,
          "example": "V"
        }
      }
    },
    "DataSource": {
      "type": "object",
      "required": [
        "name",
        "dataPoints"
      ],
      "properties": {
        "customData": {
          "description": "A list of string tuples. Max 5 tuples allowed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 1024
          },
          "example": {
            "Host": "192.168.0.111",
            "Port": "8765"
          }
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoint"
          }
        },
        "description": {
          "type": "string",
          "maxLength": 256,
          "example": "OPC-UA Server installed on site."
        },
        "name": {
          "type": "string",
          "maxLength": 64,
          "example": "OPC-UA Server"
        }
      }
    },
    "DataSourceConfiguration": {
      "type": "object",
      "required": [
        "configurationId",
        "dataSources"
      ],
      "properties": {
        "configurationId": {
          "description": "Unique identifier of the datasource configuration.",
          "type": "string",
          "maxLength": 36,
          "example": "Configuration01"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        },
        "eTag": {
          "type": "string",
          "example": "2"
        },
        "id": {
          "type": "string",
          "maxLength": 36,
          "example": "c3b7d31d-e966-46e6-9db1-d4b3e8c90d7b"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Forbidden": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Insufficient authorization for this resource."
        }
      }
    },
    "Jti": {
      "description": "Unique identifier of the token.",
      "type": "string",
      "maxLength": 36,
      "example": "3fcf2a5e-cc76-11e7-abc4-cec278b6b50a"
    },
    "Jwks": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        }
      }
    },
    "Key": {
      "type": "object",
      "required": [
        "e",
        "n",
        "kty",
        "kid"
      ],
      "properties": {
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string",
          "example": "RSA"
        },
        "n": {
          "type": "string"
        }
      }
    },
    "Keys": {
      "type": "object",
      "properties": {
        "jwks": {
          "$ref": "#/definitions/Jwks"
        }
      }
    },
    "Notfound": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource not found."
        }
      }
    },
    "OnboardingConfigurationContent": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
          "example": "https://southgate.eu-central.diot.io"
        },
        "clientCredentialProfile": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "SHARED_SECRET"
          }
        },
        "clientId": {
          "type": "string",
          "maxLength": 36,
          "example": "5fa51b64-dce2-11e7-9296-cec278b6b50a"
        },
        "iat": {
          "type": "string",
          "example": "eyJh..."
        },
        "tenant": {
          "type": "string",
          "maxLength": 36,
          "example": "testtenant"
        }
      }
    },
    "OnboardingStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "NOT_ONBOARDED",
            "ONBOARDING",
            "ONBOARDED"
          ]
        }
      }
    },
    "OnlineStatus": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "OFFLINE"
          ]
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "ascending": {
          "description": "Whether sorting for this property shall be ascending.",
          "type": "boolean"
        },
        "descending": {
          "description": "Whether sorting for this property shall be descending.",
          "type": "boolean"
        },
        "direction": {
          "description": "The order the property shall be sorted for.",
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        },
        "ignoreCase": {
          "description": "Whether or not the sort will be case sensitive.",
          "type": "boolean"
        },
        "nullHandling": {
          "type": "string",
          "enum": [
            "NATIVE",
            "NULLS_FIRST",
            "NULLS_LAST"
          ]
        },
        "property": {
          "description": "The property to order for.",
          "type": "string"
        }
      }
    },
    "PagedAgent": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Preconditionfailed": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource not found with given the condition."
        }
      }
    },
    "RotationKeys": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "jwks": {
          "$ref": "#/definitions/Jwks"
        }
      }
    },
    "TokenKey": {
      "type": "object",
      "required": [
        "e",
        "n",
        "kty",
        "kid"
      ],
      "properties": {
        "alg": {
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string",
          "example": "RSA"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TokenKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenKey"
          }
        }
      }
    },
    "TooManyRequests": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "too_many_requests"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[d6270fa4-f8f2-46d7-8370-1fbcacb37c52] There is already an ongoing registration process for the agent."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    },
    "UnauthorizedIAM": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "token_validation_failed"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[d6270fa4-f8f2-46d7-8370-1fbcacb37c52] Token validation failed."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "UpdateAgentRequest": {
      "type": "object",
      "required": [
        "name",
        "securityProfile"
      ],
      "properties": {
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "UpdateDataSourceConfigurationRequest": {
      "type": "object",
      "required": [
        "configurationId",
        "dataSources"
      ],
      "properties": {
        "configurationId": {
          "description": "Unique identifier of the datasource configuration.",
          "type": "string",
          "maxLength": 36,
          "example": "Configuration01"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "agents": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "agm.c": "Permission to create an agent.",
        "agm.d": "Permission to delete agent.",
        "agm.r": "Permission to read an agent.",
        "agm.u": "Permission to update agent."
      }
    },
    "boarding": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "obc.r": "Permission read onboarding status.",
        "obc.sec": "Permission for offboarding and accessing onboarding material."
      }
    },
    "dataSources": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "dsc.r": "Permission to read data source configuration",
        "dsc.u": "Permission to update data source configuration"
      }
    }
  },
  "tags": [
    {
      "name": "Agent Operations"
    },
    {
      "name": "Data Source Configuration Operations"
    },
    {
      "name": "Boarding Operations"
    },
    {
      "name": "Registration Operations"
    },
    {
      "name": "Token Operations"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API defining resources and operations for managing agents.\n\nGenerating a Boarding Configuration action is an asynchronous operation therefore it may take a while. \nIn case Boarding Configuration is not generated, try to read the configuration again after a couple of seconds.\n",
    "title": "Agent Management API",
    "version": "3.4.0",
    "x-visibility": "external"
  },
  "basePath": "/api/agentmanagement/v3",
  "paths": {
    "/agents": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets the agents for the given filter.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get agents",
        "parameters": [
          {
            "type": "string",
            "description": "JSON based filter.\nFilter json can contain following fields:\n* securityProfile (Agents securityProfiles can be \"RSA_3072\", \"SHARED_SECRET\")\nE.g.: {\"securityProfile\":\"SHARED_SECRET\"}\n* id\nE.g.: {\"id\":\"3b27818ea09a46b48c7eb3fbd878349f\"}\n* name\nE.g.: {\"name\":\"Nanobox Agent\"}\n",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "The maximum number of elements in a page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "The (0-based) index of page.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order of returned elements.\nMultiple fields could be used separated by commas (e.g. ''field1,field2'').\nDescending order could be requested by appending '',desc'' at the end of parameter.(e.g. ''field1,field2,desc'')'\n",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of agents",
            "schema": {
              "$ref": "#/definitions/PagedAgent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "post": {
        "security": [
          {
            "agents": [
              "agm.c"
            ]
          }
        ],
        "description": "Creates a new agent.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Create agent",
        "parameters": [
          {
            "description": "Object describing new agent resource.",
            "name": "agent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAgentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets the agent for the given agent id.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "agents": [
              "agm.u"
            ]
          }
        ],
        "description": "Updates the agent for the given agent id with given parameters.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Update agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Agent update dto to update agent.",
            "name": "agent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAgentRequest"
            }
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "409": {
            "description": "Resource is already available.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "security": [
          {
            "agents": [
              "agm.d"
            ]
          }
        ],
        "description": "Deletes the agent for the given agent id.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Delete agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/configuration": {
      "get": {
        "security": [
          {
            "boarding": [
              "obc.sec"
            ]
          }
        ],
        "description": "Boarding configuration holds necessary information of the agent to onboard it.(ex; iat, clientCredentialProfile). Generating a Boarding Configuration action is an asynchronous operation therefore it may take a few seconds. In case Boarding Configuration is not generated, try to read the configuration again after a couple of seconds.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Get boarding configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/offboard": {
      "post": {
        "security": [
          {
            "boarding": [
              "obc.sec"
            ]
          }
        ],
        "description": "Offboards the agent.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Offboard agent",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnboardingStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "409": {
            "description": "Resource in conflicting state.",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/boarding/status": {
      "get": {
        "security": [
          {
            "boarding": [
              "obc.r"
            ]
          }
        ],
        "description": "Gets boarding status.\n",
        "tags": [
          "Boarding Operations"
        ],
        "summary": "Get boarding status",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnboardingStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/dataSourceConfiguration": {
      "get": {
        "security": [
          {
            "dataSources": [
              "dsc.r"
            ]
          }
        ],
        "description": "Data source configuration is needed for interpreting the data received from an agent. It is crucial for diot to interpret the data sent by an agent. The data source configuration contains data sources and data points. Data sources are logical groups of data points, e.g. a sensor or a machine. Fetches data source configuration object.\n",
        "tags": [
          "Data Source Configuration Operations"
        ],
        "summary": "Get Data Source Configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "dataSources": [
              "dsc.u"
            ]
          }
        ],
        "description": "Creates or updates data source configuration object.\n",
        "tags": [
          "Data Source Configuration Operations"
        ],
        "summary": "Update Data Source Configuration",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Data source configuration object.",
            "name": "configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataSourceConfigurationRequest"
            }
          },
          {
            "type": "string",
            "description": "ETag number of resource.",
            "name": "If-Match",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSourceConfiguration"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/Preconditionfailed"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/agents/{id}/status": {
      "get": {
        "security": [
          {
            "agents": [
              "agm.r"
            ]
          }
        ],
        "description": "Gets online status.\n",
        "tags": [
          "Agent Operations"
        ],
        "summary": "Get online status",
        "parameters": [
          {
            "type": "string",
            "description": "Unique identifier of the agent.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OnlineStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Badrequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Notfound"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "description": "Grants an Access Token.\n",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "Token Operations"
        ],
        "summary": "Grant an Access Token",
        "parameters": [
          {
            "type": "string",
            "description": "The type of authentication being used to obtain the token, only  client_credentials is supported.",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Defines the assertion type, only urn:ietf:params:oauth:client-assertion-type:jwt-bearer is supported.",
            "name": "client_assertion_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "A jwt which is signed with client secret\n\nSigning keys (client secret) can vary depending on agent security profile:\u003cbr\u003e\n    - __SHARED_SECRET__: Client secret is provided by '/register' | ‘/register/\u003cclient_id\u003e’ endpoint\n    - __RSA_3072__: Private part of the client's RSA key which the public part was provided at '/register' | '/register/\u003cclient_id\u003e’\n    - __CACertifiedX509__: Private counterpart of device certificate’s public key.\n",
            "name": "client_assertion",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            },
            "headers": {
              "Server-Time": {
                "type": "integer",
                "format": "int64",
                "description": "Server time represented as epoch(unix) time in seconds."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            },
            "headers": {
              "Server-Time": {
                "type": "integer",
                "format": "int64",
                "description": "Server time represented as epoch(unix) time in seconds."
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token_key": {
      "get": {
        "description": "Provides current RSA public key of AgentIAM. AgentIAM uses corresponding RSA private key to sign access tokens, RATs and IATs.\n",
        "tags": [
          "Token Operations"
        ],
        "summary": "Returns the JWT signing key currently employed by Agent IAM",
        "parameters": [
          {
            "type": "string",
            "description": "If-None-Match Parameter.",
            "name": "If-None-Match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenKey"
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/oauth/token_keys": {
      "get": {
        "description": "Returns all valid JWT signing keys which can be used to verify JWTs (Bearer, RAT, IAT) issued by AgentIAM.\nThe first key corresponds to the currently employed one, all others have been used in the past.\nThe \"kid\" JWT claim allows to identify the signing key to be used.\nThis endpoint conforms with RFC 7517 and RFC 7518 and endpoints output can be parsed as stated in the above mentioned RFCs.\n",
        "tags": [
          "Token Operations"
        ],
        "summary": "Returns the JWT signing keys currently and previously employed by Agent IAM",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenKeys"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Registers client based on given security profile.\n",
        "tags": [
          "Registration Operations"
        ],
        "summary": "Register client.",
        "parameters": [
          {
            "type": "string",
            "description": "Initial Access Token value with Bearer authentication scheme. e.g :Bearer eyJh...",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "The client's key in JWKS for security profile RSA. If security profile is SHARED_SECRET the value is empty JSON.",
            "name": "keys",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Keys"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ClientIdentifier"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedIAM"
            }
          },
          "429": {
            "description": "TooManyRequests",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/register/{client_id}": {
      "put": {
        "description": "Updates clients information.\n",
        "tags": [
          "Registration Operations"
        ],
        "summary": "Update client information.",
        "parameters": [
          {
            "type": "string",
            "description": "Registration Access Token value with Bearer authentication scheme. e.g :Bearer eyJh...",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier to update information.",
            "name": "client_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The client's key in JWKS for security profile RSA. If security profile is SHARED_SECRET there is only client_id in the JSON.",
            "name": "keys",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RotationKeys"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientIdentifier"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadrequestIAM"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedIAM"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    }
  },
  "definitions": {
    "AccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "The access token to be used in calls to diot with Bearer authentication scheme.",
          "type": "string",
          "example": "eyJh..."
        },
        "expires_in": {
          "description": "Number of seconds before this token expires from the time of issuance.",
          "type": "integer",
          "format": "int64",
          "example": 43199
        },
        "jti": {
          "$ref": "#/definitions/Jti"
        },
        "scope": {
          "description": "Agent permissions list.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "devicescope"
          }
        },
        "token_type": {
          "description": "The type of the access token issued.",
          "type": "string",
          "example": "bearer"
        }
      }
    },
    "Agent": {
      "type": "object",
      "required": [
        "name",
        "securityProfile",
        "entityId"
      ],
      "properties": {
        "eTag": {
          "type": "string",
          "example": "2"
        },
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "id": {
          "description": "Unique identifier of the agent",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "Badrequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "The request is not valid."
        }
      }
    },
    "BadrequestIAM": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "invalid_authorization_header"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[feae1a0b-48fb-4af5-bc0d-7c96d8058e37] Header is missing."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ClientId": {
      "description": "Client identifier, equals value of 'sub' claim in IAT.",
      "type": "string",
      "maxLength": 36,
      "example": "0b2d1cde-cc76-11e7-abc4-cec278b6b50a"
    },
    "ClientIdentifier": {
      "type": "object",
      "required": [
        "client_id",
        "registration_client_uri",
        "registration_access_token"
      ],
      "properties": {
        "client_id": {
          "$ref": "#/definitions/ClientId"
        },
        "client_secret": {
          "description": "Server generated client secret. Required if security profile is SHARED_SECRET.",
          "type": "string"
        },
        "client_secret_expires_at": {
          "description": "Epoch time in seconds which client secret expires at.",
          "type": "integer",
          "format": "int64",
          "example": 1511020133
        },
        "grant_types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SHARED_SECRET",
              "RSA_3072"
            ]
          }
        },
        "registration_access_token": {
          "description": "The access token to be used at the client configuration endpoint to perform subsequent operations upon the client registration.",
          "type": "string",
          "example": "eyJh..."
        },
        "registration_client_uri": {
          "description": "The fully qualified URL of the client configuration endpoint for this client.",
          "type": "string",
          "format": "uri",
          "example": "https://southgate.eu-central.diot.io/api/agentmanagement/v3/register/0b2d1cde-cc76-11e7-abc4-cec278b6b50a"
        },
        "token_endpoint_auth_method": {
          "description": "The client authentication method.",
          "type": "string",
          "enum": [
            "client_secret_jwt",
            "private_key_jwt"
          ]
        }
      }
    },
    "Configuration": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/OnboardingConfigurationContent"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Conflict": {
      "description": "Operation on resource is not allowed due to a conflicting state.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource is already available."
        }
      }
    },
    "CreateAgentRequest": {
      "type": "object",
      "required": [
        "name",
        "securityProfile",
        "entityId"
      ],
      "properties": {
        "entityId": {
          "description": "Unique identifier of the entity",
          "type": "string",
          "maxLength": 36,
          "example": "3b27818ea09a46b48c7eb3fbd878349f"
        },
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "DataPoint": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "unit"
      ],
      "properties": {
        "customData": {
          "description": "A list of string tuples. Max 5 tuples allowed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 1024
          },
          "example": {
            "Nominal": "~220 Volts"
          }
        },
        "description": {
          "type": "string",
          "maxLength": 256,
          "example": "Voltage value read."
        },
        "id": {
          "description": "Identifier of this data point. This id needs to be unique per data source configuration. Agents expected to upload timeseries value with this id, enabling backend services to match data with this data point. \nThis is NOT an auto generated field, enabling agents to specify it before uploading matching timeseries value.\n",
          "type": "string",
          "maxLength": 36,
          "example": "DP001"
        },
        "name": {
          "type": "string",
          "maxLength": 64,
          "example": "Voltage"
        },
        "type": {
          "type": "string",
          "enum": [
            "INT",
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING"
          ],
          "example": "DOUBLE"
        },
        "unit": {
          "description": "Unit of data point. Can be empty.\n",
          "type": "string",
          "maxLength": 32,
          "example": "V"
        }
      }
    },
    "DataSource": {
      "type": "object",
      "required": [
        "name",
        "dataPoints"
      ],
      "properties": {
        "customData": {
          "description": "A list of string tuples. Max 5 tuples allowed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 1024
          },
          "example": {
            "Host": "192.168.0.111",
            "Port": "8765"
          }
        },
        "dataPoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPoint"
          }
        },
        "description": {
          "type": "string",
          "maxLength": 256,
          "example": "OPC-UA Server installed on site."
        },
        "name": {
          "type": "string",
          "maxLength": 64,
          "example": "OPC-UA Server"
        }
      }
    },
    "DataSourceConfiguration": {
      "type": "object",
      "required": [
        "configurationId",
        "dataSources"
      ],
      "properties": {
        "configurationId": {
          "description": "Unique identifier of the datasource configuration.",
          "type": "string",
          "maxLength": 36,
          "example": "Configuration01"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        },
        "eTag": {
          "type": "string",
          "example": "2"
        },
        "id": {
          "type": "string",
          "maxLength": 36,
          "example": "c3b7d31d-e966-46e6-9db1-d4b3e8c90d7b"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Forbidden": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Insufficient authorization for this resource."
        }
      }
    },
    "Jti": {
      "description": "Unique identifier of the token.",
      "type": "string",
      "maxLength": 36,
      "example": "3fcf2a5e-cc76-11e7-abc4-cec278b6b50a"
    },
    "Jwks": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        }
      }
    },
    "Key": {
      "type": "object",
      "required": [
        "e",
        "n",
        "kty",
        "kid"
      ],
      "properties": {
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string",
          "example": "RSA"
        },
        "n": {
          "type": "string"
        }
      }
    },
    "Keys": {
      "type": "object",
      "properties": {
        "jwks": {
          "$ref": "#/definitions/Jwks"
        }
      }
    },
    "Notfound": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource not found."
        }
      }
    },
    "OnboardingConfigurationContent": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
          "example": "https://southgate.eu-central.diot.io"
        },
        "clientCredentialProfile": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "SHARED_SECRET"
          }
        },
        "clientId": {
          "type": "string",
          "maxLength": 36,
          "example": "5fa51b64-dce2-11e7-9296-cec278b6b50a"
        },
        "iat": {
          "type": "string",
          "example": "eyJh..."
        },
        "tenant": {
          "type": "string",
          "maxLength": 36,
          "example": "testtenant"
        }
      }
    },
    "OnboardingStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "NOT_ONBOARDED",
            "ONBOARDING",
            "ONBOARDED"
          ]
        }
      }
    },
    "OnlineStatus": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "OFFLINE"
          ]
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "ascending": {
          "description": "Whether sorting for this property shall be ascending.",
          "type": "boolean"
        },
        "descending": {
          "description": "Whether sorting for this property shall be descending.",
          "type": "boolean"
        },
        "direction": {
          "description": "The order the property shall be sorted for.",
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        },
        "ignoreCase": {
          "description": "Whether or not the sort will be case sensitive.",
          "type": "boolean"
        },
        "nullHandling": {
          "type": "string",
          "enum": [
            "NATIVE",
            "NULLS_FIRST",
            "NULLS_LAST"
          ]
        },
        "property": {
          "description": "The property to order for.",
          "type": "string"
        }
      }
    },
    "PagedAgent": {
      "type": "object",
      "required": [
        "content",
        "totalPages",
        "totalElements",
        "last",
        "numberOfElements",
        "first",
        "sort",
        "size",
        "number"
      ],
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        },
        "first": {
          "description": "Whether the current item is the first one.",
          "type": "boolean",
          "example": true
        },
        "last": {
          "description": "Whether the current item is the last one.",
          "type": "boolean",
          "example": true
        },
        "number": {
          "description": "The number of the current item.",
          "type": "integer",
          "example": 0
        },
        "numberOfElements": {
          "description": "The number of elements currently on this page.",
          "type": "integer",
          "example": 1
        },
        "size": {
          "description": "The size of the page.",
          "type": "integer",
          "example": 20
        },
        "sort": {
          "description": "The sorting parameters for the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "totalElements": {
          "description": "The total amount of elements.",
          "type": "integer",
          "example": 1
        },
        "totalPages": {
          "description": "The number of total pages.",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Preconditionfailed": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Resource not found with given the condition."
        }
      }
    },
    "RotationKeys": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "jwks": {
          "$ref": "#/definitions/Jwks"
        }
      }
    },
    "TokenKey": {
      "type": "object",
      "required": [
        "e",
        "n",
        "kty",
        "kid"
      ],
      "properties": {
        "alg": {
          "type": "string"
        },
        "e": {
          "type": "string"
        },
        "kid": {
          "type": "string"
        },
        "kty": {
          "type": "string",
          "example": "RSA"
        },
        "n": {
          "type": "string"
        },
        "use": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TokenKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenKey"
          }
        }
      }
    },
    "TooManyRequests": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "too_many_requests"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[d6270fa4-f8f2-46d7-8370-1fbcacb37c52] There is already an ongoing registration process for the agent."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    },
    "UnauthorizedIAM": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "token_validation_failed"
        },
        "error_description": {
          "description": "An error message with Correlation-ID value.",
          "type": "string",
          "example": "[d6270fa4-f8f2-46d7-8370-1fbcacb37c52] Token validation failed."
        },
        "id": {
          "type": "string"
        }
      }
    },
    "UpdateAgentRequest": {
      "type": "object",
      "required": [
        "name",
        "securityProfile"
      ],
      "properties": {
        "name": {
          "description": "Name must be unique per tenant.",
          "type": "string",
          "maxLength": 128,
          "example": "Nanobox Agent"
        },
        "securityProfile": {
          "type": "string",
          "enum": [
            "SHARED_SECRET",
            "RSA_3072"
          ]
        }
      }
    },
    "UpdateDataSourceConfigurationRequest": {
      "type": "object",
      "required": [
        "configurationId",
        "dataSources"
      ],
      "properties": {
        "configurationId": {
          "description": "Unique identifier of the datasource configuration.",
          "type": "string",
          "maxLength": 36,
          "example": "Configuration01"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "agents": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "agm.c": "Permission to create an agent.",
        "agm.d": "Permission to delete agent.",
        "agm.r": "Permission to read an agent.",
        "agm.u": "Permission to update agent."
      }
    },
    "boarding": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "obc.r": "Permission read onboarding status.",
        "obc.sec": "Permission for offboarding and accessing onboarding material."
      }
    },
    "dataSources": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "http://authorization.connectivity.net/oauth/token",
      "scopes": {
        "dsc.r": "Permission to read data source configuration",
        "dsc.u": "Permission to update data source configuration"
      }
    }
  },
  "tags": [
    {
      "name": "Agent Operations"
    },
    {
      "name": "Data Source Configuration Operations"
    },
    {
      "name": "Boarding Operations"
    },
    {
      "name": "Registration Operations"
    },
    {
      "name": "Token Operations"
    }
  ]
}`))
}
