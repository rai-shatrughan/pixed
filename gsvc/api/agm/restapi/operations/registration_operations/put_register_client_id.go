// Code generated by go-swagger; DO NOT EDIT.

package registration_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutRegisterClientIDHandlerFunc turns a function with the right signature into a put register client ID handler
type PutRegisterClientIDHandlerFunc func(PutRegisterClientIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRegisterClientIDHandlerFunc) Handle(params PutRegisterClientIDParams) middleware.Responder {
	return fn(params)
}

// PutRegisterClientIDHandler interface for that can handle valid put register client ID params
type PutRegisterClientIDHandler interface {
	Handle(PutRegisterClientIDParams) middleware.Responder
}

// NewPutRegisterClientID creates a new http.Handler for the put register client ID operation
func NewPutRegisterClientID(ctx *middleware.Context, handler PutRegisterClientIDHandler) *PutRegisterClientID {
	return &PutRegisterClientID{Context: ctx, Handler: handler}
}

/*
	PutRegisterClientID swagger:route PUT /register/{client_id} Registration Operations putRegisterClientId

Update client information.

Updates clients information.
*/
type PutRegisterClientID struct {
	Context *middleware.Context
	Handler PutRegisterClientIDHandler
}

func (o *PutRegisterClientID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutRegisterClientIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
