// Code generated by go-swagger; DO NOT EDIT.

package agent_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/agm/models"
)

// PostAgentsHandlerFunc turns a function with the right signature into a post agents handler
type PostAgentsHandlerFunc func(PostAgentsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAgentsHandlerFunc) Handle(params PostAgentsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostAgentsHandler interface for that can handle valid post agents params
type PostAgentsHandler interface {
	Handle(PostAgentsParams, *models.Principal) middleware.Responder
}

// NewPostAgents creates a new http.Handler for the post agents operation
func NewPostAgents(ctx *middleware.Context, handler PostAgentsHandler) *PostAgents {
	return &PostAgents{Context: ctx, Handler: handler}
}

/*
	PostAgents swagger:route POST /agents Agent Operations postAgents

# Create agent

Creates a new agent.
*/
type PostAgents struct {
	Context *middleware.Context
	Handler PostAgentsHandler
}

func (o *PostAgents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAgentsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
