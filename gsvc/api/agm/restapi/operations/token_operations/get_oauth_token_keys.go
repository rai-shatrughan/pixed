// Code generated by go-swagger; DO NOT EDIT.

package token_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetOauthTokenKeysHandlerFunc turns a function with the right signature into a get oauth token keys handler
type GetOauthTokenKeysHandlerFunc func(GetOauthTokenKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOauthTokenKeysHandlerFunc) Handle(params GetOauthTokenKeysParams) middleware.Responder {
	return fn(params)
}

// GetOauthTokenKeysHandler interface for that can handle valid get oauth token keys params
type GetOauthTokenKeysHandler interface {
	Handle(GetOauthTokenKeysParams) middleware.Responder
}

// NewGetOauthTokenKeys creates a new http.Handler for the get oauth token keys operation
func NewGetOauthTokenKeys(ctx *middleware.Context, handler GetOauthTokenKeysHandler) *GetOauthTokenKeys {
	return &GetOauthTokenKeys{Context: ctx, Handler: handler}
}

/*
	GetOauthTokenKeys swagger:route GET /oauth/token_keys Token Operations getOauthTokenKeys

# Returns the JWT signing keys currently and previously employed by Agent IAM

Returns all valid JWT signing keys which can be used to verify JWTs (Bearer, RAT, IAT) issued by AgentIAM.
The first key corresponds to the currently employed one, all others have been used in the past.
The "kid" JWT claim allows to identify the signing key to be used.
This endpoint conforms with RFC 7517 and RFC 7518 and endpoints output can be parsed as stated in the above mentioned RFCs.
*/
type GetOauthTokenKeys struct {
	Context *middleware.Context
	Handler GetOauthTokenKeysHandler
}

func (o *GetOauthTokenKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetOauthTokenKeysParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
