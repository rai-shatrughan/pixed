// Code generated by go-swagger; DO NOT EDIT.

package token_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"gsvc/api/agm/models"
)

// PostOauthTokenOKCode is the HTTP code returned for type PostOauthTokenOK
const PostOauthTokenOKCode int = 200

/*
PostOauthTokenOK OK

swagger:response postOauthTokenOK
*/
type PostOauthTokenOK struct {
	/*Server time represented as epoch(unix) time in seconds.

	 */
	ServerTime int64 `json:"Server-Time"`

	/*
	  In: Body
	*/
	Payload *models.AccessToken `json:"body,omitempty"`
}

// NewPostOauthTokenOK creates PostOauthTokenOK with default headers values
func NewPostOauthTokenOK() *PostOauthTokenOK {

	return &PostOauthTokenOK{}
}

// WithServerTime adds the serverTime to the post oauth token o k response
func (o *PostOauthTokenOK) WithServerTime(serverTime int64) *PostOauthTokenOK {
	o.ServerTime = serverTime
	return o
}

// SetServerTime sets the serverTime to the post oauth token o k response
func (o *PostOauthTokenOK) SetServerTime(serverTime int64) {
	o.ServerTime = serverTime
}

// WithPayload adds the payload to the post oauth token o k response
func (o *PostOauthTokenOK) WithPayload(payload *models.AccessToken) *PostOauthTokenOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth token o k response
func (o *PostOauthTokenOK) SetPayload(payload *models.AccessToken) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauthTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Server-Time

	serverTime := swag.FormatInt64(o.ServerTime)
	if serverTime != "" {
		rw.Header().Set("Server-Time", serverTime)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOauthTokenBadRequestCode is the HTTP code returned for type PostOauthTokenBadRequest
const PostOauthTokenBadRequestCode int = 400

/*
PostOauthTokenBadRequest Bad Request

swagger:response postOauthTokenBadRequest
*/
type PostOauthTokenBadRequest struct {
	/*Server time represented as epoch(unix) time in seconds.

	 */
	ServerTime int64 `json:"Server-Time"`

	/*
	  In: Body
	*/
	Payload *models.BadrequestIAM `json:"body,omitempty"`
}

// NewPostOauthTokenBadRequest creates PostOauthTokenBadRequest with default headers values
func NewPostOauthTokenBadRequest() *PostOauthTokenBadRequest {

	return &PostOauthTokenBadRequest{}
}

// WithServerTime adds the serverTime to the post oauth token bad request response
func (o *PostOauthTokenBadRequest) WithServerTime(serverTime int64) *PostOauthTokenBadRequest {
	o.ServerTime = serverTime
	return o
}

// SetServerTime sets the serverTime to the post oauth token bad request response
func (o *PostOauthTokenBadRequest) SetServerTime(serverTime int64) {
	o.ServerTime = serverTime
}

// WithPayload adds the payload to the post oauth token bad request response
func (o *PostOauthTokenBadRequest) WithPayload(payload *models.BadrequestIAM) *PostOauthTokenBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth token bad request response
func (o *PostOauthTokenBadRequest) SetPayload(payload *models.BadrequestIAM) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauthTokenBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Server-Time

	serverTime := swag.FormatInt64(o.ServerTime)
	if serverTime != "" {
		rw.Header().Set("Server-Time", serverTime)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOauthTokenInternalServerErrorCode is the HTTP code returned for type PostOauthTokenInternalServerError
const PostOauthTokenInternalServerErrorCode int = 500

/*
PostOauthTokenInternalServerError unexpected error

swagger:response postOauthTokenInternalServerError
*/
type PostOauthTokenInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostOauthTokenInternalServerError creates PostOauthTokenInternalServerError with default headers values
func NewPostOauthTokenInternalServerError() *PostOauthTokenInternalServerError {

	return &PostOauthTokenInternalServerError{}
}

// WithPayload adds the payload to the post oauth token internal server error response
func (o *PostOauthTokenInternalServerError) WithPayload(payload *models.Error) *PostOauthTokenInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth token internal server error response
func (o *PostOauthTokenInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauthTokenInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostOauthTokenDefault Other error with any status code and response body format.

swagger:response postOauthTokenDefault
*/
type PostOauthTokenDefault struct {
	_statusCode int
}

// NewPostOauthTokenDefault creates PostOauthTokenDefault with default headers values
func NewPostOauthTokenDefault(code int) *PostOauthTokenDefault {
	if code <= 0 {
		code = 500
	}

	return &PostOauthTokenDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post oauth token default response
func (o *PostOauthTokenDefault) WithStatusCode(code int) *PostOauthTokenDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post oauth token default response
func (o *PostOauthTokenDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *PostOauthTokenDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
