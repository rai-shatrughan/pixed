// Code generated by go-swagger; DO NOT EDIT.

package token_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostOauthTokenHandlerFunc turns a function with the right signature into a post oauth token handler
type PostOauthTokenHandlerFunc func(PostOauthTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOauthTokenHandlerFunc) Handle(params PostOauthTokenParams) middleware.Responder {
	return fn(params)
}

// PostOauthTokenHandler interface for that can handle valid post oauth token params
type PostOauthTokenHandler interface {
	Handle(PostOauthTokenParams) middleware.Responder
}

// NewPostOauthToken creates a new http.Handler for the post oauth token operation
func NewPostOauthToken(ctx *middleware.Context, handler PostOauthTokenHandler) *PostOauthToken {
	return &PostOauthToken{Context: ctx, Handler: handler}
}

/*
	PostOauthToken swagger:route POST /oauth/token Token Operations postOauthToken

# Grant an Access Token

Grants an Access Token.
*/
type PostOauthToken struct {
	Context *middleware.Context
	Handler PostOauthTokenHandler
}

func (o *PostOauthToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostOauthTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
