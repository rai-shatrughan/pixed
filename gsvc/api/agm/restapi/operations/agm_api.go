// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"gsvc/api/agm/models"
	"gsvc/api/agm/restapi/operations/agent_operations"
	"gsvc/api/agm/restapi/operations/boarding_operations"
	"gsvc/api/agm/restapi/operations/data_source_configuration_operations"
	"gsvc/api/agm/restapi/operations/registration_operations"
	"gsvc/api/agm/restapi/operations/token_operations"
)

// NewAgmAPI creates a new Agm instance
func NewAgmAPI(spec *loads.Document) *AgmAPI {
	return &AgmAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:    runtime.JSONConsumer(),
		UrlformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		AgentOperationsDeleteAgentsIDHandler: agent_operations.DeleteAgentsIDHandlerFunc(func(params agent_operations.DeleteAgentsIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.DeleteAgentsID has not yet been implemented")
		}),
		AgentOperationsGetAgentsHandler: agent_operations.GetAgentsHandlerFunc(func(params agent_operations.GetAgentsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.GetAgents has not yet been implemented")
		}),
		AgentOperationsGetAgentsIDHandler: agent_operations.GetAgentsIDHandlerFunc(func(params agent_operations.GetAgentsIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.GetAgentsID has not yet been implemented")
		}),
		BoardingOperationsGetAgentsIDBoardingConfigurationHandler: boarding_operations.GetAgentsIDBoardingConfigurationHandlerFunc(func(params boarding_operations.GetAgentsIDBoardingConfigurationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation boarding_operations.GetAgentsIDBoardingConfiguration has not yet been implemented")
		}),
		BoardingOperationsGetAgentsIDBoardingStatusHandler: boarding_operations.GetAgentsIDBoardingStatusHandlerFunc(func(params boarding_operations.GetAgentsIDBoardingStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation boarding_operations.GetAgentsIDBoardingStatus has not yet been implemented")
		}),
		DataSourceConfigurationOperationsGetAgentsIDDataSourceConfigurationHandler: data_source_configuration_operations.GetAgentsIDDataSourceConfigurationHandlerFunc(func(params data_source_configuration_operations.GetAgentsIDDataSourceConfigurationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data_source_configuration_operations.GetAgentsIDDataSourceConfiguration has not yet been implemented")
		}),
		AgentOperationsGetAgentsIDStatusHandler: agent_operations.GetAgentsIDStatusHandlerFunc(func(params agent_operations.GetAgentsIDStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.GetAgentsIDStatus has not yet been implemented")
		}),
		TokenOperationsGetOauthTokenKeyHandler: token_operations.GetOauthTokenKeyHandlerFunc(func(params token_operations.GetOauthTokenKeyParams) middleware.Responder {
			return middleware.NotImplemented("operation token_operations.GetOauthTokenKey has not yet been implemented")
		}),
		TokenOperationsGetOauthTokenKeysHandler: token_operations.GetOauthTokenKeysHandlerFunc(func(params token_operations.GetOauthTokenKeysParams) middleware.Responder {
			return middleware.NotImplemented("operation token_operations.GetOauthTokenKeys has not yet been implemented")
		}),
		AgentOperationsPostAgentsHandler: agent_operations.PostAgentsHandlerFunc(func(params agent_operations.PostAgentsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.PostAgents has not yet been implemented")
		}),
		BoardingOperationsPostAgentsIDBoardingOffboardHandler: boarding_operations.PostAgentsIDBoardingOffboardHandlerFunc(func(params boarding_operations.PostAgentsIDBoardingOffboardParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation boarding_operations.PostAgentsIDBoardingOffboard has not yet been implemented")
		}),
		TokenOperationsPostOauthTokenHandler: token_operations.PostOauthTokenHandlerFunc(func(params token_operations.PostOauthTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation token_operations.PostOauthToken has not yet been implemented")
		}),
		RegistrationOperationsPostRegisterHandler: registration_operations.PostRegisterHandlerFunc(func(params registration_operations.PostRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation registration_operations.PostRegister has not yet been implemented")
		}),
		AgentOperationsPutAgentsIDHandler: agent_operations.PutAgentsIDHandlerFunc(func(params agent_operations.PutAgentsIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation agent_operations.PutAgentsID has not yet been implemented")
		}),
		DataSourceConfigurationOperationsPutAgentsIDDataSourceConfigurationHandler: data_source_configuration_operations.PutAgentsIDDataSourceConfigurationHandlerFunc(func(params data_source_configuration_operations.PutAgentsIDDataSourceConfigurationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data_source_configuration_operations.PutAgentsIDDataSourceConfiguration has not yet been implemented")
		}),
		RegistrationOperationsPutRegisterClientIDHandler: registration_operations.PutRegisterClientIDHandlerFunc(func(params registration_operations.PutRegisterClientIDParams) middleware.Responder {
			return middleware.NotImplemented("operation registration_operations.PutRegisterClientID has not yet been implemented")
		}),

		AgentsAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (agents) has not yet been implemented")
		},
		BoardingAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (boarding) has not yet been implemented")
		},
		DataSourcesAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (dataSources) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*
AgmAPI API defining resources and operations for managing agents.

Generating a Boarding Configuration action is an asynchronous operation therefore it may take a while.
In case Boarding Configuration is not generated, try to read the configuration again after a couple of seconds.
*/
type AgmAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AgentsAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	AgentsAuth func(string, []string) (*models.Principal, error)

	// BoardingAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	BoardingAuth func(string, []string) (*models.Principal, error)

	// DataSourcesAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	DataSourcesAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AgentOperationsDeleteAgentsIDHandler sets the operation handler for the delete agents ID operation
	AgentOperationsDeleteAgentsIDHandler agent_operations.DeleteAgentsIDHandler
	// AgentOperationsGetAgentsHandler sets the operation handler for the get agents operation
	AgentOperationsGetAgentsHandler agent_operations.GetAgentsHandler
	// AgentOperationsGetAgentsIDHandler sets the operation handler for the get agents ID operation
	AgentOperationsGetAgentsIDHandler agent_operations.GetAgentsIDHandler
	// BoardingOperationsGetAgentsIDBoardingConfigurationHandler sets the operation handler for the get agents ID boarding configuration operation
	BoardingOperationsGetAgentsIDBoardingConfigurationHandler boarding_operations.GetAgentsIDBoardingConfigurationHandler
	// BoardingOperationsGetAgentsIDBoardingStatusHandler sets the operation handler for the get agents ID boarding status operation
	BoardingOperationsGetAgentsIDBoardingStatusHandler boarding_operations.GetAgentsIDBoardingStatusHandler
	// DataSourceConfigurationOperationsGetAgentsIDDataSourceConfigurationHandler sets the operation handler for the get agents ID data source configuration operation
	DataSourceConfigurationOperationsGetAgentsIDDataSourceConfigurationHandler data_source_configuration_operations.GetAgentsIDDataSourceConfigurationHandler
	// AgentOperationsGetAgentsIDStatusHandler sets the operation handler for the get agents ID status operation
	AgentOperationsGetAgentsIDStatusHandler agent_operations.GetAgentsIDStatusHandler
	// TokenOperationsGetOauthTokenKeyHandler sets the operation handler for the get oauth token key operation
	TokenOperationsGetOauthTokenKeyHandler token_operations.GetOauthTokenKeyHandler
	// TokenOperationsGetOauthTokenKeysHandler sets the operation handler for the get oauth token keys operation
	TokenOperationsGetOauthTokenKeysHandler token_operations.GetOauthTokenKeysHandler
	// AgentOperationsPostAgentsHandler sets the operation handler for the post agents operation
	AgentOperationsPostAgentsHandler agent_operations.PostAgentsHandler
	// BoardingOperationsPostAgentsIDBoardingOffboardHandler sets the operation handler for the post agents ID boarding offboard operation
	BoardingOperationsPostAgentsIDBoardingOffboardHandler boarding_operations.PostAgentsIDBoardingOffboardHandler
	// TokenOperationsPostOauthTokenHandler sets the operation handler for the post oauth token operation
	TokenOperationsPostOauthTokenHandler token_operations.PostOauthTokenHandler
	// RegistrationOperationsPostRegisterHandler sets the operation handler for the post register operation
	RegistrationOperationsPostRegisterHandler registration_operations.PostRegisterHandler
	// AgentOperationsPutAgentsIDHandler sets the operation handler for the put agents ID operation
	AgentOperationsPutAgentsIDHandler agent_operations.PutAgentsIDHandler
	// DataSourceConfigurationOperationsPutAgentsIDDataSourceConfigurationHandler sets the operation handler for the put agents ID data source configuration operation
	DataSourceConfigurationOperationsPutAgentsIDDataSourceConfigurationHandler data_source_configuration_operations.PutAgentsIDDataSourceConfigurationHandler
	// RegistrationOperationsPutRegisterClientIDHandler sets the operation handler for the put register client ID operation
	RegistrationOperationsPutRegisterClientIDHandler registration_operations.PutRegisterClientIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *AgmAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *AgmAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *AgmAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AgmAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AgmAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AgmAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AgmAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AgmAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AgmAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AgmAPI
func (o *AgmAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AgentsAuth == nil {
		unregistered = append(unregistered, "AgentsAuth")
	}
	if o.BoardingAuth == nil {
		unregistered = append(unregistered, "BoardingAuth")
	}
	if o.DataSourcesAuth == nil {
		unregistered = append(unregistered, "DataSourcesAuth")
	}

	if o.AgentOperationsDeleteAgentsIDHandler == nil {
		unregistered = append(unregistered, "agent_operations.DeleteAgentsIDHandler")
	}
	if o.AgentOperationsGetAgentsHandler == nil {
		unregistered = append(unregistered, "agent_operations.GetAgentsHandler")
	}
	if o.AgentOperationsGetAgentsIDHandler == nil {
		unregistered = append(unregistered, "agent_operations.GetAgentsIDHandler")
	}
	if o.BoardingOperationsGetAgentsIDBoardingConfigurationHandler == nil {
		unregistered = append(unregistered, "boarding_operations.GetAgentsIDBoardingConfigurationHandler")
	}
	if o.BoardingOperationsGetAgentsIDBoardingStatusHandler == nil {
		unregistered = append(unregistered, "boarding_operations.GetAgentsIDBoardingStatusHandler")
	}
	if o.DataSourceConfigurationOperationsGetAgentsIDDataSourceConfigurationHandler == nil {
		unregistered = append(unregistered, "data_source_configuration_operations.GetAgentsIDDataSourceConfigurationHandler")
	}
	if o.AgentOperationsGetAgentsIDStatusHandler == nil {
		unregistered = append(unregistered, "agent_operations.GetAgentsIDStatusHandler")
	}
	if o.TokenOperationsGetOauthTokenKeyHandler == nil {
		unregistered = append(unregistered, "token_operations.GetOauthTokenKeyHandler")
	}
	if o.TokenOperationsGetOauthTokenKeysHandler == nil {
		unregistered = append(unregistered, "token_operations.GetOauthTokenKeysHandler")
	}
	if o.AgentOperationsPostAgentsHandler == nil {
		unregistered = append(unregistered, "agent_operations.PostAgentsHandler")
	}
	if o.BoardingOperationsPostAgentsIDBoardingOffboardHandler == nil {
		unregistered = append(unregistered, "boarding_operations.PostAgentsIDBoardingOffboardHandler")
	}
	if o.TokenOperationsPostOauthTokenHandler == nil {
		unregistered = append(unregistered, "token_operations.PostOauthTokenHandler")
	}
	if o.RegistrationOperationsPostRegisterHandler == nil {
		unregistered = append(unregistered, "registration_operations.PostRegisterHandler")
	}
	if o.AgentOperationsPutAgentsIDHandler == nil {
		unregistered = append(unregistered, "agent_operations.PutAgentsIDHandler")
	}
	if o.DataSourceConfigurationOperationsPutAgentsIDDataSourceConfigurationHandler == nil {
		unregistered = append(unregistered, "data_source_configuration_operations.PutAgentsIDDataSourceConfigurationHandler")
	}
	if o.RegistrationOperationsPutRegisterClientIDHandler == nil {
		unregistered = append(unregistered, "registration_operations.PutRegisterClientIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AgmAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AgmAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "agents":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.AgentsAuth(token, scopes)
			})

		case "boarding":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.BoardingAuth(token, scopes)
			})

		case "dataSources":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.DataSourcesAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *AgmAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *AgmAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *AgmAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AgmAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the agm API
func (o *AgmAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AgmAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/agents/{id}"] = agent_operations.NewDeleteAgentsID(o.context, o.AgentOperationsDeleteAgentsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents"] = agent_operations.NewGetAgents(o.context, o.AgentOperationsGetAgentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents/{id}"] = agent_operations.NewGetAgentsID(o.context, o.AgentOperationsGetAgentsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents/{id}/boarding/configuration"] = boarding_operations.NewGetAgentsIDBoardingConfiguration(o.context, o.BoardingOperationsGetAgentsIDBoardingConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents/{id}/boarding/status"] = boarding_operations.NewGetAgentsIDBoardingStatus(o.context, o.BoardingOperationsGetAgentsIDBoardingStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents/{id}/dataSourceConfiguration"] = data_source_configuration_operations.NewGetAgentsIDDataSourceConfiguration(o.context, o.DataSourceConfigurationOperationsGetAgentsIDDataSourceConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/agents/{id}/status"] = agent_operations.NewGetAgentsIDStatus(o.context, o.AgentOperationsGetAgentsIDStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/oauth/token_key"] = token_operations.NewGetOauthTokenKey(o.context, o.TokenOperationsGetOauthTokenKeyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/oauth/token_keys"] = token_operations.NewGetOauthTokenKeys(o.context, o.TokenOperationsGetOauthTokenKeysHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agents"] = agent_operations.NewPostAgents(o.context, o.AgentOperationsPostAgentsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/agents/{id}/boarding/offboard"] = boarding_operations.NewPostAgentsIDBoardingOffboard(o.context, o.BoardingOperationsPostAgentsIDBoardingOffboardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/oauth/token"] = token_operations.NewPostOauthToken(o.context, o.TokenOperationsPostOauthTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/register"] = registration_operations.NewPostRegister(o.context, o.RegistrationOperationsPostRegisterHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/agents/{id}"] = agent_operations.NewPutAgentsID(o.context, o.AgentOperationsPutAgentsIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/agents/{id}/dataSourceConfiguration"] = data_source_configuration_operations.NewPutAgentsIDDataSourceConfiguration(o.context, o.DataSourceConfigurationOperationsPutAgentsIDDataSourceConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/register/{client_id}"] = registration_operations.NewPutRegisterClientID(o.context, o.RegistrationOperationsPutRegisterClientIDHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AgmAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AgmAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AgmAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AgmAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *AgmAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
