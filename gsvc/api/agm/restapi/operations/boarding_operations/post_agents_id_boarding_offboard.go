// Code generated by go-swagger; DO NOT EDIT.

package boarding_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/agm/models"
)

// PostAgentsIDBoardingOffboardHandlerFunc turns a function with the right signature into a post agents ID boarding offboard handler
type PostAgentsIDBoardingOffboardHandlerFunc func(PostAgentsIDBoardingOffboardParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAgentsIDBoardingOffboardHandlerFunc) Handle(params PostAgentsIDBoardingOffboardParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostAgentsIDBoardingOffboardHandler interface for that can handle valid post agents ID boarding offboard params
type PostAgentsIDBoardingOffboardHandler interface {
	Handle(PostAgentsIDBoardingOffboardParams, *models.Principal) middleware.Responder
}

// NewPostAgentsIDBoardingOffboard creates a new http.Handler for the post agents ID boarding offboard operation
func NewPostAgentsIDBoardingOffboard(ctx *middleware.Context, handler PostAgentsIDBoardingOffboardHandler) *PostAgentsIDBoardingOffboard {
	return &PostAgentsIDBoardingOffboard{Context: ctx, Handler: handler}
}

/*
	PostAgentsIDBoardingOffboard swagger:route POST /agents/{id}/boarding/offboard Boarding Operations postAgentsIdBoardingOffboard

# Offboard agent

Offboards the agent.
*/
type PostAgentsIDBoardingOffboard struct {
	Context *middleware.Context
	Handler PostAgentsIDBoardingOffboardHandler
}

func (o *PostAgentsIDBoardingOffboard) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAgentsIDBoardingOffboardParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
