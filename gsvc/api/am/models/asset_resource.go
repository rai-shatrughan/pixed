// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetResource asset resource
//
// swagger:model AssetResource
type AssetResource struct {
	Asset

	// links
	Links *AssetLinks `json:"_links,omitempty"`

	// asset Id
	AssetID UniqueID `json:"assetId,omitempty"`

	// deleted
	// Format: date-time
	Deleted strfmt.DateTime `json:"deleted,omitempty"`

	// etag
	Etag ETag `json:"etag,omitempty"`

	// locks
	Locks []*LockResource `json:"locks"`

	// sharing
	Sharing *SharingResource `json:"sharing,omitempty"`

	// The id of the end-customer.
	// Example: UnkarPlutt Inc.
	// Max Length: 255
	SubTenant string `json:"subTenant,omitempty"`

	// The id of the end-customer. This field is DEPRECATED please use subTenant instead.
	// Example: DEPRECATED: use subTenant instead
	// Max Length: 255
	T2Tenant string `json:"t2Tenant,omitempty"`

	// tenant Id
	TenantID TenantID `json:"tenantId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Asset
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Asset = aO0

	// AO1
	var dataAO1 struct {
		Links *AssetLinks `json:"_links,omitempty"`

		AssetID UniqueID `json:"assetId,omitempty"`

		Deleted strfmt.DateTime `json:"deleted,omitempty"`

		Etag ETag `json:"etag,omitempty"`

		Locks []*LockResource `json:"locks"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		SubTenant string `json:"subTenant,omitempty"`

		T2Tenant string `json:"t2Tenant,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Links = dataAO1.Links

	m.AssetID = dataAO1.AssetID

	m.Deleted = dataAO1.Deleted

	m.Etag = dataAO1.Etag

	m.Locks = dataAO1.Locks

	m.Sharing = dataAO1.Sharing

	m.SubTenant = dataAO1.SubTenant

	m.T2Tenant = dataAO1.T2Tenant

	m.TenantID = dataAO1.TenantID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Asset)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Links *AssetLinks `json:"_links,omitempty"`

		AssetID UniqueID `json:"assetId,omitempty"`

		Deleted strfmt.DateTime `json:"deleted,omitempty"`

		Etag ETag `json:"etag,omitempty"`

		Locks []*LockResource `json:"locks"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		SubTenant string `json:"subTenant,omitempty"`

		T2Tenant string `json:"t2Tenant,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`
	}

	dataAO1.Links = m.Links

	dataAO1.AssetID = m.AssetID

	dataAO1.Deleted = m.Deleted

	dataAO1.Etag = m.Etag

	dataAO1.Locks = m.Locks

	dataAO1.Sharing = m.Sharing

	dataAO1.SubTenant = m.SubTenant

	dataAO1.T2Tenant = m.T2Tenant

	dataAO1.TenantID = m.TenantID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset resource
func (m *AssetResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Asset
	if err := m.Asset.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT2Tenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResource) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetResource) validateAssetID(formats strfmt.Registry) error {

	if swag.IsZero(m.AssetID) { // not required
		return nil
	}

	if err := m.AssetID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetId")
		}
		return err
	}

	return nil
}

func (m *AssetResource) validateDeleted(formats strfmt.Registry) error {

	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date-time", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AssetResource) validateEtag(formats strfmt.Registry) error {

	if swag.IsZero(m.Etag) { // not required
		return nil
	}

	if err := m.Etag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AssetResource) validateLocks(formats strfmt.Registry) error {

	if swag.IsZero(m.Locks) { // not required
		return nil
	}

	for i := 0; i < len(m.Locks); i++ {
		if swag.IsZero(m.Locks[i]) { // not required
			continue
		}

		if m.Locks[i] != nil {
			if err := m.Locks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetResource) validateSharing(formats strfmt.Registry) error {

	if swag.IsZero(m.Sharing) { // not required
		return nil
	}

	if m.Sharing != nil {
		if err := m.Sharing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AssetResource) validateSubTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.SubTenant) { // not required
		return nil
	}

	if err := validate.MaxLength("subTenant", "body", m.SubTenant, 255); err != nil {
		return err
	}

	return nil
}

func (m *AssetResource) validateT2Tenant(formats strfmt.Registry) error {

	if swag.IsZero(m.T2Tenant) { // not required
		return nil
	}

	if err := validate.MaxLength("t2Tenant", "body", m.T2Tenant, 255); err != nil {
		return err
	}

	return nil
}

func (m *AssetResource) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := m.TenantID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this asset resource based on the context it is used
func (m *AssetResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Asset
	if err := m.Asset.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResource) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetResource) contextValidateAssetID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetId")
		}
		return err
	}

	return nil
}

func (m *AssetResource) contextValidateEtag(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Etag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AssetResource) contextValidateLocks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locks); i++ {

		if m.Locks[i] != nil {
			if err := m.Locks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetResource) contextValidateSharing(ctx context.Context, formats strfmt.Registry) error {

	if m.Sharing != nil {
		if err := m.Sharing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AssetResource) contextValidateTenantID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TenantID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetResource) UnmarshalBinary(b []byte) error {
	var res AssetResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
