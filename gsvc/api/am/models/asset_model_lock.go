// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetModelLock asset model lock
//
// swagger:model AssetModelLock
type AssetModelLock struct {

	// enabled
	Enabled Enabled `json:"enabled,omitempty"`

	// jobs
	Jobs Jobs `json:"jobs,omitempty"`
}

// Validate validates this asset model lock
func (m *AssetModelLock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetModelLock) validateEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.Enabled) { // not required
		return nil
	}

	if err := m.Enabled.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enabled")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enabled")
		}
		return err
	}

	return nil
}

func (m *AssetModelLock) validateJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.Jobs) { // not required
		return nil
	}

	if err := m.Jobs.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jobs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("jobs")
		}
		return err
	}

	return nil
}

// ContextValidate validate this asset model lock based on the context it is used
func (m *AssetModelLock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetModelLock) contextValidateEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Enabled.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enabled")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enabled")
		}
		return err
	}

	return nil
}

func (m *AssetModelLock) contextValidateJobs(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Jobs.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("jobs")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("jobs")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetModelLock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetModelLock) UnmarshalBinary(b []byte) error {
	var res AssetModelLock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
