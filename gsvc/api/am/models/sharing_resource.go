// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SharingResource Contains sharing information.
//
// swagger:model SharingResource
type SharingResource struct {

	// List of sharing modes applicable for this resource. The currently supported modes are SHARER and RECEIVER. SHARER means this resource is shared by my tenant. RECEIVER means this resource is shared with my tenant. An empty array means this resource is not shared. New modes might be introduced later and clients must expect additional items to be contained in the array.
	Modes []string `json:"modes"`
}

// Validate validates this sharing resource
func (m *SharingResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sharingResourceModesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHARER","RECEIVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sharingResourceModesItemsEnum = append(sharingResourceModesItemsEnum, v)
	}
}

func (m *SharingResource) validateModesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sharingResourceModesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SharingResource) validateModes(formats strfmt.Registry) error {
	if swag.IsZero(m.Modes) { // not required
		return nil
	}

	for i := 0; i < len(m.Modes); i++ {

		// value enum
		if err := m.validateModesItemsEnum("modes"+"."+strconv.Itoa(i), "body", m.Modes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this sharing resource based on context it is used
func (m *SharingResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SharingResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharingResource) UnmarshalBinary(b []byte) error {
	var res SharingResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
