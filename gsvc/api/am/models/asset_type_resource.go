// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetTypeResource asset type resource
//
// swagger:model AssetTypeResource
type AssetTypeResource struct {
	AssetTypeBase

	// links
	Links *AssetTypeLinks `json:"_links,omitempty"`

	// aspects
	Aspects []*AssetTypeResourceAspectsItems0 `json:"aspects"`

	// etag
	Etag ETag `json:"etag,omitempty"`

	// file assignments
	FileAssignments []*FileAssignmentResource `json:"fileAssignments"`

	// id
	ID AssetTypeID `json:"id,omitempty"`

	// sharing
	Sharing *SharingResource `json:"sharing,omitempty"`

	// tenant Id
	TenantID TenantID `json:"tenantId,omitempty"`

	// Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.
	Variables []*VariableDefinitionResource `json:"variables"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetTypeResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetTypeBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetTypeBase = aO0

	// AO1
	var dataAO1 struct {
		Links *AssetTypeLinks `json:"_links,omitempty"`

		Aspects []*AssetTypeResourceAspectsItems0 `json:"aspects"`

		Etag ETag `json:"etag,omitempty"`

		FileAssignments []*FileAssignmentResource `json:"fileAssignments"`

		ID AssetTypeID `json:"id,omitempty"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`

		Variables []*VariableDefinitionResource `json:"variables"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Links = dataAO1.Links

	m.Aspects = dataAO1.Aspects

	m.Etag = dataAO1.Etag

	m.FileAssignments = dataAO1.FileAssignments

	m.ID = dataAO1.ID

	m.Sharing = dataAO1.Sharing

	m.TenantID = dataAO1.TenantID

	m.Variables = dataAO1.Variables

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetTypeResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetTypeBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Links *AssetTypeLinks `json:"_links,omitempty"`

		Aspects []*AssetTypeResourceAspectsItems0 `json:"aspects"`

		Etag ETag `json:"etag,omitempty"`

		FileAssignments []*FileAssignmentResource `json:"fileAssignments"`

		ID AssetTypeID `json:"id,omitempty"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`

		Variables []*VariableDefinitionResource `json:"variables"`
	}

	dataAO1.Links = m.Links

	dataAO1.Aspects = m.Aspects

	dataAO1.Etag = m.Etag

	dataAO1.FileAssignments = m.FileAssignments

	dataAO1.ID = m.ID

	dataAO1.Sharing = m.Sharing

	dataAO1.TenantID = m.TenantID

	dataAO1.Variables = m.Variables

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset type resource
func (m *AssetTypeResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetTypeBase
	if err := m.AssetTypeBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAspects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResource) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResource) validateAspects(formats strfmt.Registry) error {

	if swag.IsZero(m.Aspects) { // not required
		return nil
	}

	for i := 0; i < len(m.Aspects); i++ {
		if swag.IsZero(m.Aspects[i]) { // not required
			continue
		}

		if m.Aspects[i] != nil {
			if err := m.Aspects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aspects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aspects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetTypeResource) validateEtag(formats strfmt.Registry) error {

	if swag.IsZero(m.Etag) { // not required
		return nil
	}

	if err := m.Etag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) validateFileAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.FileAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.FileAssignments); i++ {
		if swag.IsZero(m.FileAssignments[i]) { // not required
			continue
		}

		if m.FileAssignments[i] != nil {
			if err := m.FileAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetTypeResource) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) validateSharing(formats strfmt.Registry) error {

	if swag.IsZero(m.Sharing) { // not required
		return nil
	}

	if m.Sharing != nil {
		if err := m.Sharing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResource) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := m.TenantID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this asset type resource based on the context it is used
func (m *AssetTypeResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetTypeBase
	if err := m.AssetTypeBase.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAspects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResource) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResource) contextValidateAspects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Aspects); i++ {

		if m.Aspects[i] != nil {
			if err := m.Aspects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aspects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aspects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetTypeResource) contextValidateEtag(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Etag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) contextValidateFileAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileAssignments); i++ {

		if m.FileAssignments[i] != nil {
			if err := m.FileAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fileAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fileAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetTypeResource) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) contextValidateSharing(ctx context.Context, formats strfmt.Registry) error {

	if m.Sharing != nil {
		if err := m.Sharing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResource) contextValidateTenantID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TenantID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResource) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Variables); i++ {

		if m.Variables[i] != nil {
			if err := m.Variables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetTypeResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetTypeResource) UnmarshalBinary(b []byte) error {
	var res AssetTypeResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetTypeResourceAspectsItems0 asset type resource aspects items0
//
// swagger:model AssetTypeResourceAspectsItems0
type AssetTypeResourceAspectsItems0 struct {

	// links
	Links *AssetTypeResourceAspectsItems0Links `json:"_links,omitempty"`

	// aspect Id
	AspectID AspectID `json:"aspectId,omitempty"`

	// aspect type
	AspectType struct {
		AspectTypeResource
	} `json:"aspectType,omitempty"`

	// Name of the aspect type, it must be unique for the asset type.
	// Example: leftWing
	Name string `json:"name,omitempty"`
}

// Validate validates this asset type resource aspects items0
func (m *AssetTypeResourceAspectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAspectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAspectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResourceAspectsItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResourceAspectsItems0) validateAspectID(formats strfmt.Registry) error {
	if swag.IsZero(m.AspectID) { // not required
		return nil
	}

	if err := m.AspectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aspectId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aspectId")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResourceAspectsItems0) validateAspectType(formats strfmt.Registry) error {
	if swag.IsZero(m.AspectType) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this asset type resource aspects items0 based on the context it is used
func (m *AssetTypeResourceAspectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAspectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAspectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResourceAspectsItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AssetTypeResourceAspectsItems0) contextValidateAspectID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AspectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aspectId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aspectId")
		}
		return err
	}

	return nil
}

func (m *AssetTypeResourceAspectsItems0) contextValidateAspectType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0) UnmarshalBinary(b []byte) error {
	var res AssetTypeResourceAspectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetTypeResourceAspectsItems0Links asset type resource aspects items0 links
//
// swagger:model AssetTypeResourceAspectsItems0Links
type AssetTypeResourceAspectsItems0Links struct {

	// origin
	Origin *AssetTypeResourceAspectsItems0LinksOrigin `json:"origin,omitempty"`
}

// Validate validates this asset type resource aspects items0 links
func (m *AssetTypeResourceAspectsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResourceAspectsItems0Links) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "origin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this asset type resource aspects items0 links based on the context it is used
func (m *AssetTypeResourceAspectsItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetTypeResourceAspectsItems0Links) contextValidateOrigin(ctx context.Context, formats strfmt.Registry) error {

	if m.Origin != nil {
		if err := m.Origin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links" + "." + "origin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0Links) UnmarshalBinary(b []byte) error {
	var res AssetTypeResourceAspectsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetTypeResourceAspectsItems0LinksOrigin asset type resource aspects items0 links origin
//
// swagger:model AssetTypeResourceAspectsItems0LinksOrigin
type AssetTypeResourceAspectsItems0LinksOrigin struct {

	// Link to the asset type defining the aspect. *Only visible if aspect is inherited.*
	Href string `json:"href,omitempty"`
}

// Validate validates this asset type resource aspects items0 links origin
func (m *AssetTypeResourceAspectsItems0LinksOrigin) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this asset type resource aspects items0 links origin based on context it is used
func (m *AssetTypeResourceAspectsItems0LinksOrigin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0LinksOrigin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetTypeResourceAspectsItems0LinksOrigin) UnmarshalBinary(b []byte) error {
	var res AssetTypeResourceAspectsItems0LinksOrigin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
