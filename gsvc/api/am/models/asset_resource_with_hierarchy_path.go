// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetResourceWithHierarchyPath asset resource with hierarchy path
//
// swagger:model AssetResourceWithHierarchyPath
type AssetResourceWithHierarchyPath struct {
	AssetResource

	// hierarchy path
	HierarchyPath []*AssetResourceWithHierarchyPathHierarchyPathItems0 `json:"hierarchyPath"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetResourceWithHierarchyPath) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetResource = aO0

	// AO1
	var dataAO1 struct {
		HierarchyPath []*AssetResourceWithHierarchyPathHierarchyPathItems0 `json:"hierarchyPath"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.HierarchyPath = dataAO1.HierarchyPath

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetResourceWithHierarchyPath) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		HierarchyPath []*AssetResourceWithHierarchyPathHierarchyPathItems0 `json:"hierarchyPath"`
	}

	dataAO1.HierarchyPath = m.HierarchyPath

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset resource with hierarchy path
func (m *AssetResourceWithHierarchyPath) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetResource
	if err := m.AssetResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHierarchyPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResourceWithHierarchyPath) validateHierarchyPath(formats strfmt.Registry) error {

	if swag.IsZero(m.HierarchyPath) { // not required
		return nil
	}

	for i := 0; i < len(m.HierarchyPath); i++ {
		if swag.IsZero(m.HierarchyPath[i]) { // not required
			continue
		}

		if m.HierarchyPath[i] != nil {
			if err := m.HierarchyPath[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hierarchyPath" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hierarchyPath" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this asset resource with hierarchy path based on the context it is used
func (m *AssetResourceWithHierarchyPath) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetResource
	if err := m.AssetResource.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHierarchyPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResourceWithHierarchyPath) contextValidateHierarchyPath(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HierarchyPath); i++ {

		if m.HierarchyPath[i] != nil {
			if err := m.HierarchyPath[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hierarchyPath" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hierarchyPath" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetResourceWithHierarchyPath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetResourceWithHierarchyPath) UnmarshalBinary(b []byte) error {
	var res AssetResourceWithHierarchyPath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetResourceWithHierarchyPathHierarchyPathItems0 asset resource with hierarchy path hierarchy path items0
//
// swagger:model AssetResourceWithHierarchyPathHierarchyPathItems0
type AssetResourceWithHierarchyPathHierarchyPathItems0 struct {

	// asset Id
	AssetID UniqueID `json:"assetId,omitempty"`

	// Name of the asset
	// Example: Millenium Falcon's parent
	Name string `json:"name,omitempty"`
}

// Validate validates this asset resource with hierarchy path hierarchy path items0
func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) validateAssetID(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetID) { // not required
		return nil
	}

	if err := m.AssetID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this asset resource with hierarchy path hierarchy path items0 based on the context it is used
func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) contextValidateAssetID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetResourceWithHierarchyPathHierarchyPathItems0) UnmarshalBinary(b []byte) error {
	var res AssetResourceWithHierarchyPathHierarchyPathItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
