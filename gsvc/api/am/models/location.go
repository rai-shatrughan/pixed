// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Location location
//
// swagger:model Location
type Location struct {

	// country
	// Example: Austria
	// Max Length: 255
	Country string `json:"country,omitempty"`

	// The latitude part of the geographic coordinates
	// Example: 9.9763411
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude,omitempty"`

	// locality
	// Example: Innsbruck
	// Max Length: 255
	// Pattern: [\p{L}0-9_ -\']*
	Locality string `json:"locality,omitempty"`

	// The longitude part of the geographic coordinates
	// Example: 53.5125546
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude,omitempty"`

	// postal code
	// Example: 6020
	// Max Length: 255
	PostalCode string `json:"postalCode,omitempty"`

	// County or other region code or name
	// Example: Tyrol
	// Max Length: 255
	Region string `json:"region,omitempty"`

	// street address
	// Example: IndustriestraÃŸe 21 A/II
	// Max Length: 255
	StreetAddress string `json:"streetAddress,omitempty"`
}

// Validate validates this location
func (m *Location) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("country", "body", m.Country, 255); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateLatitude(formats strfmt.Registry) error {
	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("latitude", "body", *m.Latitude, -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", *m.Latitude, 90, false); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("locality", "body", m.Locality, 255); err != nil {
		return err
	}

	if err := validate.Pattern("locality", "body", m.Locality, `[\p{L}0-9_ -\']*`); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateLongitude(formats strfmt.Registry) error {
	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("longitude", "body", *m.Longitude, -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", *m.Longitude, 180, false); err != nil {
		return err
	}

	return nil
}

func (m *Location) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postalCode", "body", m.PostalCode, 255); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if err := validate.MaxLength("region", "body", m.Region, 255); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateStreetAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.StreetAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("streetAddress", "body", m.StreetAddress, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this location based on context it is used
func (m *Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Location) UnmarshalBinary(b []byte) error {
	var res Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
