// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AspectVariableUpdateMap aspect variable update map
// Example: {"newVariable":{"dataType":"STRING","defaultValue":"25/77","length":5,"name":"newVariable","qualityCode":true,"searchable":true,"unit":"C/F"},"removeVariable":null,"temperature":{"dataType":"STRING","defaultValue":"25/77","length":5,"name":"engine_temperature","qualityCode":true,"searchable":true,"unit":"C/F"}}
//
// swagger:model aspectVariableUpdateMap
type AspectVariableUpdateMap map[string]VariableDefinition

// Validate validates this aspect variable update map
func (m AspectVariableUpdateMap) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if err := validate.Required(k, "body", m[k]); err != nil {
			return err
		}
		if val, ok := m[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(k)
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this aspect variable update map based on the context it is used
func (m AspectVariableUpdateMap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if val, ok := m[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
