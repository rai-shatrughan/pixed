// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variable variable
//
// swagger:model Variable
type Variable struct {

	// name
	// Example: color
	// Max Length: 64
	// Min Length: 1
	// Pattern: [a-zA-Z0-9_]+
	Name string `json:"name,omitempty"`

	// value
	// Example: yellow
	// Max Length: 255
	// Min Length: 1
	Value string `json:"value,omitempty"`
}

// Validate validates this variable
func (m *Variable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variable) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 64); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `[a-zA-Z0-9_]+`); err != nil {
		return err
	}

	return nil
}

func (m *Variable) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := validate.MinLength("value", "body", m.Value, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", m.Value, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this variable based on context it is used
func (m *Variable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Variable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variable) UnmarshalBinary(b []byte) error {
	var res Variable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
