// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AspectTypeResource aspect type resource
//
// swagger:model AspectTypeResource
type AspectTypeResource struct {
	AspectType

	// links
	Links *AspectTypeLinks `json:"_links,omitempty"`

	// etag
	Etag ETag `json:"etag,omitempty"`

	// id
	ID AspectTypeID `json:"id,omitempty"`

	// sharing
	Sharing *SharingResource `json:"sharing,omitempty"`

	// tenant Id
	TenantID TenantID `json:"tenantId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AspectTypeResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AspectType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AspectType = aO0

	// AO1
	var dataAO1 struct {
		Links *AspectTypeLinks `json:"_links,omitempty"`

		Etag ETag `json:"etag,omitempty"`

		ID AspectTypeID `json:"id,omitempty"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Links = dataAO1.Links

	m.Etag = dataAO1.Etag

	m.ID = dataAO1.ID

	m.Sharing = dataAO1.Sharing

	m.TenantID = dataAO1.TenantID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AspectTypeResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AspectType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Links *AspectTypeLinks `json:"_links,omitempty"`

		Etag ETag `json:"etag,omitempty"`

		ID AspectTypeID `json:"id,omitempty"`

		Sharing *SharingResource `json:"sharing,omitempty"`

		TenantID TenantID `json:"tenantId,omitempty"`
	}

	dataAO1.Links = m.Links

	dataAO1.Etag = m.Etag

	dataAO1.ID = m.ID

	dataAO1.Sharing = m.Sharing

	dataAO1.TenantID = m.TenantID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this aspect type resource
func (m *AspectTypeResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AspectType
	if err := m.AspectType.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectTypeResource) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AspectTypeResource) validateEtag(formats strfmt.Registry) error {

	if swag.IsZero(m.Etag) { // not required
		return nil
	}

	if err := m.Etag.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AspectTypeResource) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AspectTypeResource) validateSharing(formats strfmt.Registry) error {

	if swag.IsZero(m.Sharing) { // not required
		return nil
	}

	if m.Sharing != nil {
		if err := m.Sharing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AspectTypeResource) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := m.TenantID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this aspect type resource based on the context it is used
func (m *AspectTypeResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AspectType
	if err := m.AspectType.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSharing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectTypeResource) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AspectTypeResource) contextValidateEtag(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Etag.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("etag")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("etag")
		}
		return err
	}

	return nil
}

func (m *AspectTypeResource) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AspectTypeResource) contextValidateSharing(ctx context.Context, formats strfmt.Registry) error {

	if m.Sharing != nil {
		if err := m.Sharing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sharing")
			}
			return err
		}
	}

	return nil
}

func (m *AspectTypeResource) contextValidateTenantID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TenantID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tenantId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tenantId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AspectTypeResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectTypeResource) UnmarshalBinary(b []byte) error {
	var res AspectTypeResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
