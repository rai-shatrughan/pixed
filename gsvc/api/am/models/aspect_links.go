// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AspectLinks aspect links
//
// swagger:model AspectLinks
type AspectLinks struct {

	// aspect type
	AspectType *AspectLinksAspectType `json:"aspectType,omitempty"`

	// asset
	Asset *AspectLinksAsset `json:"asset,omitempty"`

	// self
	Self *AspectLinksSelf `json:"self,omitempty"`
}

// Validate validates this aspect links
func (m *AspectLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAspectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectLinks) validateAspectType(formats strfmt.Registry) error {
	if swag.IsZero(m.AspectType) { // not required
		return nil
	}

	if m.AspectType != nil {
		if err := m.AspectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspectType")
			}
			return err
		}
	}

	return nil
}

func (m *AspectLinks) validateAsset(formats strfmt.Registry) error {
	if swag.IsZero(m.Asset) { // not required
		return nil
	}

	if m.Asset != nil {
		if err := m.Asset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset")
			}
			return err
		}
	}

	return nil
}

func (m *AspectLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aspect links based on the context it is used
func (m *AspectLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAspectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAsset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectLinks) contextValidateAspectType(ctx context.Context, formats strfmt.Registry) error {

	if m.AspectType != nil {
		if err := m.AspectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspectType")
			}
			return err
		}
	}

	return nil
}

func (m *AspectLinks) contextValidateAsset(ctx context.Context, formats strfmt.Registry) error {

	if m.Asset != nil {
		if err := m.Asset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset")
			}
			return err
		}
	}

	return nil
}

func (m *AspectLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AspectLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectLinks) UnmarshalBinary(b []byte) error {
	var res AspectLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AspectLinksAspectType aspect links aspect type
//
// swagger:model AspectLinksAspectType
type AspectLinksAspectType struct {

	// Link to the origin aspect type of the aspect
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this aspect links aspect type
func (m *AspectLinksAspectType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectLinksAspectType) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("aspectType"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aspect links aspect type based on context it is used
func (m *AspectLinksAspectType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AspectLinksAspectType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectLinksAspectType) UnmarshalBinary(b []byte) error {
	var res AspectLinksAspectType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AspectLinksAsset aspect links asset
//
// swagger:model AspectLinksAsset
type AspectLinksAsset struct {

	// Link to the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this aspect links asset
func (m *AspectLinksAsset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectLinksAsset) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("asset"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aspect links asset based on context it is used
func (m *AspectLinksAsset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AspectLinksAsset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectLinksAsset) UnmarshalBinary(b []byte) error {
	var res AspectLinksAsset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AspectLinksSelf aspect links self
//
// swagger:model AspectLinksSelf
type AspectLinksSelf struct {

	// Link to the aspect
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this aspect links self
func (m *AspectLinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectLinksSelf) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aspect links self based on context it is used
func (m *AspectLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AspectLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectLinksSelf) UnmarshalBinary(b []byte) error {
	var res AspectLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
