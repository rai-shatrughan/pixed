// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AspectResource aspect resource
//
// swagger:model AspectResource
type AspectResource struct {

	// links
	Links *AspectLinks `json:"_links,omitempty"`

	// aspect Id
	AspectID AspectID `json:"aspectId,omitempty"`

	// ID of the Aspect type
	// Example: tenant.asp.engine
	AspectTypeID string `json:"aspectTypeId,omitempty"`

	// category
	// Enum: [dynamic static]
	Category string `json:"category,omitempty"`

	// The description of the aspect
	// Example: The engine of the Millenium Falcon
	// Pattern: [^\']*
	Description string `json:"description,omitempty"`

	// holder asset Id
	HolderAssetID UniqueID `json:"holderAssetId,omitempty"`

	// Name of the aspect
	// Example: engine
	// Required: true
	// Pattern: [a-zA-Z0-9_]+
	Name *string `json:"name"`

	// variables
	Variables []*AspectVariable `json:"variables"`
}

// Validate validates this aspect resource
func (m *AspectResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAspectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolderAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectResource) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AspectResource) validateAspectID(formats strfmt.Registry) error {
	if swag.IsZero(m.AspectID) { // not required
		return nil
	}

	if err := m.AspectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aspectId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aspectId")
		}
		return err
	}

	return nil
}

var aspectResourceTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aspectResourceTypeCategoryPropEnum = append(aspectResourceTypeCategoryPropEnum, v)
	}
}

const (

	// AspectResourceCategoryDynamic captures enum value "dynamic"
	AspectResourceCategoryDynamic string = "dynamic"

	// AspectResourceCategoryStatic captures enum value "static"
	AspectResourceCategoryStatic string = "static"
)

// prop value enum
func (m *AspectResource) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aspectResourceTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AspectResource) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *AspectResource) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", m.Description, `[^\']*`); err != nil {
		return err
	}

	return nil
}

func (m *AspectResource) validateHolderAssetID(formats strfmt.Registry) error {
	if swag.IsZero(m.HolderAssetID) { // not required
		return nil
	}

	if err := m.HolderAssetID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("holderAssetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("holderAssetId")
		}
		return err
	}

	return nil
}

func (m *AspectResource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `[a-zA-Z0-9_]+`); err != nil {
		return err
	}

	return nil
}

func (m *AspectResource) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aspect resource based on the context it is used
func (m *AspectResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAspectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHolderAssetID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AspectResource) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *AspectResource) contextValidateAspectID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AspectID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aspectId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aspectId")
		}
		return err
	}

	return nil
}

func (m *AspectResource) contextValidateHolderAssetID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HolderAssetID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("holderAssetId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("holderAssetId")
		}
		return err
	}

	return nil
}

func (m *AspectResource) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Variables); i++ {

		if m.Variables[i] != nil {
			if err := m.Variables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AspectResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AspectResource) UnmarshalBinary(b []byte) error {
	var res AspectResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
