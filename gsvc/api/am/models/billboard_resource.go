// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillboardResource billboard resource
//
// swagger:model BillboardResource
type BillboardResource struct {

	// aspect types
	AspectTypes *BillboardResourceAspectTypes `json:"aspectTypes,omitempty"`

	// asset types
	AssetTypes *BillboardResourceAssetTypes `json:"assetTypes,omitempty"`

	// assets
	Assets *BillboardResourceAssets `json:"assets,omitempty"`

	// files
	Files *BillboardResourceFiles `json:"files,omitempty"`

	// self
	Self *BillboardResourceSelf `json:"self,omitempty"`
}

// Validate validates this billboard resource
func (m *BillboardResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAspectTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResource) validateAspectTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AspectTypes) { // not required
		return nil
	}

	if m.AspectTypes != nil {
		if err := m.AspectTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspectTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspectTypes")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) validateAssetTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetTypes) { // not required
		return nil
	}

	if m.AssetTypes != nil {
		if err := m.AssetTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetTypes")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) validateAssets(formats strfmt.Registry) error {
	if swag.IsZero(m.Assets) { // not required
		return nil
	}

	if m.Assets != nil {
		if err := m.Assets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {
		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this billboard resource based on the context it is used
func (m *BillboardResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAspectTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResource) contextValidateAspectTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.AspectTypes != nil {
		if err := m.AspectTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspectTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspectTypes")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) contextValidateAssetTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetTypes != nil {
		if err := m.AssetTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetTypes")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) contextValidateAssets(ctx context.Context, formats strfmt.Registry) error {

	if m.Assets != nil {
		if err := m.Assets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assets")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	if m.Files != nil {
		if err := m.Files.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *BillboardResource) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResource) UnmarshalBinary(b []byte) error {
	var res BillboardResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BillboardResourceAspectTypes billboard resource aspect types
//
// swagger:model BillboardResourceAspectTypes
type BillboardResourceAspectTypes struct {

	// Link to aspect-types resource
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this billboard resource aspect types
func (m *BillboardResourceAspectTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResourceAspectTypes) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("aspectTypes"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billboard resource aspect types based on context it is used
func (m *BillboardResourceAspectTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResourceAspectTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResourceAspectTypes) UnmarshalBinary(b []byte) error {
	var res BillboardResourceAspectTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BillboardResourceAssetTypes billboard resource asset types
//
// swagger:model BillboardResourceAssetTypes
type BillboardResourceAssetTypes struct {

	// Link to asset-types resource
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this billboard resource asset types
func (m *BillboardResourceAssetTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResourceAssetTypes) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("assetTypes"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billboard resource asset types based on context it is used
func (m *BillboardResourceAssetTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResourceAssetTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResourceAssetTypes) UnmarshalBinary(b []byte) error {
	var res BillboardResourceAssetTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BillboardResourceAssets billboard resource assets
//
// swagger:model BillboardResourceAssets
type BillboardResourceAssets struct {

	// Link to assets resource
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this billboard resource assets
func (m *BillboardResourceAssets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResourceAssets) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("assets"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billboard resource assets based on context it is used
func (m *BillboardResourceAssets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResourceAssets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResourceAssets) UnmarshalBinary(b []byte) error {
	var res BillboardResourceAssets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BillboardResourceFiles billboard resource files
//
// swagger:model BillboardResourceFiles
type BillboardResourceFiles struct {

	// Link to files resource
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this billboard resource files
func (m *BillboardResourceFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResourceFiles) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("files"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billboard resource files based on context it is used
func (m *BillboardResourceFiles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResourceFiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResourceFiles) UnmarshalBinary(b []byte) error {
	var res BillboardResourceFiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BillboardResourceSelf billboard resource self
//
// swagger:model BillboardResourceSelf
type BillboardResourceSelf struct {

	// Link to the billboard url
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this billboard resource self
func (m *BillboardResourceSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillboardResourceSelf) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this billboard resource self based on context it is used
func (m *BillboardResourceSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BillboardResourceSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillboardResourceSelf) UnmarshalBinary(b []byte) error {
	var res BillboardResourceSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
