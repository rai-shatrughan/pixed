// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetLinks asset links
//
// swagger:model AssetLinks
type AssetLinks struct {

	// aspects
	Aspects *AssetLinksAspects `json:"aspects,omitempty"`

	// children
	Children *AssetLinksChildren `json:"children,omitempty"`

	// location
	Location *AssetLinksLocation `json:"location,omitempty"`

	// parent
	Parent *AssetLinksParent `json:"parent,omitempty"`

	// self
	Self *AssetLinksSelf `json:"self,omitempty"`

	// t2 tenant
	T2Tenant *AssetLinksT2Tenant `json:"t2Tenant,omitempty"`

	// variables
	Variables *AssetLinksVariables `json:"variables,omitempty"`
}

// Validate validates this asset links
func (m *AssetLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAspects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT2Tenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinks) validateAspects(formats strfmt.Registry) error {
	if swag.IsZero(m.Aspects) { // not required
		return nil
	}

	if m.Aspects != nil {
		if err := m.Aspects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspects")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateChildren(formats strfmt.Registry) error {
	if swag.IsZero(m.Children) { // not required
		return nil
	}

	if m.Children != nil {
		if err := m.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateT2Tenant(formats strfmt.Registry) error {
	if swag.IsZero(m.T2Tenant) { // not required
		return nil
	}

	if m.T2Tenant != nil {
		if err := m.T2Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("t2Tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("t2Tenant")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	if m.Variables != nil {
		if err := m.Variables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this asset links based on the context it is used
func (m *AssetLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAspects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateT2Tenant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinks) contextValidateAspects(ctx context.Context, formats strfmt.Registry) error {

	if m.Aspects != nil {
		if err := m.Aspects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aspects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aspects")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if m.Children != nil {
		if err := m.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {
		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateT2Tenant(ctx context.Context, formats strfmt.Registry) error {

	if m.T2Tenant != nil {
		if err := m.T2Tenant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("t2Tenant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("t2Tenant")
			}
			return err
		}
	}

	return nil
}

func (m *AssetLinks) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	if m.Variables != nil {
		if err := m.Variables.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variables")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variables")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinks) UnmarshalBinary(b []byte) error {
	var res AssetLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksAspects asset links aspects
//
// swagger:model AssetLinksAspects
type AssetLinksAspects struct {

	// URL to get the aspect structure of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links aspects
func (m *AssetLinksAspects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksAspects) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("aspects"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links aspects based on context it is used
func (m *AssetLinksAspects) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksAspects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksAspects) UnmarshalBinary(b []byte) error {
	var res AssetLinksAspects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksChildren asset links children
//
// swagger:model AssetLinksChildren
type AssetLinksChildren struct {

	// URL to get the children of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links children
func (m *AssetLinksChildren) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksChildren) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("children"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links children based on context it is used
func (m *AssetLinksChildren) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksChildren) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksChildren) UnmarshalBinary(b []byte) error {
	var res AssetLinksChildren
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksLocation asset links location
//
// swagger:model AssetLinksLocation
type AssetLinksLocation struct {

	// URL to update or delete the location of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links location
func (m *AssetLinksLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksLocation) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("location"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links location based on context it is used
func (m *AssetLinksLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksLocation) UnmarshalBinary(b []byte) error {
	var res AssetLinksLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksParent asset links parent
//
// swagger:model AssetLinksParent
type AssetLinksParent struct {

	// URL to get the parent of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links parent
func (m *AssetLinksParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksParent) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("parent"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links parent based on context it is used
func (m *AssetLinksParent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksParent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksParent) UnmarshalBinary(b []byte) error {
	var res AssetLinksParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksSelf asset links self
//
// swagger:model AssetLinksSelf
type AssetLinksSelf struct {

	// URL to get the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links self
func (m *AssetLinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksSelf) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("self"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links self based on context it is used
func (m *AssetLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksSelf) UnmarshalBinary(b []byte) error {
	var res AssetLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksT2Tenant asset links t2 tenant
//
// swagger:model AssetLinksT2Tenant
type AssetLinksT2Tenant struct {

	// URL to get the end-customer of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links t2 tenant
func (m *AssetLinksT2Tenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksT2Tenant) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("t2Tenant"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links t2 tenant based on context it is used
func (m *AssetLinksT2Tenant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksT2Tenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksT2Tenant) UnmarshalBinary(b []byte) error {
	var res AssetLinksT2Tenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetLinksVariables asset links variables
//
// swagger:model AssetLinksVariables
type AssetLinksVariables struct {

	// URL to get the variable definitions of the asset
	// Format: uri
	Href strfmt.URI `json:"href,omitempty"`
}

// Validate validates this asset links variables
func (m *AssetLinksVariables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetLinksVariables) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("variables"+"."+"href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset links variables based on context it is used
func (m *AssetLinksVariables) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetLinksVariables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetLinksVariables) UnmarshalBinary(b []byte) error {
	var res AssetLinksVariables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
