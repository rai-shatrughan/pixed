// Code generated by go-swagger; DO NOT EDIT.

package assettype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/am/models"
)

// UpdateAssetTypeVariableHandlerFunc turns a function with the right signature into a update asset type variable handler
type UpdateAssetTypeVariableHandlerFunc func(UpdateAssetTypeVariableParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateAssetTypeVariableHandlerFunc) Handle(params UpdateAssetTypeVariableParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateAssetTypeVariableHandler interface for that can handle valid update asset type variable params
type UpdateAssetTypeVariableHandler interface {
	Handle(UpdateAssetTypeVariableParams, *models.Principal) middleware.Responder
}

// NewUpdateAssetTypeVariable creates a new http.Handler for the update asset type variable operation
func NewUpdateAssetTypeVariable(ctx *middleware.Context, handler UpdateAssetTypeVariableHandler) *UpdateAssetTypeVariable {
	return &UpdateAssetTypeVariable{Context: ctx, Handler: handler}
}

/*
	UpdateAssetTypeVariable swagger:route PATCH /assettypes/{id}/variables assettype updateAssetTypeVariable

# Update variables from an asset type

Updates an existing variable defined on an asset type. Variables cannot be added or deleted using this operation, for adding or deleting variables use patch/put assettype api. Any variable which is not part of the request will remain unchanged. Variable's Name, Length, Default Value and Unit can be changed. The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased. This operation will increment the asset type etag value.
*/
type UpdateAssetTypeVariable struct {
	Context *middleware.Context
	Handler UpdateAssetTypeVariableHandler
}

func (o *UpdateAssetTypeVariable) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateAssetTypeVariableParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
