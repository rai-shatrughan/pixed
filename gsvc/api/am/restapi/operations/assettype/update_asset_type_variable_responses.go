// Code generated by go-swagger; DO NOT EDIT.

package assettype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"gsvc/api/am/models"
)

// UpdateAssetTypeVariableNoContentCode is the HTTP code returned for type UpdateAssetTypeVariableNoContent
const UpdateAssetTypeVariableNoContentCode int = 204

/*
UpdateAssetTypeVariableNoContent The variable's has been updated

swagger:response updateAssetTypeVariableNoContent
*/
type UpdateAssetTypeVariableNoContent struct {
	/*AssetType ETag value for further updates

	 */
	ETag int64 `json:"ETag"`
}

// NewUpdateAssetTypeVariableNoContent creates UpdateAssetTypeVariableNoContent with default headers values
func NewUpdateAssetTypeVariableNoContent() *UpdateAssetTypeVariableNoContent {

	return &UpdateAssetTypeVariableNoContent{}
}

// WithETag adds the eTag to the update asset type variable no content response
func (o *UpdateAssetTypeVariableNoContent) WithETag(eTag int64) *UpdateAssetTypeVariableNoContent {
	o.ETag = eTag
	return o
}

// SetETag sets the eTag to the update asset type variable no content response
func (o *UpdateAssetTypeVariableNoContent) SetETag(eTag int64) {
	o.ETag = eTag
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header ETag

	eTag := swag.FormatInt64(o.ETag)
	if eTag != "" {
		rw.Header().Set("ETag", eTag)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// UpdateAssetTypeVariableBadRequestCode is the HTTP code returned for type UpdateAssetTypeVariableBadRequest
const UpdateAssetTypeVariableBadRequestCode int = 400

/*
UpdateAssetTypeVariableBadRequest Invalid request

swagger:response updateAssetTypeVariableBadRequest
*/
type UpdateAssetTypeVariableBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariableBadRequest creates UpdateAssetTypeVariableBadRequest with default headers values
func NewUpdateAssetTypeVariableBadRequest() *UpdateAssetTypeVariableBadRequest {

	return &UpdateAssetTypeVariableBadRequest{}
}

// WithPayload adds the payload to the update asset type variable bad request response
func (o *UpdateAssetTypeVariableBadRequest) WithPayload(payload *models.Errors) *UpdateAssetTypeVariableBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable bad request response
func (o *UpdateAssetTypeVariableBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAssetTypeVariableUnauthorizedCode is the HTTP code returned for type UpdateAssetTypeVariableUnauthorized
const UpdateAssetTypeVariableUnauthorizedCode int = 401

/*
UpdateAssetTypeVariableUnauthorized User is not authenticated

swagger:response updateAssetTypeVariableUnauthorized
*/
type UpdateAssetTypeVariableUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariableUnauthorized creates UpdateAssetTypeVariableUnauthorized with default headers values
func NewUpdateAssetTypeVariableUnauthorized() *UpdateAssetTypeVariableUnauthorized {

	return &UpdateAssetTypeVariableUnauthorized{}
}

// WithPayload adds the payload to the update asset type variable unauthorized response
func (o *UpdateAssetTypeVariableUnauthorized) WithPayload(payload *models.Errors) *UpdateAssetTypeVariableUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable unauthorized response
func (o *UpdateAssetTypeVariableUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAssetTypeVariableForbiddenCode is the HTTP code returned for type UpdateAssetTypeVariableForbidden
const UpdateAssetTypeVariableForbiddenCode int = 403

/*
UpdateAssetTypeVariableForbidden User is not authorized for request

swagger:response updateAssetTypeVariableForbidden
*/
type UpdateAssetTypeVariableForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariableForbidden creates UpdateAssetTypeVariableForbidden with default headers values
func NewUpdateAssetTypeVariableForbidden() *UpdateAssetTypeVariableForbidden {

	return &UpdateAssetTypeVariableForbidden{}
}

// WithPayload adds the payload to the update asset type variable forbidden response
func (o *UpdateAssetTypeVariableForbidden) WithPayload(payload *models.Errors) *UpdateAssetTypeVariableForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable forbidden response
func (o *UpdateAssetTypeVariableForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAssetTypeVariableNotFoundCode is the HTTP code returned for type UpdateAssetTypeVariableNotFound
const UpdateAssetTypeVariableNotFoundCode int = 404

/*
UpdateAssetTypeVariableNotFound Variable not found in Asset type

swagger:response updateAssetTypeVariableNotFound
*/
type UpdateAssetTypeVariableNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariableNotFound creates UpdateAssetTypeVariableNotFound with default headers values
func NewUpdateAssetTypeVariableNotFound() *UpdateAssetTypeVariableNotFound {

	return &UpdateAssetTypeVariableNotFound{}
}

// WithPayload adds the payload to the update asset type variable not found response
func (o *UpdateAssetTypeVariableNotFound) WithPayload(payload *models.Errors) *UpdateAssetTypeVariableNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable not found response
func (o *UpdateAssetTypeVariableNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAssetTypeVariablePreconditionFailedCode is the HTTP code returned for type UpdateAssetTypeVariablePreconditionFailed
const UpdateAssetTypeVariablePreconditionFailedCode int = 412

/*
UpdateAssetTypeVariablePreconditionFailed Asset type or the variable has been changed in the background

swagger:response updateAssetTypeVariablePreconditionFailed
*/
type UpdateAssetTypeVariablePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariablePreconditionFailed creates UpdateAssetTypeVariablePreconditionFailed with default headers values
func NewUpdateAssetTypeVariablePreconditionFailed() *UpdateAssetTypeVariablePreconditionFailed {

	return &UpdateAssetTypeVariablePreconditionFailed{}
}

// WithPayload adds the payload to the update asset type variable precondition failed response
func (o *UpdateAssetTypeVariablePreconditionFailed) WithPayload(payload *models.Errors) *UpdateAssetTypeVariablePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable precondition failed response
func (o *UpdateAssetTypeVariablePreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariablePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateAssetTypeVariableInternalServerErrorCode is the HTTP code returned for type UpdateAssetTypeVariableInternalServerError
const UpdateAssetTypeVariableInternalServerErrorCode int = 500

/*
UpdateAssetTypeVariableInternalServerError Server error, for more information see errorcode and message

swagger:response updateAssetTypeVariableInternalServerError
*/
type UpdateAssetTypeVariableInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdateAssetTypeVariableInternalServerError creates UpdateAssetTypeVariableInternalServerError with default headers values
func NewUpdateAssetTypeVariableInternalServerError() *UpdateAssetTypeVariableInternalServerError {

	return &UpdateAssetTypeVariableInternalServerError{}
}

// WithPayload adds the payload to the update asset type variable internal server error response
func (o *UpdateAssetTypeVariableInternalServerError) WithPayload(payload *models.Errors) *UpdateAssetTypeVariableInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update asset type variable internal server error response
func (o *UpdateAssetTypeVariableInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateAssetTypeVariableInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
