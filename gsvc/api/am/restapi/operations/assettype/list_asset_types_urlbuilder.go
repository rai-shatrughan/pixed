// Code generated by go-swagger; DO NOT EDIT.

package assettype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// ListAssetTypesURL generates an URL for the list asset types operation
type ListAssetTypesURL struct {
	Exploded      *bool
	Filter        *string
	IncludeShared *bool
	Page          *int64
	Size          *int64
	Sort          *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListAssetTypesURL) WithBasePath(bp string) *ListAssetTypesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListAssetTypesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ListAssetTypesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/assettypes"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/assetmanagement/v3"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var explodedQ string
	if o.Exploded != nil {
		explodedQ = swag.FormatBool(*o.Exploded)
	}
	if explodedQ != "" {
		qs.Set("exploded", explodedQ)
	}

	var filterQ string
	if o.Filter != nil {
		filterQ = *o.Filter
	}
	if filterQ != "" {
		qs.Set("filter", filterQ)
	}

	var includeSharedQ string
	if o.IncludeShared != nil {
		includeSharedQ = swag.FormatBool(*o.IncludeShared)
	}
	if includeSharedQ != "" {
		qs.Set("includeShared", includeSharedQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var sizeQ string
	if o.Size != nil {
		sizeQ = swag.FormatInt64(*o.Size)
	}
	if sizeQ != "" {
		qs.Set("size", sizeQ)
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ListAssetTypesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ListAssetTypesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ListAssetTypesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ListAssetTypesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ListAssetTypesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ListAssetTypesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
