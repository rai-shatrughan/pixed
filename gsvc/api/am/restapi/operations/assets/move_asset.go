// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/am/models"
)

// MoveAssetHandlerFunc turns a function with the right signature into a move asset handler
type MoveAssetHandlerFunc func(MoveAssetParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn MoveAssetHandlerFunc) Handle(params MoveAssetParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// MoveAssetHandler interface for that can handle valid move asset params
type MoveAssetHandler interface {
	Handle(MoveAssetParams, *models.Principal) middleware.Responder
}

// NewMoveAsset creates a new http.Handler for the move asset operation
func NewMoveAsset(ctx *middleware.Context, handler MoveAssetHandler) *MoveAsset {
	return &MoveAsset{Context: ctx, Handler: handler}
}

/*
	MoveAsset swagger:route POST /assets/{id}/move assets moveAsset

# Move an asset

Moves an asset (and all it's children) in the instance hierarchy
*/
type MoveAsset struct {
	Context *middleware.Context
	Handler MoveAssetHandler
}

func (o *MoveAsset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMoveAssetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
