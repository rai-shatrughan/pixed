// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/am/models"
)

// ReplaceAssetOKCode is the HTTP code returned for type ReplaceAssetOK
const ReplaceAssetOKCode int = 200

/*
ReplaceAssetOK The asset is updated

swagger:response replaceAssetOK
*/
type ReplaceAssetOK struct {

	/*
	  In: Body
	*/
	Payload *models.AssetResourceWithHierarchyPath `json:"body,omitempty"`
}

// NewReplaceAssetOK creates ReplaceAssetOK with default headers values
func NewReplaceAssetOK() *ReplaceAssetOK {

	return &ReplaceAssetOK{}
}

// WithPayload adds the payload to the replace asset o k response
func (o *ReplaceAssetOK) WithPayload(payload *models.AssetResourceWithHierarchyPath) *ReplaceAssetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset o k response
func (o *ReplaceAssetOK) SetPayload(payload *models.AssetResourceWithHierarchyPath) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetBadRequestCode is the HTTP code returned for type ReplaceAssetBadRequest
const ReplaceAssetBadRequestCode int = 400

/*
ReplaceAssetBadRequest Invalid request

swagger:response replaceAssetBadRequest
*/
type ReplaceAssetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetBadRequest creates ReplaceAssetBadRequest with default headers values
func NewReplaceAssetBadRequest() *ReplaceAssetBadRequest {

	return &ReplaceAssetBadRequest{}
}

// WithPayload adds the payload to the replace asset bad request response
func (o *ReplaceAssetBadRequest) WithPayload(payload *models.Errors) *ReplaceAssetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset bad request response
func (o *ReplaceAssetBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetUnauthorizedCode is the HTTP code returned for type ReplaceAssetUnauthorized
const ReplaceAssetUnauthorizedCode int = 401

/*
ReplaceAssetUnauthorized User is not authenticated

swagger:response replaceAssetUnauthorized
*/
type ReplaceAssetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetUnauthorized creates ReplaceAssetUnauthorized with default headers values
func NewReplaceAssetUnauthorized() *ReplaceAssetUnauthorized {

	return &ReplaceAssetUnauthorized{}
}

// WithPayload adds the payload to the replace asset unauthorized response
func (o *ReplaceAssetUnauthorized) WithPayload(payload *models.Errors) *ReplaceAssetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset unauthorized response
func (o *ReplaceAssetUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetForbiddenCode is the HTTP code returned for type ReplaceAssetForbidden
const ReplaceAssetForbiddenCode int = 403

/*
ReplaceAssetForbidden User is not authorized for request

swagger:response replaceAssetForbidden
*/
type ReplaceAssetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetForbidden creates ReplaceAssetForbidden with default headers values
func NewReplaceAssetForbidden() *ReplaceAssetForbidden {

	return &ReplaceAssetForbidden{}
}

// WithPayload adds the payload to the replace asset forbidden response
func (o *ReplaceAssetForbidden) WithPayload(payload *models.Errors) *ReplaceAssetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset forbidden response
func (o *ReplaceAssetForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetNotFoundCode is the HTTP code returned for type ReplaceAssetNotFound
const ReplaceAssetNotFoundCode int = 404

/*
ReplaceAssetNotFound Asset not found

swagger:response replaceAssetNotFound
*/
type ReplaceAssetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetNotFound creates ReplaceAssetNotFound with default headers values
func NewReplaceAssetNotFound() *ReplaceAssetNotFound {

	return &ReplaceAssetNotFound{}
}

// WithPayload adds the payload to the replace asset not found response
func (o *ReplaceAssetNotFound) WithPayload(payload *models.Errors) *ReplaceAssetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset not found response
func (o *ReplaceAssetNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetPreconditionFailedCode is the HTTP code returned for type ReplaceAssetPreconditionFailed
const ReplaceAssetPreconditionFailedCode int = 412

/*
ReplaceAssetPreconditionFailed Asset is changed in the background

swagger:response replaceAssetPreconditionFailed
*/
type ReplaceAssetPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetPreconditionFailed creates ReplaceAssetPreconditionFailed with default headers values
func NewReplaceAssetPreconditionFailed() *ReplaceAssetPreconditionFailed {

	return &ReplaceAssetPreconditionFailed{}
}

// WithPayload adds the payload to the replace asset precondition failed response
func (o *ReplaceAssetPreconditionFailed) WithPayload(payload *models.Errors) *ReplaceAssetPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset precondition failed response
func (o *ReplaceAssetPreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetInternalServerErrorCode is the HTTP code returned for type ReplaceAssetInternalServerError
const ReplaceAssetInternalServerErrorCode int = 500

/*
ReplaceAssetInternalServerError Server error, for more information see errorcode and message

swagger:response replaceAssetInternalServerError
*/
type ReplaceAssetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetInternalServerError creates ReplaceAssetInternalServerError with default headers values
func NewReplaceAssetInternalServerError() *ReplaceAssetInternalServerError {

	return &ReplaceAssetInternalServerError{}
}

// WithPayload adds the payload to the replace asset internal server error response
func (o *ReplaceAssetInternalServerError) WithPayload(payload *models.Errors) *ReplaceAssetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset internal server error response
func (o *ReplaceAssetInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceAssetServiceUnavailableCode is the HTTP code returned for type ReplaceAssetServiceUnavailable
const ReplaceAssetServiceUnavailableCode int = 503

/*
ReplaceAssetServiceUnavailable Service unavailable, for more information see errorcode and message

swagger:response replaceAssetServiceUnavailable
*/
type ReplaceAssetServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceAssetServiceUnavailable creates ReplaceAssetServiceUnavailable with default headers values
func NewReplaceAssetServiceUnavailable() *ReplaceAssetServiceUnavailable {

	return &ReplaceAssetServiceUnavailable{}
}

// WithPayload adds the payload to the replace asset service unavailable response
func (o *ReplaceAssetServiceUnavailable) WithPayload(payload *models.Errors) *ReplaceAssetServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace asset service unavailable response
func (o *ReplaceAssetServiceUnavailable) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAssetServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
