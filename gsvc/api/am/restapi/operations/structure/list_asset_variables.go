// Code generated by go-swagger; DO NOT EDIT.

package structure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/am/models"
)

// ListAssetVariablesHandlerFunc turns a function with the right signature into a list asset variables handler
type ListAssetVariablesHandlerFunc func(ListAssetVariablesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAssetVariablesHandlerFunc) Handle(params ListAssetVariablesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListAssetVariablesHandler interface for that can handle valid list asset variables params
type ListAssetVariablesHandler interface {
	Handle(ListAssetVariablesParams, *models.Principal) middleware.Responder
}

// NewListAssetVariables creates a new http.Handler for the list asset variables operation
func NewListAssetVariables(ctx *middleware.Context, handler ListAssetVariablesHandler) *ListAssetVariables {
	return &ListAssetVariables{Context: ctx, Handler: handler}
}

/*
	ListAssetVariables swagger:route GET /assets/{id}/variables structure listAssetVariables

# Get all variables of an asset

Get all variables of a given asset including inherited ones
*/
type ListAssetVariables struct {
	Context *middleware.Context
	Handler ListAssetVariablesHandler
}

func (o *ListAssetVariables) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListAssetVariablesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
