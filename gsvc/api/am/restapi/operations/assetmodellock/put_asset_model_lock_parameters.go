// Code generated by go-swagger; DO NOT EDIT.

package assetmodellock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPutAssetModelLockParams creates a new PutAssetModelLockParams object
// with the default values initialized.
func NewPutAssetModelLockParams() PutAssetModelLockParams {

	var (
		// initialize parameters with default values

		enabledDefault = bool(false)
	)

	return PutAssetModelLockParams{
		Enabled: enabledDefault,
	}
}

// PutAssetModelLockParams contains all the bound params for the put asset model lock operation
// typically these are obtained from a http.Request
//
// swagger:parameters putAssetModelLock
type PutAssetModelLockParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Lock state of an asset model
	  Required: true
	  In: query
	  Default: false
	*/
	Enabled bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutAssetModelLockParams() beforehand.
func (o *PutAssetModelLockParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEnabled, qhkEnabled, _ := qs.GetOK("enabled")
	if err := o.bindEnabled(qEnabled, qhkEnabled, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEnabled binds and validates parameter Enabled from query.
func (o *PutAssetModelLockParams) bindEnabled(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("enabled", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("enabled", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("enabled", "query", "bool", raw)
	}
	o.Enabled = value

	return nil
}
