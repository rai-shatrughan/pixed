// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/am/models"
)

// GetAspectTypeHandlerFunc turns a function with the right signature into a get aspect type handler
type GetAspectTypeHandlerFunc func(GetAspectTypeParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAspectTypeHandlerFunc) Handle(params GetAspectTypeParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetAspectTypeHandler interface for that can handle valid get aspect type params
type GetAspectTypeHandler interface {
	Handle(GetAspectTypeParams, *models.Principal) middleware.Responder
}

// NewGetAspectType creates a new http.Handler for the get aspect type operation
func NewGetAspectType(ctx *middleware.Context, handler GetAspectTypeHandler) *GetAspectType {
	return &GetAspectType{Context: ctx, Handler: handler}
}

/*
	GetAspectType swagger:route GET /aspecttypes/{id} aspecttype getAspectType

# Read an aspect type

Read an aspect type.
*/
type GetAspectType struct {
	Context *middleware.Context
	Handler GetAspectTypeHandler
}

func (o *GetAspectType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAspectTypeParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
