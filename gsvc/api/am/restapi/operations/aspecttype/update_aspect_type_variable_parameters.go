// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"gsvc/api/am/models"
)

// NewUpdateAspectTypeVariableParams creates a new UpdateAspectTypeVariableParams object
//
// There are no default values defined in the spec.
func NewUpdateAspectTypeVariableParams() UpdateAspectTypeVariableParams {

	return UpdateAspectTypeVariableParams{}
}

// UpdateAspectTypeVariableParams contains all the bound params for the update aspect type variable operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateAspectTypeVariable
type UpdateAspectTypeVariableParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Last known version of asset type to facilitate optimistic locking. Etag from asset type response to be used.
	  Required: true
	  In: header
	*/
	IfMatch string
	/*The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols "A-Z", "a-z", "0-9", "_" and "." beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)
	  Required: true
	  Max Length: 128
	  Min Length: 1
	  Pattern: [A-Za-z0-9_]{1,8}\.[A-Za-z0-9_]+
	  In: path
	*/
	ID string
	/*Variables Dictionary, where variable Name is the key and value is the variable definition object.
	* To update existing variable in aspect type, dictionary should contain key as variable name and value as variable object with details to be updated.
	* To delete variables, key should be name of the variable to be deleted and value should be null.
	* To add new variables, key should be non exisiting variable name and value should be variable definition object.
	  Required: true
	  In: body
	*/
	VariableMap models.AspectVariableUpdateMap
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateAspectTypeVariableParams() beforehand.
func (o *UpdateAspectTypeVariableParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindIfMatch(r.Header[http.CanonicalHeaderKey("If-Match")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.AspectVariableUpdateMap
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("variableMap", "body", ""))
			} else {
				res = append(res, errors.NewParseError("variableMap", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.VariableMap = body
			}
		}
	} else {
		res = append(res, errors.Required("variableMap", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIfMatch binds and validates parameter IfMatch from header.
func (o *UpdateAspectTypeVariableParams) bindIfMatch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("If-Match", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("If-Match", "header", raw); err != nil {
		return err
	}
	o.IfMatch = raw

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *UpdateAspectTypeVariableParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	if err := o.validateID(formats); err != nil {
		return err
	}

	return nil
}

// validateID carries on validations for parameter ID
func (o *UpdateAspectTypeVariableParams) validateID(formats strfmt.Registry) error {

	if err := validate.MinLength("id", "path", o.ID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "path", o.ID, 128); err != nil {
		return err
	}

	if err := validate.Pattern("id", "path", o.ID, `[A-Za-z0-9_]{1,8}\.[A-Za-z0-9_]+`); err != nil {
		return err
	}

	return nil
}
