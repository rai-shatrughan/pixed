// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"gsvc/api/am/models"
)

// UploadFileCreatedCode is the HTTP code returned for type UploadFileCreated
const UploadFileCreatedCode int = 201

/*
UploadFileCreated File has been successfully uploaded

swagger:response uploadFileCreated
*/
type UploadFileCreated struct {
	/*URL of the created resource

	 */
	Location strfmt.URI `json:"Location"`

	/*
	  In: Body
	*/
	Payload *models.FileMetadataResource `json:"body,omitempty"`
}

// NewUploadFileCreated creates UploadFileCreated with default headers values
func NewUploadFileCreated() *UploadFileCreated {

	return &UploadFileCreated{}
}

// WithLocation adds the location to the upload file created response
func (o *UploadFileCreated) WithLocation(location strfmt.URI) *UploadFileCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the upload file created response
func (o *UploadFileCreated) SetLocation(location strfmt.URI) {
	o.Location = location
}

// WithPayload adds the payload to the upload file created response
func (o *UploadFileCreated) WithPayload(payload *models.FileMetadataResource) *UploadFileCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file created response
func (o *UploadFileCreated) SetPayload(payload *models.FileMetadataResource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location.String()
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadFileBadRequestCode is the HTTP code returned for type UploadFileBadRequest
const UploadFileBadRequestCode int = 400

/*
UploadFileBadRequest Invalid request

swagger:response uploadFileBadRequest
*/
type UploadFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUploadFileBadRequest creates UploadFileBadRequest with default headers values
func NewUploadFileBadRequest() *UploadFileBadRequest {

	return &UploadFileBadRequest{}
}

// WithPayload adds the payload to the upload file bad request response
func (o *UploadFileBadRequest) WithPayload(payload *models.Errors) *UploadFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file bad request response
func (o *UploadFileBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadFileUnauthorizedCode is the HTTP code returned for type UploadFileUnauthorized
const UploadFileUnauthorizedCode int = 401

/*
UploadFileUnauthorized User is not authenticated

swagger:response uploadFileUnauthorized
*/
type UploadFileUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUploadFileUnauthorized creates UploadFileUnauthorized with default headers values
func NewUploadFileUnauthorized() *UploadFileUnauthorized {

	return &UploadFileUnauthorized{}
}

// WithPayload adds the payload to the upload file unauthorized response
func (o *UploadFileUnauthorized) WithPayload(payload *models.Errors) *UploadFileUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file unauthorized response
func (o *UploadFileUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadFileForbiddenCode is the HTTP code returned for type UploadFileForbidden
const UploadFileForbiddenCode int = 403

/*
UploadFileForbidden User is not authorized for request

swagger:response uploadFileForbidden
*/
type UploadFileForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUploadFileForbidden creates UploadFileForbidden with default headers values
func NewUploadFileForbidden() *UploadFileForbidden {

	return &UploadFileForbidden{}
}

// WithPayload adds the payload to the upload file forbidden response
func (o *UploadFileForbidden) WithPayload(payload *models.Errors) *UploadFileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file forbidden response
func (o *UploadFileForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UploadFileInternalServerErrorCode is the HTTP code returned for type UploadFileInternalServerError
const UploadFileInternalServerErrorCode int = 500

/*
UploadFileInternalServerError Server error, for more information see errorcode and message

swagger:response uploadFileInternalServerError
*/
type UploadFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUploadFileInternalServerError creates UploadFileInternalServerError with default headers values
func NewUploadFileInternalServerError() *UploadFileInternalServerError {

	return &UploadFileInternalServerError{}
}

// WithPayload adds the payload to the upload file internal server error response
func (o *UploadFileInternalServerError) WithPayload(payload *models.Errors) *UploadFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the upload file internal server error response
func (o *UploadFileInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UploadFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
