// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDownloadFileParams creates a new DownloadFileParams object
//
// There are no default values defined in the spec.
func NewDownloadFileParams() DownloadFileParams {

	return DownloadFileParams{}
}

// DownloadFileParams contains all the bound params for the download file operation
// typically these are obtained from a http.Request
//
// swagger:parameters downloadFile
type DownloadFileParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Unique identifier of the file.
	  Required: true
	  Pattern: [0-9A-F]{32}
	  In: path
	*/
	FileID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDownloadFileParams() beforehand.
func (o *DownloadFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rFileID, rhkFileID, _ := route.Params.GetOK("fileId")
	if err := o.bindFileID(rFileID, rhkFileID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFileID binds and validates parameter FileID from path.
func (o *DownloadFileParams) bindFileID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.FileID = raw

	if err := o.validateFileID(formats); err != nil {
		return err
	}

	return nil
}

// validateFileID carries on validations for parameter FileID
func (o *DownloadFileParams) validateFileID(formats strfmt.Registry) error {

	if err := validate.Pattern("fileId", "path", o.FileID, `[0-9A-F]{32}`); err != nil {
		return err
	}

	return nil
}
