// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/am/models"
)

// DeleteFileNoContentCode is the HTTP code returned for type DeleteFileNoContent
const DeleteFileNoContentCode int = 204

/*
DeleteFileNoContent File has been successfully deleted

swagger:response deleteFileNoContent
*/
type DeleteFileNoContent struct {
}

// NewDeleteFileNoContent creates DeleteFileNoContent with default headers values
func NewDeleteFileNoContent() *DeleteFileNoContent {

	return &DeleteFileNoContent{}
}

// WriteResponse to the client
func (o *DeleteFileNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteFileBadRequestCode is the HTTP code returned for type DeleteFileBadRequest
const DeleteFileBadRequestCode int = 400

/*
DeleteFileBadRequest Invalid request

swagger:response deleteFileBadRequest
*/
type DeleteFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFileBadRequest creates DeleteFileBadRequest with default headers values
func NewDeleteFileBadRequest() *DeleteFileBadRequest {

	return &DeleteFileBadRequest{}
}

// WithPayload adds the payload to the delete file bad request response
func (o *DeleteFileBadRequest) WithPayload(payload *models.Errors) *DeleteFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file bad request response
func (o *DeleteFileBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteFileUnauthorizedCode is the HTTP code returned for type DeleteFileUnauthorized
const DeleteFileUnauthorizedCode int = 401

/*
DeleteFileUnauthorized User is not authenticated

swagger:response deleteFileUnauthorized
*/
type DeleteFileUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFileUnauthorized creates DeleteFileUnauthorized with default headers values
func NewDeleteFileUnauthorized() *DeleteFileUnauthorized {

	return &DeleteFileUnauthorized{}
}

// WithPayload adds the payload to the delete file unauthorized response
func (o *DeleteFileUnauthorized) WithPayload(payload *models.Errors) *DeleteFileUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file unauthorized response
func (o *DeleteFileUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFileUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteFileForbiddenCode is the HTTP code returned for type DeleteFileForbidden
const DeleteFileForbiddenCode int = 403

/*
DeleteFileForbidden User is not authorized for request

swagger:response deleteFileForbidden
*/
type DeleteFileForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFileForbidden creates DeleteFileForbidden with default headers values
func NewDeleteFileForbidden() *DeleteFileForbidden {

	return &DeleteFileForbidden{}
}

// WithPayload adds the payload to the delete file forbidden response
func (o *DeleteFileForbidden) WithPayload(payload *models.Errors) *DeleteFileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file forbidden response
func (o *DeleteFileForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteFileNotFoundCode is the HTTP code returned for type DeleteFileNotFound
const DeleteFileNotFoundCode int = 404

/*
DeleteFileNotFound File not found

swagger:response deleteFileNotFound
*/
type DeleteFileNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFileNotFound creates DeleteFileNotFound with default headers values
func NewDeleteFileNotFound() *DeleteFileNotFound {

	return &DeleteFileNotFound{}
}

// WithPayload adds the payload to the delete file not found response
func (o *DeleteFileNotFound) WithPayload(payload *models.Errors) *DeleteFileNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file not found response
func (o *DeleteFileNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFileNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteFilePreconditionFailedCode is the HTTP code returned for type DeleteFilePreconditionFailed
const DeleteFilePreconditionFailedCode int = 412

/*
DeleteFilePreconditionFailed File changed in the background

swagger:response deleteFilePreconditionFailed
*/
type DeleteFilePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFilePreconditionFailed creates DeleteFilePreconditionFailed with default headers values
func NewDeleteFilePreconditionFailed() *DeleteFilePreconditionFailed {

	return &DeleteFilePreconditionFailed{}
}

// WithPayload adds the payload to the delete file precondition failed response
func (o *DeleteFilePreconditionFailed) WithPayload(payload *models.Errors) *DeleteFilePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file precondition failed response
func (o *DeleteFilePreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFilePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteFileInternalServerErrorCode is the HTTP code returned for type DeleteFileInternalServerError
const DeleteFileInternalServerErrorCode int = 500

/*
DeleteFileInternalServerError Server error, for more information see errorcode and message

swagger:response deleteFileInternalServerError
*/
type DeleteFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDeleteFileInternalServerError creates DeleteFileInternalServerError with default headers values
func NewDeleteFileInternalServerError() *DeleteFileInternalServerError {

	return &DeleteFileInternalServerError{}
}

// WithPayload adds the payload to the delete file internal server error response
func (o *DeleteFileInternalServerError) WithPayload(payload *models.Errors) *DeleteFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete file internal server error response
func (o *DeleteFileInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
