// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplaceFileMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var ReplaceFileMaxParseMemory int64 = 32 << 20

// NewReplaceFileParams creates a new ReplaceFileParams object
// with the default values initialized.
func NewReplaceFileParams() ReplaceFileParams {

	var (
		// initialize parameters with default values

		scopeDefault = string("private")
	)

	return ReplaceFileParams{
		Scope: scopeDefault,
	}
}

// ReplaceFileParams contains all the bound params for the replace file operation
// typically these are obtained from a http.Request
//
// swagger:parameters replaceFile
type ReplaceFileParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Last known version to facilitate optimistic locking
	  Required: true
	  In: header
	*/
	IfMatch string
	/*The description of the file
	  Max Length: 255
	  In: formData
	*/
	Description *string
	/*The file to upload. The file size cannot be more than 5 MB.
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*Unique identifier of the file.
	  Required: true
	  Pattern: [0-9A-F]{32}
	  In: path
	*/
	FileID string
	/*The name of the file
	  Required: true
	  Max Length: 255
	  Pattern: ^[^*&%\s\/\\]+$
	  In: formData
	*/
	Name string
	/*The scope of the file
	  Required: true
	  In: formData
	  Default: "private"
	*/
	Scope string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewReplaceFileParams() beforehand.
func (o *ReplaceFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(ReplaceFileMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	if err := o.bindIfMatch(r.Header[http.CanonicalHeaderKey("If-Match")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	rFileID, rhkFileID, _ := route.Params.GetOK("fileId")
	if err := o.bindFileID(rFileID, rhkFileID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIfMatch binds and validates parameter IfMatch from header.
func (o *ReplaceFileParams) bindIfMatch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("If-Match", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("If-Match", "header", raw); err != nil {
		return err
	}
	o.IfMatch = raw

	return nil
}

// bindDescription binds and validates parameter Description from formData.
func (o *ReplaceFileParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Description = &raw

	if err := o.validateDescription(formats); err != nil {
		return err
	}

	return nil
}

// validateDescription carries on validations for parameter Description
func (o *ReplaceFileParams) validateDescription(formats strfmt.Registry) error {

	if err := validate.MaxLength("description", "formData", *o.Description, 255); err != nil {
		return err
	}

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *ReplaceFileParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindFileID binds and validates parameter FileID from path.
func (o *ReplaceFileParams) bindFileID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.FileID = raw

	if err := o.validateFileID(formats); err != nil {
		return err
	}

	return nil
}

// validateFileID carries on validations for parameter FileID
func (o *ReplaceFileParams) validateFileID(formats strfmt.Registry) error {

	if err := validate.Pattern("fileId", "path", o.FileID, `[0-9A-F]{32}`); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *ReplaceFileParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}
	o.Name = raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

// validateName carries on validations for parameter Name
func (o *ReplaceFileParams) validateName(formats strfmt.Registry) error {

	if err := validate.MaxLength("name", "formData", o.Name, 255); err != nil {
		return err
	}

	if err := validate.Pattern("name", "formData", o.Name, `^[^*&%\s\/\\]+$`); err != nil {
		return err
	}

	return nil
}

// bindScope binds and validates parameter Scope from formData.
func (o *ReplaceFileParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scope", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("scope", "formData", raw); err != nil {
		return err
	}
	o.Scope = raw

	if err := o.validateScope(formats); err != nil {
		return err
	}

	return nil
}

// validateScope carries on validations for parameter Scope
func (o *ReplaceFileParams) validateScope(formats strfmt.Registry) error {

	if err := validate.EnumCase("scope", "formData", o.Scope, []interface{}{"public", "private"}, true); err != nil {
		return err
	}

	return nil
}
