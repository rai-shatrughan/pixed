// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/am/models"
)

// ReplaceFileOKCode is the HTTP code returned for type ReplaceFileOK
const ReplaceFileOKCode int = 200

/*
ReplaceFileOK File has been successfully updated

swagger:response replaceFileOK
*/
type ReplaceFileOK struct {

	/*
	  In: Body
	*/
	Payload *models.FileMetadataResource `json:"body,omitempty"`
}

// NewReplaceFileOK creates ReplaceFileOK with default headers values
func NewReplaceFileOK() *ReplaceFileOK {

	return &ReplaceFileOK{}
}

// WithPayload adds the payload to the replace file o k response
func (o *ReplaceFileOK) WithPayload(payload *models.FileMetadataResource) *ReplaceFileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file o k response
func (o *ReplaceFileOK) SetPayload(payload *models.FileMetadataResource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFileBadRequestCode is the HTTP code returned for type ReplaceFileBadRequest
const ReplaceFileBadRequestCode int = 400

/*
ReplaceFileBadRequest Invalid request

swagger:response replaceFileBadRequest
*/
type ReplaceFileBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFileBadRequest creates ReplaceFileBadRequest with default headers values
func NewReplaceFileBadRequest() *ReplaceFileBadRequest {

	return &ReplaceFileBadRequest{}
}

// WithPayload adds the payload to the replace file bad request response
func (o *ReplaceFileBadRequest) WithPayload(payload *models.Errors) *ReplaceFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file bad request response
func (o *ReplaceFileBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFileUnauthorizedCode is the HTTP code returned for type ReplaceFileUnauthorized
const ReplaceFileUnauthorizedCode int = 401

/*
ReplaceFileUnauthorized User is not authenticated

swagger:response replaceFileUnauthorized
*/
type ReplaceFileUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFileUnauthorized creates ReplaceFileUnauthorized with default headers values
func NewReplaceFileUnauthorized() *ReplaceFileUnauthorized {

	return &ReplaceFileUnauthorized{}
}

// WithPayload adds the payload to the replace file unauthorized response
func (o *ReplaceFileUnauthorized) WithPayload(payload *models.Errors) *ReplaceFileUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file unauthorized response
func (o *ReplaceFileUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFileForbiddenCode is the HTTP code returned for type ReplaceFileForbidden
const ReplaceFileForbiddenCode int = 403

/*
ReplaceFileForbidden User is not authorized for request

swagger:response replaceFileForbidden
*/
type ReplaceFileForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFileForbidden creates ReplaceFileForbidden with default headers values
func NewReplaceFileForbidden() *ReplaceFileForbidden {

	return &ReplaceFileForbidden{}
}

// WithPayload adds the payload to the replace file forbidden response
func (o *ReplaceFileForbidden) WithPayload(payload *models.Errors) *ReplaceFileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file forbidden response
func (o *ReplaceFileForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFileNotFoundCode is the HTTP code returned for type ReplaceFileNotFound
const ReplaceFileNotFoundCode int = 404

/*
ReplaceFileNotFound File not found

swagger:response replaceFileNotFound
*/
type ReplaceFileNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFileNotFound creates ReplaceFileNotFound with default headers values
func NewReplaceFileNotFound() *ReplaceFileNotFound {

	return &ReplaceFileNotFound{}
}

// WithPayload adds the payload to the replace file not found response
func (o *ReplaceFileNotFound) WithPayload(payload *models.Errors) *ReplaceFileNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file not found response
func (o *ReplaceFileNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFilePreconditionFailedCode is the HTTP code returned for type ReplaceFilePreconditionFailed
const ReplaceFilePreconditionFailedCode int = 412

/*
ReplaceFilePreconditionFailed File is changed in the background

swagger:response replaceFilePreconditionFailed
*/
type ReplaceFilePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFilePreconditionFailed creates ReplaceFilePreconditionFailed with default headers values
func NewReplaceFilePreconditionFailed() *ReplaceFilePreconditionFailed {

	return &ReplaceFilePreconditionFailed{}
}

// WithPayload adds the payload to the replace file precondition failed response
func (o *ReplaceFilePreconditionFailed) WithPayload(payload *models.Errors) *ReplaceFilePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file precondition failed response
func (o *ReplaceFilePreconditionFailed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFilePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceFileInternalServerErrorCode is the HTTP code returned for type ReplaceFileInternalServerError
const ReplaceFileInternalServerErrorCode int = 500

/*
ReplaceFileInternalServerError Server error, for more information see errorcode and message

swagger:response replaceFileInternalServerError
*/
type ReplaceFileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewReplaceFileInternalServerError creates ReplaceFileInternalServerError with default headers values
func NewReplaceFileInternalServerError() *ReplaceFileInternalServerError {

	return &ReplaceFileInternalServerError{}
}

// WithPayload adds the payload to the replace file internal server error response
func (o *ReplaceFileInternalServerError) WithPayload(payload *models.Errors) *ReplaceFileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace file internal server error response
func (o *ReplaceFileInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceFileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
