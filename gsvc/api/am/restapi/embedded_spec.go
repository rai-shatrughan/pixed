// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/hal+json",
    "application/vnd.error+json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service for configuring, reading and managing assets, asset types and aspect types.",
    "title": "Asset Management API",
    "version": "3.18.3",
    "x-visibility": "external"
  },
  "basePath": "/api/assetmanagement/v3",
  "paths": {
    "/": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "List all links for available resources",
        "tags": [
          "billboard"
        ],
        "summary": "List all links for available resources",
        "operationId": "getBillboard",
        "responses": {
          "200": {
            "description": "Array of links to available resources",
            "schema": {
              "$ref": "#/definitions/BillboardResource"
            }
          }
        }
      }
    },
    "/aspecttypes": {
      "get": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all aspect types",
        "tags": [
          "aspecttype"
        ],
        "summary": "List all aspect types",
        "operationId": "listAspectTypes",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of aspect types matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AspectTypeListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Shallow ETag of the resource"
              }
            }
          },
          "304": {
            "description": "Aspect-types page not changed"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/aspecttypes/{id}": {
      "get": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Read an aspect type.",
        "tags": [
          "aspecttype"
        ],
        "summary": "Read an aspect type",
        "operationId": "getAspectType",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the aspect type",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "304": {
            "description": "AspectType not changed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Create or Update an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable, use PATCH /aspecttypes/{id}/variables api. Default value field is available only for static aspect variables and not on dynamic aspect variable. Aspect type description should not contain single quote character.\n",
        "tags": [
          "aspecttype"
        ],
        "summary": "Create or Update an aspect type",
        "operationId": "saveAspectType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "$ref": "#/parameters/ifNoneMatchStar"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "aspect type",
            "name": "aspecttype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AspectType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The aspect type has been updated",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "201": {
            "description": "The aspect type has been created",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.d"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Delete an aspect type. Aspect type can only be deleted if there is no asset type using it.",
        "tags": [
          "aspecttype"
        ],
        "summary": "Delete aspect type",
        "operationId": "deleteAspectType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "204": {
            "description": "Aspect type deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Patch an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable use PATCH /aspecttypes/{id}/variables api. Conforms to RFC 7396 - JSON merge Patch.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "aspecttype"
        ],
        "summary": "Patch an aspect type",
        "operationId": "updateAspectType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "aspect type",
            "name": "aspecttype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AspectTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The aspect type has been updated",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/aspecttypes/{id}/variables": {
      "patch": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Updates an existing variable defined on an aspect type. Variables can be added, deleted and updated using this operation. Any variable which is not part of the request will remain unchanged. All variable names must be unique in a aspect type. This operation will increment the aspect type etag value.\n\n\u003cb\u003eFollowing are the updates allowed on existing variables\u003c/b\u003e\n* Variable's Name, Length, Default Value and Unit can be changed.\n* The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated.\n* The length can only be increased of a string variable and it cannot be decreased.\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "aspecttype"
        ],
        "summary": "patch aspect type variables",
        "operationId": "updateAspectTypeVariable",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchVariable"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "description": "Variables Dictionary, where variable Name is the key and value is the variable definition object.\n* To update existing variable in aspect type, dictionary should contain key as variable name and value as variable object with details to be updated.\n* To delete variables, key should be name of the variable to be deleted and value should be null.\n* To add new variables, key should be non exisiting variable name and value should be variable definition object.",
            "name": "variableMap",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/aspectVariableUpdateMap"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The variable's has been updated",
            "headers": {
              "ETag": {
                "type": "integer",
                "description": "AspectType ETag value for further updates"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Variable not found in Asset type",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Aspect type or the variable has been changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all assets available for the authenticated user. ## Filter Supports all basic fields and the 'hasType' filter which search for the assets with type that originated from the given asset type. # Examples Example: This filter searches for assets which type is exactly the given type: ` + "`" + `` + "`" + `` + "`" + ` { \"typeId\": \"mandal.ship\" } ` + "`" + `` + "`" + `` + "`" + ` Beyond the basic fields we can search for assets which type is inherited from the given type: ` + "`" + `` + "`" + `` + "`" + ` { \"hasType\": \"mandal.ship\" } ` + "`" + `` + "`" + `` + "`" + `\n",
        "tags": [
          "assets"
        ],
        "summary": "List all available assets",
        "operationId": "listAssets",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "$ref": "#/parameters/basicFieldsOnly"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of assets matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AssetListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The hash of the response's content"
              }
            }
          },
          "304": {
            "description": "The answer's content has not changed since the last request"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "asset": [
              "asm.c",
              "asm.h.w",
              "asm.rh.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          },
          {
            "file": [
              "asm.fa.w"
            ]
          }
        ],
        "description": "Creates a new asset with the provided content. Only instantiable types could be used.",
        "tags": [
          "assets"
        ],
        "summary": "Create an asset",
        "operationId": "addAsset",
        "parameters": [
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The asset is created",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/root": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Read the root asset of the user, from which the whole asset hierarchy can be rebuilt.",
        "tags": [
          "assets"
        ],
        "summary": "Returns the root asset of the user.",
        "operationId": "getRootAsset",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the root asset of the user.",
            "schema": {
              "$ref": "#/definitions/RootAssetResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource asset is not modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Read a single asset. All static properties of asset are returned.",
        "tags": [
          "assets"
        ],
        "summary": "Returns an asset.",
        "operationId": "getAsset",
        "parameters": [
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an asset with its static properties.",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource asset is not modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "asset": [
              "asm.u",
              "asm.h.w",
              "asm.rh.w"
            ]
          },
          {
            "file": [
              "asm.fa.w",
              "asm.fa.d"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          }
        ],
        "description": "Updates an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type",
        "tags": [
          "assets"
        ],
        "summary": "Update an asset",
        "operationId": "replaceAsset",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.d",
              "asm.h.d",
              "asm.rh.d"
            ]
          }
        ],
        "description": "Deletes the given asset. It's not possible to delete an asset if it has children.",
        "tags": [
          "assets"
        ],
        "summary": "Delete an asset",
        "operationId": "deleteAsset",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "204": {
            "description": "Asset deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "asset": [
              "asm.u",
              "asm.h.w",
              "asm.rh.w"
            ]
          },
          {
            "file": [
              "asm.fa.w",
              "asm.fa.d"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          }
        ],
        "description": "Patch an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type. Conforms to RFC 7396 - JSON merge Patch.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Patch an asset",
        "operationId": "updateAsset",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetUpdatePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/aspects": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Get all static and dynamic aspects of a given asset\n",
        "tags": [
          "structure"
        ],
        "summary": "Get all aspects of an asset",
        "operationId": "listAssetAspects",
        "parameters": [
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Static and dynamic aspects of the given asset matched by the given filter criterias",
            "schema": {
              "$ref": "#/definitions/AspectListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource aspects have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/fileAssignments/{key}": {
      "put": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "file": [
              "asm.fa.w"
            ]
          }
        ],
        "description": "Save a file assignment to a given asset\n",
        "tags": [
          "assets"
        ],
        "summary": "Save an file assignment to an asset",
        "operationId": "saveAssetFileAssignment",
        "parameters": [
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/fileKey"
          },
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "Data for file assignment",
            "name": "assignment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyedFileAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been updated or a new assignment has been added",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "asm.fa.d"
            ]
          }
        ],
        "description": "Deletes a file assignment from an asset. If the asset's parent type has defined a file with the same key, the key will be displayed with the inherited value.\n",
        "tags": [
          "assets"
        ],
        "summary": "Deletes a file assignment from an asset",
        "operationId": "deleteAssetFileAssigment",
        "parameters": [
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/fileKey"
          },
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been deleted",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset or key not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/location": {
      "put": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "* If the given asset has own location, this endpoint will update that location. * If the given asset has no location, this endpoint will create a new location and update the given asset. * If the given asset has inherited location, this endpoint will create a new location and update the given asset. If you wanted to update the inherited location you have to use the 'location' url in AssetResource object (with PUT method).\n",
        "tags": [
          "locations"
        ],
        "summary": "Create or Update location assigned to given asset",
        "operationId": "saveAssetLocation",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "location",
            "name": "location",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location has been successfully created or updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found with given asset identifier",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Location is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "location": [
              "asm.loc.d"
            ]
          }
        ],
        "description": "* Only those locations can be deleted here which assigned to the given asset. * If the location inherited from an ancestor asset, you have to delete the location with the assigned assetId (using ‘location’ url in AssetResource object with DELETE method). * The response contains the updated AssetResource with the inherited Location details.\n",
        "tags": [
          "locations"
        ],
        "summary": "Delete location assigned to given asset.",
        "operationId": "deleteAssetLocation",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Location has been successfully deleted",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found with given asset identifier",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "409": {
            "description": "Location not assigned to the given asset",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/move": {
      "post": {
        "security": [
          {
            "asset": [
              "asm.r",
              "asm.m",
              "asm.h.w"
            ]
          }
        ],
        "description": "Moves an asset (and all it's children) in the instance hierarchy",
        "tags": [
          "assets"
        ],
        "summary": "Move an asset",
        "operationId": "moveAsset",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "parameters for the asset move",
            "name": "moveParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is moved",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/variables": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Get all variables of a given asset including inherited ones\n",
        "tags": [
          "structure"
        ],
        "summary": "Get all variables of an asset",
        "operationId": "listAssetVariables",
        "parameters": [
          {
            "$ref": "#/parameters/uniqueId"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Variables of the given asset matched by the given filter criterias",
            "schema": {
              "$ref": "#/definitions/VariableListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource variables have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all asset types",
        "tags": [
          "assettype"
        ],
        "summary": "List all asset types",
        "operationId": "listAssetTypes",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/exploded"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of asset types matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AssetTypeListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Shallow ETag of the resource"
              }
            }
          },
          "304": {
            "description": "Asset-types page not changed"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Read an asset type",
        "tags": [
          "assettype"
        ],
        "summary": "Read an asset type",
        "operationId": "getAssetType",
        "parameters": [
          {
            "$ref": "#/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/exploded"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the asset type",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "304": {
            "description": "AssetType not changed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "file": [
              "atm.fa.w",
              "atm.fa.d"
            ]
          }
        ],
        "description": "Create or Update an asset type. Complete asset type model payload should be provided in request.\n\n \u003cb\u003e Following are the updates allowed\u003c/b\u003e\n\n* Asset type description can be updated.\n* Asset type variable's can be created, updated and removed. Varaible length, default Value and Unit can be changed. The unit changes from the API does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased.\n* File assignments can be updated and removed.\n\n* Aspects can be created, updated and removed, please refer sample payloads below\n\n  * Create aspect\n        {\n          \"name\": \"leftWing\",\n          \"aspectTypeId\": \"mdsp.wing\"\n        }\n  * Update aspect \u003cb\u003e\u003cu\u003easpectId should be provided in payload\u003c/u\u003e\u003c/b\u003e (only name can be updated)\n      {\n             \"name\": \"rightWing\",\n             \"aspectId\": \"b9cbfc7073be4530887cdb1e71c932b8\",\n             \"aspectTypeId\": \"mdsp.wing\"\n       }\n  * To delete an aspect, aspect should not be part of aspects payload\n",
        "tags": [
          "assettype"
        ],
        "summary": "Create or Update an asset type",
        "operationId": "saveAssetType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatch"
          },
          {
            "$ref": "#/parameters/ifNoneMatchStar"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/exploded"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "asset type",
            "name": "assettype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset type has been updated",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "201": {
            "description": "The asset type has been created",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "assettype": [
              "atm.d"
            ]
          }
        ],
        "description": "Deletes an asset type. Deletion only possible when the type has no child-type and there is no asset that instantiate it.",
        "tags": [
          "assettype"
        ],
        "summary": "Delete an asset type",
        "operationId": "deleteAssetType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "204": {
            "description": "Asset type deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "file": [
              "atm.fa.w",
              "atm.fa.d"
            ]
          }
        ],
        "description": "Patch an asset type. Conforms to RFC 7396 - JSON merge Patch.\n\u003cb\u003e Following are the updates allowed\u003c/b\u003e\n* Asset type description can be updated.\n* Asset type variable's can be created, updated and removed. Varaible length, default Value and Unit can be changed. The unit changes from the API does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased.\n* File assignments can be updated and removed.\n\n* Aspects can be created, updated and removed, please refer sample payloads below\n\n  * Create aspect\n        {\n          \"name\": \"leftWing\",\n          \"aspectTypeId\": \"mdsp.wing\"\n        }\n  * Update aspect, \u003cb\u003e\u003cu\u003easpectId should be provided in payload\u003c/u\u003e\u003c/b\u003e (only name can be updated)\n      {\n             \"name\": \"rightWing\",\n             \"aspectId\": \"b9cbfc7073be4530887cdb1e71c932b8\",\n             \"aspectTypeId\": \"mdsp.wing\"\n       }\n  * To delete an aspect, aspect should not be part of aspects payload\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assettype"
        ],
        "summary": "Patch an asset type",
        "operationId": "updateAssetType",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/exploded"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "asset type",
            "name": "assettype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset type has been updated",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AssetType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}/fileAssignments/{key}": {
      "put": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "atm.fa.w"
            ]
          }
        ],
        "description": "Add a new file assignment to a given asset type. All asset which extends these types will have its file by default.\n",
        "tags": [
          "assettype"
        ],
        "summary": "Add a new file assignment to an asset type",
        "operationId": "saveAssetTypeFileAssignment",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/fileKey"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "Data for file assignment",
            "name": "assignment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyedFileAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been updated or a new assignment has been added",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset type not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "atm.fa.d"
            ]
          }
        ],
        "description": "Deletes a file assignment from an asset type. If the type's parent has defined a file with the same key, the key will be displayed with the inherited value.\n",
        "tags": [
          "assettype"
        ],
        "summary": "Deletes a file assignment from an asset type",
        "operationId": "deleteAssetTypeFileAssignment",
        "parameters": [
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/fileKey"
          },
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/includeShared"
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been deleted",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset type or key not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}/variables": {
      "patch": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          }
        ],
        "description": "Updates an existing variable defined on an asset type. Variables cannot be added or deleted using this operation, for adding or deleting variables use patch/put assettype api. Any variable which is not part of the request will remain unchanged. Variable's Name, Length, Default Value and Unit can be changed. The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased. This operation will increment the asset type etag value.\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assettype"
        ],
        "summary": "Update variables from an asset type",
        "operationId": "updateAssetTypeVariable",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchVariable"
          },
          {
            "$ref": "#/parameters/TypeId"
          },
          {
            "$ref": "#/parameters/includeShared"
          },
          {
            "description": "Variables Dictionary, Variable Name is the key and value are the parameters to be updated of the variable.",
            "name": "variableMap",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableUpdateMap"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The variable's has been updated",
            "headers": {
              "ETag": {
                "type": "integer",
                "description": "AssetType ETag value for further updates"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Variable not found in Asset type",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the variable has been changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns all visible file metadata for the tenant. Will NOT return the files.\n",
        "tags": [
          "files"
        ],
        "summary": "Get metadata of uploaded files.",
        "operationId": "listFiles",
        "parameters": [
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/size"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/filter"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata of files visible for the tenant",
            "schema": {
              "$ref": "#/definitions/FileMetadataListResource"
            }
          },
          "304": {
            "description": "Resource have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "file": [
              "asm.f.w"
            ]
          }
        ],
        "description": "* Uploaded files are only visible for the uploader tenant.\n* Max file size is 5 MB.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "files"
        ],
        "summary": "Upload files to be used in Asset Management.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "type": "file",
            "format": "binary",
            "description": "The file to upload. The file size cannot be more than 5 MB.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "pattern": "^[^*\u0026%\\s\\/\\\\]+$",
            "type": "string",
            "description": "The name of the file",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "public",
              "private"
            ],
            "type": "string",
            "default": "private",
            "description": "The scope of the file",
            "name": "scope",
            "in": "formData"
          },
          {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the file",
            "name": "description",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "File has been successfully uploaded",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns a file's metadata by its id\n",
        "tags": [
          "files"
        ],
        "summary": "Returns a file's metadata by its id",
        "operationId": "getFile",
        "parameters": [
          {
            "$ref": "#/parameters/fileId"
          },
          {
            "$ref": "#/parameters/ifNoneMatch"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file's metadata",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            }
          },
          "304": {
            "description": "Resource have not been modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "file": [
              "asm.f.w"
            ]
          }
        ],
        "description": "Update a previously uploaded file\n* Max file size is 5 MB.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "files"
        ],
        "summary": "Update a file",
        "operationId": "replaceFile",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/fileId"
          },
          {
            "type": "file",
            "format": "binary",
            "description": "The file to upload. The file size cannot be more than 5 MB.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "pattern": "^[^*\u0026%\\s\\/\\\\]+$",
            "type": "string",
            "description": "The name of the file",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "public",
              "private"
            ],
            "type": "string",
            "default": "private",
            "description": "The scope of the file",
            "name": "scope",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the file",
            "name": "description",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "File has been successfully updated",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "File is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "file": [
              "asm.f.d"
            ]
          }
        ],
        "description": "* Deletion is blocked if there are any file assignment with the given fileId.\n",
        "tags": [
          "files"
        ],
        "summary": "Delete a file.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "$ref": "#/parameters/ifMatchMandatory"
          },
          {
            "$ref": "#/parameters/fileId"
          }
        ],
        "responses": {
          "204": {
            "description": "File has been successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "File changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files/{fileId}/file": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns a file by its id\n",
        "produces": [
          "application/base64",
          "application/octet-stream",
          "application/vnd.error+json"
        ],
        "tags": [
          "files"
        ],
        "summary": "Returns a file by its id",
        "operationId": "downloadFile",
        "parameters": [
          {
            "$ref": "#/parameters/fileId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file",
            "schema": {
              "description": "The requested file as a base64 encoded string or an octet-stream",
              "type": "string",
              "format": "binary",
              "example": "QW4gZXhhbXBsZSBmaWxl"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "format": "Media type",
                "description": "The uploaded file resource's media type"
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "406": {
            "description": "The resource cannot be represented in the format that would be acceptable to the user agent",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/model/lock": {
      "get": {
        "security": [
          {
            "assetmodel": [
              "aml.r"
            ]
          }
        ],
        "description": "Provides lock state of an asset model at tenant level.",
        "tags": [
          "assetmodellock"
        ],
        "summary": "Returns lock state of an asset model.",
        "operationId": "getAssetModelLock",
        "responses": {
          "200": {
            "description": "Returns lock state of an asset model and associated jobs.",
            "schema": {
              "$ref": "#/definitions/AssetModelLock"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "assetmodel": [
              "aml.w"
            ]
          }
        ],
        "description": "Enable/disable lock state of asset model at tenant level, managing restrictions on update/delete operations on assettypes and aspecttypes.",
        "tags": [
          "assetmodellock"
        ],
        "summary": "Enable/disable lock state of an asset model.",
        "operationId": "putAssetModelLock",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Lock state of an asset model",
            "name": "enabled",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns lock state of an asset model applied on a tenant.",
            "schema": {
              "$ref": "#/definitions/ModelLock"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Aspect": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "astroDroid"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AspectId": {
      "description": "Aspect id is an internal id of an aspect associated with an asset type.",
      "type": "string",
      "example": "b9cbfc7073be4530887cdb1e71c932b8"
    },
    "AspectLinks": {
      "type": "object",
      "properties": {
        "aspectType": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the origin aspect type of the aspect",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "asset": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the aspect",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "AspectListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "aspects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AspectResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AspectResource": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/AspectLinks"
        },
        "aspectId": {
          "$ref": "#/definitions/AspectId"
        },
        "aspectTypeId": {
          "description": "ID of the Aspect type",
          "type": "string",
          "example": "tenant.asp.engine"
        },
        "category": {
          "type": "string",
          "enum": [
            "dynamic",
            "static"
          ]
        },
        "description": {
          "description": "The description of the aspect",
          "type": "string",
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "holderAssetId": {
          "$ref": "#/definitions/uniqueId"
        },
        "name": {
          "description": "Name of the aspect",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectType": {
      "type": "object",
      "required": [
        "name",
        "category",
        "scope",
        "variables"
      ],
      "properties": {
        "category": {
          "description": "If the aspect-type is used for static data or time-series. Cannot be changed once the aspect-type is created.",
          "type": "string",
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "description": {
          "description": "The description of the aspect type",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "name": {
          "description": "Name of the aspect type. It has to be unique inside the tenant and cannot be changed later.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "scope": {
          "description": "Visibility of aspecttype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types can be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "variables": {
          "description": "Variables of the aspect-type. Variable names should be unique inside an aspect-type.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectTypeId": {
      "description": "The aspect type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id). Once set cannot be changed.",
      "type": "string",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "example": "mdsp.wing"
    },
    "AspectTypeLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "AspectTypeListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "aspectTypes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AspectTypeResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AspectTypePatch": {
      "type": "object",
      "properties": {
        "category": {
          "description": "If the aspect-type is used for static data or time-series. Cannot be changed once the aspect-type is created.",
          "type": "string",
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "description": {
          "description": "The description of the aspect type",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "name": {
          "description": "Name of the aspect type. It has to be unique inside the tenant and cannot be changed later.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "scope": {
          "description": "Visibility of aspecttype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types can be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "variables": {
          "description": "Variables of the aspect-type. Variable names should be unique inside an aspect-type.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectTypeResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AspectType"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AspectTypeLinks"
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "id": {
              "$ref": "#/definitions/AspectTypeId"
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            }
          }
        }
      ]
    },
    "AspectVariable": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableDefinition"
        },
        {
          "properties": {
            "qualityCode": {
              "description": "Indicates whether the variable has quality code. Cannot be changed.",
              "type": "boolean",
              "default": false,
              "example": true
            }
          }
        }
      ]
    },
    "Asset": {
      "type": "object",
      "required": [
        "typeId",
        "parentId"
      ],
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "parentId": {
          "$ref": "#/definitions/uniqueId"
        },
        "timezone": {
          "$ref": "#/definitions/timezone"
        },
        "twinType": {
          "$ref": "#/definitions/twinType"
        },
        "typeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AssetLinks": {
      "type": "object",
      "properties": {
        "aspects": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the aspect structure of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "children": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the children of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "location": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to update or delete the location of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "parent": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the parent of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "t2Tenant": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the end-customer of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "variables": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the variable definitions of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "AssetListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AssetModelLock": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/enabled"
        },
        "jobs": {
          "$ref": "#/definitions/jobs"
        }
      }
    },
    "AssetMove": {
      "type": "object",
      "required": [
        "newParentId"
      ],
      "properties": {
        "newParentId": {
          "$ref": "#/definitions/uniqueId"
        }
      }
    },
    "AssetResource": {
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AssetLinks"
            },
            "assetId": {
              "$ref": "#/definitions/uniqueId"
            },
            "deleted": {
              "type": "string",
              "format": "date-time"
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "locks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockResource"
              }
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "subTenant": {
              "description": "The id of the end-customer.",
              "type": "string",
              "maxLength": 255,
              "example": "UnkarPlutt Inc."
            },
            "t2Tenant": {
              "description": "The id of the end-customer. This field is DEPRECATED please use subTenant instead.",
              "type": "string",
              "maxLength": 255,
              "example": "DEPRECATED: use subTenant instead"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            }
          }
        }
      ]
    },
    "AssetResourceWithHierarchyPath": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        },
        {
          "properties": {
            "hierarchyPath": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "assetId": {
                    "$ref": "#/definitions/uniqueId"
                  },
                  "name": {
                    "description": "Name of the asset",
                    "type": "string",
                    "example": "Millenium Falcon's parent"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "AssetType": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBase"
        },
        {
          "properties": {
            "aspects": {
              "description": "Aspects of the asset-type.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "aspectTypeId"
                ],
                "properties": {
                  "aspectId": {
                    "$ref": "#/definitions/AspectId"
                  },
                  "aspectTypeId": {
                    "$ref": "#/definitions/AspectTypeId"
                  },
                  "name": {
                    "description": "Name of the aspect. It has to be unique inside the type-family (ancestors and descendants). Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as aspect names.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_]+",
                    "example": "leftWing"
                  }
                }
              }
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignment"
              }
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        }
      ]
    },
    "AssetTypeBase": {
      "type": "object",
      "required": [
        "name",
        "parentTypeId"
      ],
      "properties": {
        "description": {
          "description": "description",
          "type": "string",
          "maxLength": 255,
          "example": "Hyperspace jump capable space ship"
        },
        "instantiable": {
          "description": "If instances can be created from this type. A non-instantiable type could be changed to be instantiable but not the other way around.",
          "type": "boolean",
          "default": true,
          "example": true
        },
        "name": {
          "description": "The type's name.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[\\p{L}_0-9_\\. ]+",
          "example": "X_Wing"
        },
        "parentTypeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "scope": {
          "description": "Visibility of the assettype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types could be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        }
      }
    },
    "AssetTypeBasePatch": {
      "type": "object",
      "properties": {
        "description": {
          "description": "description",
          "type": "string",
          "maxLength": 255,
          "example": "Hyperspace jump capable space ship"
        },
        "instantiable": {
          "description": "If instances can be created from this type. A non-instantiable type could be changed to be instantiable but not the other way around.",
          "type": "boolean",
          "default": true,
          "example": true
        },
        "name": {
          "description": "The type's name.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[\\p{L}_0-9_\\. ]+",
          "example": "X_Wing"
        },
        "parentTypeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "scope": {
          "description": "Visibility of the assettype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types could be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        }
      }
    },
    "AssetTypeId": {
      "description": "The asset type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id). Once set cannot be changed.",
      "type": "string",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "example": "mdsp.spaceship"
    },
    "AssetTypeLinks": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the parent asset type",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "AssetTypeListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "assetTypes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetTypeResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AssetTypePatch": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBasePatch"
        },
        {
          "properties": {
            "aspects": {
              "description": "Aspects of the asset-type.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aspectId": {
                    "$ref": "#/definitions/AspectId"
                  },
                  "aspectTypeId": {
                    "$ref": "#/definitions/AspectTypeId"
                  },
                  "name": {
                    "description": "Name of the aspect. It has to be unique inside the type-family (ancestors and descendants). Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as aspect names.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "[a-zA-Z0-9_]+",
                    "example": "leftWing"
                  }
                }
              }
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignment"
              }
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        }
      ]
    },
    "AssetTypeResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBase"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AssetTypeLinks"
            },
            "aspects": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_links": {
                    "type": "object",
                    "properties": {
                      "origin": {
                        "type": "object",
                        "properties": {
                          "href": {
                            "description": "Link to the asset type defining the aspect. *Only visible if aspect is inherited.*",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "aspectId": {
                    "$ref": "#/definitions/AspectId"
                  },
                  "aspectType": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/AspectTypeResource"
                      }
                    ]
                  },
                  "name": {
                    "description": "Name of the aspect type, it must be unique for the asset type.",
                    "type": "string",
                    "example": "leftWing"
                  }
                }
              }
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignmentResource"
              }
            },
            "id": {
              "$ref": "#/definitions/AssetTypeId"
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinitionResource"
              }
            }
          }
        }
      ]
    },
    "AssetUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AssetUpdatePatch": {
      "type": "object",
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "BillboardResource": {
      "type": "object",
      "properties": {
        "aspectTypes": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to aspect-types resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "assetTypes": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to asset-types resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "assets": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to assets resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to files resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the billboard url",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "ETag": {
      "description": "incremental counter for optimistic locking",
      "type": "integer",
      "example": 1
    },
    "FileAssignment": {
      "type": "object",
      "properties": {
        "fileId": {
          "description": "The id of the file to be assigned",
          "type": "string",
          "example": "c27a28b6eb16b507fabc11e75da8b4ce"
        },
        "key": {
          "description": "Keyword for the file to be assigned to an asset.",
          "type": "string",
          "pattern": "[\\w]+",
          "example": "logo_small"
        }
      }
    },
    "FileAssignmentLinks": {
      "type": "object",
      "properties": {
        "download": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to download the file",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "metadata": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to get metadata of the file",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "origin": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to access the file assignment. Only visible if assignment is inherited",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "FileAssignmentResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FileAssignment"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/FileAssignmentLinks"
            }
          }
        }
      ]
    },
    "FileMetadataListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileMetadataResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "FileMetadataResource": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "properties": {
            "download": {
              "title": "link for downloading the file",
              "properties": {
                "href": {
                  "type": "string"
                }
              }
            },
            "self": {
              "$ref": "#/definitions/rel.self"
            }
          }
        },
        "description": {
          "description": "File description",
          "type": "string",
          "example": "Company logo"
        },
        "etag": {
          "$ref": "#/definitions/ETag"
        },
        "id": {
          "$ref": "#/definitions/uniqueId"
        },
        "isAssigned": {
          "description": "Is the file used in any file assignment",
          "type": "boolean",
          "example": false
        },
        "lastModified": {
          "description": "The time of the latest modification of the file",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "File name given by the user",
          "type": "string",
          "example": "logo"
        },
        "originalFileName": {
          "description": "Original filename of the file",
          "type": "string",
          "example": "logo_small.png"
        },
        "scope": {
          "description": "The visibility of the file. PRIVATE hides files between subTenants and the t1Tenant's files from the subTenants. PUBLIC is visible for every user of the tenant.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "subTenant": {
          "description": "The id of the end-customer",
          "type": "string",
          "example": "UnkarPlutt Inc."
        },
        "tenantId": {
          "$ref": "#/definitions/tenantId"
        },
        "uploaded": {
          "description": "The time of the file upload",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "KeyedFileAssignment": {
      "type": "object",
      "properties": {
        "fileId": {
          "description": "The id of the file to be assigned",
          "type": "string",
          "example": "c27a28b6eb16b507fabc11e75da8b4ce"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "maxLength": 255,
          "example": "Austria"
        },
        "latitude": {
          "description": "The latitude part of the geographic coordinates",
          "type": "number",
          "maximum": 90,
          "minimum": -90,
          "example": 9.9763411
        },
        "locality": {
          "type": "string",
          "maxLength": 255,
          "pattern": "[\\p{L}0-9_ -\\']*",
          "example": "Innsbruck"
        },
        "longitude": {
          "description": "The longitude part of the geographic coordinates",
          "type": "number",
          "maximum": 180,
          "minimum": -180,
          "example": 53.5125546
        },
        "postalCode": {
          "type": "string",
          "maxLength": 255,
          "example": "6020"
        },
        "region": {
          "description": "County or other region code or name",
          "type": "string",
          "maxLength": 255,
          "example": "Tyrol"
        },
        "streetAddress": {
          "type": "string",
          "maxLength": 255,
          "example": "Industriestraße 21 A/II"
        }
      }
    },
    "LockResource": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/rel.self"
            }
          }
        },
        "id": {
          "$ref": "#/definitions/uniqueId"
        },
        "reason": {
          "description": "Reason of lock",
          "type": "string",
          "example": "Agent is onboarded, cannot delete asset until offboard finished"
        },
        "reasonCode": {
          "description": "Code of the reason",
          "type": "string",
          "example": "agentmanagement.agent.onboarded"
        },
        "service": {
          "description": "Service creating the lock",
          "type": "string",
          "example": "AgentManagement"
        }
      }
    },
    "ModelLock": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/enabled"
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "totalElements": {
          "type": "integer"
        },
        "totalPages": {
          "type": "integer"
        }
      }
    },
    "PagingLinks": {
      "type": "object",
      "properties": {
        "first": {
          "type": "object",
          "title": "link to first page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "last": {
          "type": "object",
          "title": "link to last page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "next": {
          "type": "object",
          "title": "link to next page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "prev": {
          "type": "object",
          "title": "link to previous page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "RootAssetResource": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        },
        {
          "properties": {
            "hierarchyPath": {
              "description": "Hieararchy path is empty for the root asset",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": null
            }
          }
        }
      ]
    },
    "SharingResource": {
      "description": "Contains sharing information.",
      "type": "object",
      "properties": {
        "modes": {
          "description": "List of sharing modes applicable for this resource. The currently supported modes are SHARER and RECEIVER. SHARER means this resource is shared by my tenant. RECEIVER means this resource is shared with my tenant. An empty array means this resource is not shared. New modes might be introduced later and clients must expect additional items to be contained in the array.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SHARER",
              "RECEIVER"
            ]
          }
        }
      }
    },
    "Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "color"
        },
        "value": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "yellow"
        }
      }
    },
    "VariableDefinition": {
      "required": [
        "name",
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VariableUpdate"
        }
      ],
      "properties": {
        "dataType": {
          "description": "Data type of the variable. BIG_STRING could only be used by variables in dynamic aspect-types. Cannot be changed.",
          "type": "string",
          "enum": [
            "BOOLEAN",
            "INT",
            "LONG",
            "DOUBLE",
            "STRING",
            "TIMESTAMP",
            "BIG_STRING"
          ],
          "example": "STRING"
        },
        "name": {
          "type": "string"
        },
        "searchable": {
          "description": "Indicates whether sorting and filtering is allowed on this variable. Only usable for static properties. Cannot be changed.",
          "type": "boolean",
          "default": false,
          "example": true
        }
      }
    },
    "VariableDefinitionResource": {
      "allOf": [
        {
          "$ref": "#/definitions/VariableDefinition"
        },
        {
          "properties": {
            "_links": {
              "properties": {
                "origin": {
                  "description": "Link to the asset type defining the variable. *Only visible if variable is inherited.*",
                  "properties": {
                    "href": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "VariableListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "VariableUpdate": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value of the variable. It must be compatible with the dataType! The default value will be inherited by the asset type's child types and by the asset instantiating it. It can be defined in aspect types and asset types.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "25/77"
        },
        "length": {
          "description": "The max length of the variable's value. The length field is only used for variables of string or big_string dataType. Max length for string is 255 and max length for big_string 100000. Cannot be changed.",
          "type": "integer",
          "maximum": 100000,
          "minimum": 1,
          "example": 5
        },
        "name": {
          "description": "Name of the variable. Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as variable names.",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
          "example": "temperature"
        },
        "unit": {
          "description": "Unit of measurement. Can be changed",
          "type": "string",
          "maxLength": 32,
          "pattern": "[^\\']*",
          "example": "C/F"
        }
      }
    },
    "VariableUpdateMap": {
      "additionalProperties": {
        "$ref": "#/definitions/VariableUpdate"
      },
      "example": {
        "temperature": {
          "defaultValue": "25/77",
          "length": 5,
          "name": "engine_temperature",
          "unit": "C/F"
        }
      }
    },
    "aspectVariableUpdateMap": {
      "additionalProperties": {
        "$ref": "#/definitions/VariableDefinition"
      },
      "example": {
        "newVariable": {
          "dataType": "STRING",
          "defaultValue": "25/77",
          "length": 5,
          "name": "newVariable",
          "qualityCode": true,
          "searchable": true,
          "unit": "C/F"
        },
        "removeVariable": null,
        "temperature": {
          "dataType": "STRING",
          "defaultValue": "25/77",
          "length": 5,
          "name": "engine_temperature",
          "qualityCode": true,
          "searchable": true,
          "unit": "C/F"
        }
      }
    },
    "enabled": {
      "description": "Describes the state of model lock",
      "type": "boolean",
      "example": true
    },
    "errors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "errorcode": {
                "type": "string"
              },
              "logref": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "example": {
              "code": "assetmngmnt.code",
              "errorcode": "assetmngmnt.errorcode",
              "logref": "c27a28b6eb16b507fabc11e75da8b4ce",
              "message": "Some meaningful message about the problems origin"
            }
          }
        }
      }
    },
    "jobs": {
      "description": "Describes Jobs associtated with Model Lock",
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "mdsp-import-md33d31"
      ]
    },
    "rel.self": {
      "type": "object",
      "title": "self link",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "tenantId": {
      "description": "The unique identifier of the tenant",
      "type": "string",
      "maxLength": 255,
      "pattern": "[a-zA-Z0-9-_.]+",
      "example": "mdsp"
    },
    "timezone": {
      "description": "The timezone to be used for timeseries aggregation. By default it is inherited from the tenant's defaultTimezone, but can be overwritten only during asset creation. The timezone value should be set to a Java time zone ID such as \"America/LosAngeles\" or \"Etc/GMT+2\". Time zones that 15 or 45 minutes off a UTC hour are not supported, such as Nepal standard time (UTC+05:45). Time zones that are 30 minutes off a UTC hour are supported, such as India (UTC+05:30). Once an asset is created with a specific timezone, it cannot be changed later.",
      "type": "string",
      "maxLength": 255,
      "example": "Europe/Berlin"
    },
    "twinType": {
      "description": "Indicates that the asset is a real asset (performance) or for simulation. If omitted on creation then it defaults to performance. Setting the twinType to simulation allows high resolution timestamps (microsecond precision).",
      "type": "string",
      "default": "performance",
      "enum": [
        "performance",
        "simulation"
      ]
    },
    "uniqueId": {
      "type": "string",
      "maxLength": 32,
      "minLength": 32,
      "pattern": "[0-9a-f]+",
      "example": "c27a28b6eb16b507fabc11e75da8b4ce"
    }
  },
  "parameters": {
    "TypeId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "type": "string",
      "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
      "name": "id",
      "in": "path",
      "required": true
    },
    "basicFieldsOnly": {
      "type": "boolean",
      "default": false,
      "description": "Specifies if the assets should include all of it's inherited variables and aspects from assettype and aspecttype.",
      "name": "basicFieldsOnly",
      "in": "query"
    },
    "exploded": {
      "type": "boolean",
      "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
      "name": "exploded",
      "in": "query"
    },
    "fileId": {
      "pattern": "[0-9A-F]{32}",
      "type": "string",
      "description": "Unique identifier of the file.",
      "name": "fileId",
      "in": "path",
      "required": true
    },
    "fileKey": {
      "pattern": "[\\w]+",
      "type": "string",
      "description": "Keyword for the file to be assigned to an asset or asset type.",
      "name": "key",
      "in": "path",
      "required": true
    },
    "filter": {
      "type": "string",
      "description": "Specifies the additional filtering criteria",
      "name": "filter",
      "in": "query"
    },
    "ifMatch": {
      "type": "string",
      "description": "Last known version to facilitate optimistic locking.\n*Required for modification.\n",
      "name": "If-Match",
      "in": "header"
    },
    "ifMatchMandatory": {
      "type": "string",
      "description": "Last known version to facilitate optimistic locking",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "ifMatchVariable": {
      "type": "string",
      "description": "Last known version of asset type to facilitate optimistic locking. Etag from asset type response to be used.",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "ifNoneMatch": {
      "type": "string",
      "description": "ETag hash of previous request to allow caching",
      "name": "If-None-Match",
      "in": "header"
    },
    "ifNoneMatchStar": {
      "type": "string",
      "description": "Set ifNoneMatch header to \"*\" for ensuring create request",
      "name": "If-None-Match",
      "in": "header"
    },
    "includeShared": {
      "type": "boolean",
      "default": false,
      "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
      "name": "includeShared",
      "in": "query"
    },
    "page": {
      "type": "integer",
      "description": "Specifies the requested page index",
      "name": "page",
      "in": "query"
    },
    "size": {
      "type": "integer",
      "description": "Specifies the number of elements in a page",
      "name": "size",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Specifies the ordering of returned elements",
      "name": "sort",
      "in": "query"
    },
    "uniqueId": {
      "pattern": "[0-9A-F]{32}",
      "type": "string",
      "description": "Unique identifier",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "aspecttype": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "atm.apt.d": "delete aspect types",
        "atm.apt.r": "read aspect types",
        "atm.apt.w": "write aspect types"
      }
    },
    "asset": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.c": "create assets",
        "asm.d": "delete assets",
        "asm.h.d": "delete an element of the hierarchy of assets",
        "asm.h.w": "create or modify hierarchy of assets",
        "asm.m": "move asset",
        "asm.r": "read asset",
        "asm.rh.d": "delete a root element of the hierarchy of assets",
        "asm.rh.w": "create or modify root hierarchy of assets",
        "asm.u": "update assets"
      }
    },
    "assetmodel": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "aml.r": "read lock state of an asset model",
        "aml.w": "enable/disable lock state of an asset model"
      }
    },
    "assettype": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "atm.d": "delete asset types",
        "atm.r": "read asset types",
        "atm.w": "create or update asset types"
      }
    },
    "file": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.f.d": "delete files",
        "asm.f.r": "read files",
        "asm.f.w": "write files",
        "asm.fa.d": "delete file assignments",
        "asm.fa.w": "assign files",
        "atm.fa.d": "delete file assignment from assettype",
        "atm.fa.w": "create file assignment to assettype"
      }
    },
    "location": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.loc.d": "delete location",
        "asm.loc.w": "write location"
      }
    }
  },
  "tags": [
    {
      "description": "Managing static and dynamic aspect types.",
      "name": "aspecttype"
    },
    {
      "description": "Managing asset types.",
      "name": "assettype"
    },
    {
      "description": "Managing users' assets and their locations. Assets only can be created by types which are in three main topics; device types, agent types and hierarchy types.",
      "name": "assets"
    },
    {
      "description": "Managing structure of specific assets.",
      "name": "structure"
    },
    {
      "description": "Managing locations.",
      "name": "locations"
    },
    {
      "description": "Managing files.",
      "name": "files"
    },
    {
      "description": "Managing locks on asset model",
      "name": "assetmodellock"
    },
    {
      "name": "billboard"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/hal+json",
    "application/vnd.error+json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service for configuring, reading and managing assets, asset types and aspect types.",
    "title": "Asset Management API",
    "version": "3.18.3",
    "x-visibility": "external"
  },
  "basePath": "/api/assetmanagement/v3",
  "paths": {
    "/": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "List all links for available resources",
        "tags": [
          "billboard"
        ],
        "summary": "List all links for available resources",
        "operationId": "getBillboard",
        "responses": {
          "200": {
            "description": "Array of links to available resources",
            "schema": {
              "$ref": "#/definitions/BillboardResource"
            }
          }
        }
      }
    },
    "/aspecttypes": {
      "get": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all aspect types",
        "tags": [
          "aspecttype"
        ],
        "summary": "List all aspect types",
        "operationId": "listAspectTypes",
        "parameters": [
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of aspect types matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AspectTypeListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Shallow ETag of the resource"
              }
            }
          },
          "304": {
            "description": "Aspect-types page not changed"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/aspecttypes/{id}": {
      "get": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Read an aspect type.",
        "tags": [
          "aspecttype"
        ],
        "summary": "Read an aspect type",
        "operationId": "getAspectType",
        "parameters": [
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the aspect type",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "304": {
            "description": "AspectType not changed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Create or Update an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable, use PATCH /aspecttypes/{id}/variables api. Default value field is available only for static aspect variables and not on dynamic aspect variable. Aspect type description should not contain single quote character.\n",
        "tags": [
          "aspecttype"
        ],
        "summary": "Create or Update an aspect type",
        "operationId": "saveAspectType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking.\n*Required for modification.\n",
            "name": "If-Match",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Set ifNoneMatch header to \"*\" for ensuring create request",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "aspect type",
            "name": "aspecttype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AspectType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The aspect type has been updated",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "201": {
            "description": "The aspect type has been created",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.d"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Delete an aspect type. Aspect type can only be deleted if there is no asset type using it.",
        "tags": [
          "aspecttype"
        ],
        "summary": "Delete aspect type",
        "operationId": "deleteAspectType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Aspect type deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Patch an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable use PATCH /aspecttypes/{id}/variables api. Conforms to RFC 7396 - JSON merge Patch.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "aspecttype"
        ],
        "summary": "Patch an aspect type",
        "operationId": "updateAspectType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "aspect type",
            "name": "aspecttype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AspectTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The aspect type has been updated",
            "schema": {
              "$ref": "#/definitions/AspectTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AspectType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AspectType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/aspecttypes/{id}/variables": {
      "patch": {
        "security": [
          {
            "aspecttype": [
              "atm.apt.w"
            ]
          }
        ],
        "description": "Updates an existing variable defined on an aspect type. Variables can be added, deleted and updated using this operation. Any variable which is not part of the request will remain unchanged. All variable names must be unique in a aspect type. This operation will increment the aspect type etag value.\n\n\u003cb\u003eFollowing are the updates allowed on existing variables\u003c/b\u003e\n* Variable's Name, Length, Default Value and Unit can be changed.\n* The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated.\n* The length can only be increased of a string variable and it cannot be decreased.\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "aspecttype"
        ],
        "summary": "patch aspect type variables",
        "operationId": "updateAspectTypeVariable",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version of asset type to facilitate optimistic locking. Etag from asset type response to be used.",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Variables Dictionary, where variable Name is the key and value is the variable definition object.\n* To update existing variable in aspect type, dictionary should contain key as variable name and value as variable object with details to be updated.\n* To delete variables, key should be name of the variable to be deleted and value should be null.\n* To add new variables, key should be non exisiting variable name and value should be variable definition object.",
            "name": "variableMap",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/aspectVariableUpdateMap"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The variable's has been updated",
            "headers": {
              "ETag": {
                "type": "integer",
                "description": "AspectType ETag value for further updates"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Variable not found in Asset type",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Aspect type or the variable has been changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all assets available for the authenticated user. ## Filter Supports all basic fields and the 'hasType' filter which search for the assets with type that originated from the given asset type. # Examples Example: This filter searches for assets which type is exactly the given type: ` + "`" + `` + "`" + `` + "`" + ` { \"typeId\": \"mandal.ship\" } ` + "`" + `` + "`" + `` + "`" + ` Beyond the basic fields we can search for assets which type is inherited from the given type: ` + "`" + `` + "`" + `` + "`" + ` { \"hasType\": \"mandal.ship\" } ` + "`" + `` + "`" + `` + "`" + `\n",
        "tags": [
          "assets"
        ],
        "summary": "List all available assets",
        "operationId": "listAssets",
        "parameters": [
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the assets should include all of it's inherited variables and aspects from assettype and aspecttype.",
            "name": "basicFieldsOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of assets matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AssetListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "The hash of the response's content"
              }
            }
          },
          "304": {
            "description": "The answer's content has not changed since the last request"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "asset": [
              "asm.c",
              "asm.h.w",
              "asm.rh.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          },
          {
            "file": [
              "asm.fa.w"
            ]
          }
        ],
        "description": "Creates a new asset with the provided content. Only instantiable types could be used.",
        "tags": [
          "assets"
        ],
        "summary": "Create an asset",
        "operationId": "addAsset",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The asset is created",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/root": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Read the root asset of the user, from which the whole asset hierarchy can be rebuilt.",
        "tags": [
          "assets"
        ],
        "summary": "Returns the root asset of the user.",
        "operationId": "getRootAsset",
        "parameters": [
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the root asset of the user.",
            "schema": {
              "$ref": "#/definitions/RootAssetResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource asset is not modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Read a single asset. All static properties of asset are returned.",
        "tags": [
          "assets"
        ],
        "summary": "Returns an asset.",
        "operationId": "getAsset",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an asset with its static properties.",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource asset is not modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "asset": [
              "asm.h.w",
              "asm.rh.w",
              "asm.u"
            ]
          },
          {
            "file": [
              "asm.fa.d",
              "asm.fa.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          }
        ],
        "description": "Updates an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type",
        "tags": [
          "assets"
        ],
        "summary": "Update an asset",
        "operationId": "replaceAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.d",
              "asm.h.d",
              "asm.rh.d"
            ]
          }
        ],
        "description": "Deletes the given asset. It's not possible to delete an asset if it has children.",
        "tags": [
          "assets"
        ],
        "summary": "Delete an asset",
        "operationId": "deleteAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Asset deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "asset": [
              "asm.h.w",
              "asm.rh.w",
              "asm.u"
            ]
          },
          {
            "file": [
              "asm.fa.d",
              "asm.fa.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          }
        ],
        "description": "Patch an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type. Conforms to RFC 7396 - JSON merge Patch.",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assets"
        ],
        "summary": "Patch an asset",
        "operationId": "updateAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "asset",
            "name": "asset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetUpdatePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/aspects": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Get all static and dynamic aspects of a given asset\n",
        "tags": [
          "structure"
        ],
        "summary": "Get all aspects of an asset",
        "operationId": "listAssetAspects",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Static and dynamic aspects of the given asset matched by the given filter criterias",
            "schema": {
              "$ref": "#/definitions/AspectListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource aspects have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/fileAssignments/{key}": {
      "put": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "file": [
              "asm.fa.w"
            ]
          }
        ],
        "description": "Save a file assignment to a given asset\n",
        "tags": [
          "assets"
        ],
        "summary": "Save an file assignment to an asset",
        "operationId": "saveAssetFileAssignment",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "[\\w]+",
            "type": "string",
            "description": "Keyword for the file to be assigned to an asset or asset type.",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "Data for file assignment",
            "name": "assignment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyedFileAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been updated or a new assignment has been added",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "asm.fa.d"
            ]
          }
        ],
        "description": "Deletes a file assignment from an asset. If the asset's parent type has defined a file with the same key, the key will be displayed with the inherited value.\n",
        "tags": [
          "assets"
        ],
        "summary": "Deletes a file assignment from an asset",
        "operationId": "deleteAssetFileAssigment",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "[\\w]+",
            "type": "string",
            "description": "Keyword for the file to be assigned to an asset or asset type.",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been deleted",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset or key not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/location": {
      "put": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "location": [
              "asm.loc.w"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "* If the given asset has own location, this endpoint will update that location. * If the given asset has no location, this endpoint will create a new location and update the given asset. * If the given asset has inherited location, this endpoint will create a new location and update the given asset. If you wanted to update the inherited location you have to use the 'location' url in AssetResource object (with PUT method).\n",
        "tags": [
          "locations"
        ],
        "summary": "Create or Update location assigned to given asset",
        "operationId": "saveAssetLocation",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "location",
            "name": "location",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location has been successfully created or updated",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found with given asset identifier",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Location is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "location": [
              "asm.loc.d"
            ]
          }
        ],
        "description": "* Only those locations can be deleted here which assigned to the given asset. * If the location inherited from an ancestor asset, you have to delete the location with the assigned assetId (using ‘location’ url in AssetResource object with DELETE method). * The response contains the updated AssetResource with the inherited Location details.\n",
        "tags": [
          "locations"
        ],
        "summary": "Delete location assigned to given asset.",
        "operationId": "deleteAssetLocation",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Location has been successfully deleted",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found with given asset identifier",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "409": {
            "description": "Location not assigned to the given asset",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/move": {
      "post": {
        "security": [
          {
            "asset": [
              "asm.h.w",
              "asm.m",
              "asm.r"
            ]
          }
        ],
        "description": "Moves an asset (and all it's children) in the instance hierarchy",
        "tags": [
          "assets"
        ],
        "summary": "Move an asset",
        "operationId": "moveAsset",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "parameters for the asset move",
            "name": "moveParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetMove"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset is moved",
            "schema": {
              "$ref": "#/definitions/AssetResourceWithHierarchyPath"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assets/{id}/variables": {
      "get": {
        "security": [
          {
            "asset": [
              "asm.r"
            ]
          },
          {
            "assettype": [
              "atm.r"
            ]
          }
        ],
        "description": "Get all variables of a given asset including inherited ones\n",
        "tags": [
          "structure"
        ],
        "summary": "Get all variables of an asset",
        "operationId": "listAssetVariables",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Variables of the given asset matched by the given filter criterias",
            "schema": {
              "$ref": "#/definitions/VariableListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "ETag hash of the resource"
              }
            }
          },
          "304": {
            "description": "Resource variables have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "503": {
            "description": "Service unavailable, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "List all asset types",
        "tags": [
          "assettype"
        ],
        "summary": "List all asset types",
        "operationId": "listAssetTypes",
        "parameters": [
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "type": "boolean",
            "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
            "name": "exploded",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of asset types matched the tenant scope and filter criterias",
            "schema": {
              "$ref": "#/definitions/AssetTypeListResource"
            },
            "headers": {
              "ETag": {
                "type": "string",
                "description": "Shallow ETag of the resource"
              }
            }
          },
          "304": {
            "description": "Asset-types page not changed"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}": {
      "get": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          }
        ],
        "description": "Read an asset type",
        "tags": [
          "assettype"
        ],
        "summary": "Read an asset type",
        "operationId": "getAssetType",
        "parameters": [
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
            "name": "exploded",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the asset type",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "304": {
            "description": "AssetType not changed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "file": [
              "atm.fa.d",
              "atm.fa.w"
            ]
          }
        ],
        "description": "Create or Update an asset type. Complete asset type model payload should be provided in request.\n\n \u003cb\u003e Following are the updates allowed\u003c/b\u003e\n\n* Asset type description can be updated.\n* Asset type variable's can be created, updated and removed. Varaible length, default Value and Unit can be changed. The unit changes from the API does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased.\n* File assignments can be updated and removed.\n\n* Aspects can be created, updated and removed, please refer sample payloads below\n\n  * Create aspect\n        {\n          \"name\": \"leftWing\",\n          \"aspectTypeId\": \"mdsp.wing\"\n        }\n  * Update aspect \u003cb\u003e\u003cu\u003easpectId should be provided in payload\u003c/u\u003e\u003c/b\u003e (only name can be updated)\n      {\n             \"name\": \"rightWing\",\n             \"aspectId\": \"b9cbfc7073be4530887cdb1e71c932b8\",\n             \"aspectTypeId\": \"mdsp.wing\"\n       }\n  * To delete an aspect, aspect should not be part of aspects payload\n",
        "tags": [
          "assettype"
        ],
        "summary": "Create or Update an asset type",
        "operationId": "saveAssetType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking.\n*Required for modification.\n",
            "name": "If-Match",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Set ifNoneMatch header to \"*\" for ensuring create request",
            "name": "If-None-Match",
            "in": "header"
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
            "name": "exploded",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "asset type",
            "name": "assettype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset type has been updated",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "201": {
            "description": "The asset type has been created",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "assettype": [
              "atm.d"
            ]
          }
        ],
        "description": "Deletes an asset type. Deletion only possible when the type has no child-type and there is no asset that instantiate it.",
        "tags": [
          "assettype"
        ],
        "summary": "Delete an asset type",
        "operationId": "deleteAssetType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Asset type deletion was successful"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          },
          {
            "aspecttype": [
              "atm.apt.r"
            ]
          },
          {
            "file": [
              "atm.fa.d",
              "atm.fa.w"
            ]
          }
        ],
        "description": "Patch an asset type. Conforms to RFC 7396 - JSON merge Patch.\n\u003cb\u003e Following are the updates allowed\u003c/b\u003e\n* Asset type description can be updated.\n* Asset type variable's can be created, updated and removed. Varaible length, default Value and Unit can be changed. The unit changes from the API does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased.\n* File assignments can be updated and removed.\n\n* Aspects can be created, updated and removed, please refer sample payloads below\n\n  * Create aspect\n        {\n          \"name\": \"leftWing\",\n          \"aspectTypeId\": \"mdsp.wing\"\n        }\n  * Update aspect, \u003cb\u003e\u003cu\u003easpectId should be provided in payload\u003c/u\u003e\u003c/b\u003e (only name can be updated)\n      {\n             \"name\": \"rightWing\",\n             \"aspectId\": \"b9cbfc7073be4530887cdb1e71c932b8\",\n             \"aspectTypeId\": \"mdsp.wing\"\n       }\n  * To delete an aspect, aspect should not be part of aspects payload\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assettype"
        ],
        "summary": "Patch an asset type",
        "operationId": "updateAssetType",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
            "name": "exploded",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "asset type",
            "name": "assettype",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetTypePatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset type has been updated",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "AssetType not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "AssetType is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}/fileAssignments/{key}": {
      "put": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "atm.fa.w"
            ]
          }
        ],
        "description": "Add a new file assignment to a given asset type. All asset which extends these types will have its file by default.\n",
        "tags": [
          "assettype"
        ],
        "summary": "Add a new file assignment to an asset type",
        "operationId": "saveAssetTypeFileAssignment",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "[\\w]+",
            "type": "string",
            "description": "Keyword for the file to be assigned to an asset or asset type.",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "Data for file assignment",
            "name": "assignment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyedFileAssignment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been updated or a new assignment has been added",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset type not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "assettype": [
              "atm.r"
            ]
          },
          {
            "file": [
              "atm.fa.d"
            ]
          }
        ],
        "description": "Deletes a file assignment from an asset type. If the type's parent has defined a file with the same key, the key will be displayed with the inherited value.\n",
        "tags": [
          "assettype"
        ],
        "summary": "Deletes a file assignment from an asset type",
        "operationId": "deleteAssetTypeFileAssignment",
        "parameters": [
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "[\\w]+",
            "type": "string",
            "description": "Keyword for the file to be assigned to an asset or asset type.",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The assignment has been deleted",
            "schema": {
              "$ref": "#/definitions/AssetTypeResource"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Asset type or key not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the file assignment has changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/assettypes/{id}/variables": {
      "patch": {
        "security": [
          {
            "assettype": [
              "atm.w"
            ]
          }
        ],
        "description": "Updates an existing variable defined on an asset type. Variables cannot be added or deleted using this operation, for adding or deleting variables use patch/put assettype api. Any variable which is not part of the request will remain unchanged. Variable's Name, Length, Default Value and Unit can be changed. The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated. The length can only be increased of a string variable and it cannot be decreased. This operation will increment the asset type etag value.\n",
        "consumes": [
          "application/merge-patch+json"
        ],
        "tags": [
          "assettype"
        ],
        "summary": "Update variables from an asset type",
        "operationId": "updateAssetTypeVariable",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version of asset type to facilitate optimistic locking. Etag from asset type response to be used.",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
            "type": "string",
            "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
            "name": "includeShared",
            "in": "query"
          },
          {
            "description": "Variables Dictionary, Variable Name is the key and value are the parameters to be updated of the variable.",
            "name": "variableMap",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableUpdateMap"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The variable's has been updated",
            "headers": {
              "ETag": {
                "type": "integer",
                "description": "AssetType ETag value for further updates"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "Variable not found in Asset type",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Asset type or the variable has been changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns all visible file metadata for the tenant. Will NOT return the files.\n",
        "tags": [
          "files"
        ],
        "summary": "Get metadata of uploaded files.",
        "operationId": "listFiles",
        "parameters": [
          {
            "type": "integer",
            "description": "Specifies the requested page index",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Specifies the number of elements in a page",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the ordering of returned elements",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specifies the additional filtering criteria",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata of files visible for the tenant",
            "schema": {
              "$ref": "#/definitions/FileMetadataListResource"
            }
          },
          "304": {
            "description": "Resource have not been modified"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "file": [
              "asm.f.w"
            ]
          }
        ],
        "description": "* Uploaded files are only visible for the uploader tenant.\n* Max file size is 5 MB.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "files"
        ],
        "summary": "Upload files to be used in Asset Management.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "type": "file",
            "format": "binary",
            "description": "The file to upload. The file size cannot be more than 5 MB.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "pattern": "^[^*\u0026%\\s\\/\\\\]+$",
            "type": "string",
            "description": "The name of the file",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "public",
              "private"
            ],
            "type": "string",
            "default": "private",
            "description": "The scope of the file",
            "name": "scope",
            "in": "formData"
          },
          {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the file",
            "name": "description",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "File has been successfully uploaded",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            },
            "headers": {
              "Location": {
                "type": "string",
                "format": "uri",
                "description": "URL of the created resource"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns a file's metadata by its id\n",
        "tags": [
          "files"
        ],
        "summary": "Returns a file's metadata by its id",
        "operationId": "getFile",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier of the file.",
            "name": "fileId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ETag hash of previous request to allow caching",
            "name": "If-None-Match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file's metadata",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            }
          },
          "304": {
            "description": "Resource have not been modified"
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "file": [
              "asm.f.w"
            ]
          }
        ],
        "description": "Update a previously uploaded file\n* Max file size is 5 MB.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "files"
        ],
        "summary": "Update a file",
        "operationId": "replaceFile",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier of the file.",
            "name": "fileId",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "format": "binary",
            "description": "The file to upload. The file size cannot be more than 5 MB.",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "pattern": "^[^*\u0026%\\s\\/\\\\]+$",
            "type": "string",
            "description": "The name of the file",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "public",
              "private"
            ],
            "type": "string",
            "default": "private",
            "description": "The scope of the file",
            "name": "scope",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the file",
            "name": "description",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "File has been successfully updated",
            "schema": {
              "$ref": "#/definitions/FileMetadataResource"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "File is changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "file": [
              "asm.f.d"
            ]
          }
        ],
        "description": "* Deletion is blocked if there are any file assignment with the given fileId.\n",
        "tags": [
          "files"
        ],
        "summary": "Delete a file.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "type": "string",
            "description": "Last known version to facilitate optimistic locking",
            "name": "If-Match",
            "in": "header",
            "required": true
          },
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier of the file.",
            "name": "fileId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File has been successfully deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "File changed in the background",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/files/{fileId}/file": {
      "get": {
        "security": [
          {
            "file": [
              "asm.f.r"
            ]
          }
        ],
        "description": "Returns a file by its id\n",
        "produces": [
          "application/base64",
          "application/octet-stream",
          "application/vnd.error+json"
        ],
        "tags": [
          "files"
        ],
        "summary": "Returns a file by its id",
        "operationId": "downloadFile",
        "parameters": [
          {
            "pattern": "[0-9A-F]{32}",
            "type": "string",
            "description": "Unique identifier of the file.",
            "name": "fileId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file",
            "schema": {
              "description": "The requested file as a base64 encoded string or an octet-stream",
              "type": "string",
              "format": "binary",
              "example": "QW4gZXhhbXBsZSBmaWxl"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "format": "Media type",
                "description": "The uploaded file resource's media type"
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "404": {
            "description": "File not found",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "406": {
            "description": "The resource cannot be represented in the format that would be acceptable to the user agent",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    },
    "/model/lock": {
      "get": {
        "security": [
          {
            "assetmodel": [
              "aml.r"
            ]
          }
        ],
        "description": "Provides lock state of an asset model at tenant level.",
        "tags": [
          "assetmodellock"
        ],
        "summary": "Returns lock state of an asset model.",
        "operationId": "getAssetModelLock",
        "responses": {
          "200": {
            "description": "Returns lock state of an asset model and associated jobs.",
            "schema": {
              "$ref": "#/definitions/AssetModelLock"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "assetmodel": [
              "aml.w"
            ]
          }
        ],
        "description": "Enable/disable lock state of asset model at tenant level, managing restrictions on update/delete operations on assettypes and aspecttypes.",
        "tags": [
          "assetmodellock"
        ],
        "summary": "Enable/disable lock state of an asset model.",
        "operationId": "putAssetModelLock",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Lock state of an asset model",
            "name": "enabled",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns lock state of an asset model applied on a tenant.",
            "schema": {
              "$ref": "#/definitions/ModelLock"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "403": {
            "description": "User is not authorized for request",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          },
          "500": {
            "description": "Server error, for more information see errorcode and message",
            "schema": {
              "$ref": "#/definitions/errors"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Aspect": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "astroDroid"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AspectId": {
      "description": "Aspect id is an internal id of an aspect associated with an asset type.",
      "type": "string",
      "example": "b9cbfc7073be4530887cdb1e71c932b8"
    },
    "AspectLinks": {
      "type": "object",
      "properties": {
        "aspectType": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the origin aspect type of the aspect",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "asset": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the aspect",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "AspectLinksAspectType": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the origin aspect type of the aspect",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AspectLinksAsset": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AspectLinksSelf": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the aspect",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AspectListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "aspects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AspectResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AspectListResourceEmbedded": {
      "type": "object",
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AspectResource"
          }
        }
      }
    },
    "AspectResource": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/AspectLinks"
        },
        "aspectId": {
          "$ref": "#/definitions/AspectId"
        },
        "aspectTypeId": {
          "description": "ID of the Aspect type",
          "type": "string",
          "example": "tenant.asp.engine"
        },
        "category": {
          "type": "string",
          "enum": [
            "dynamic",
            "static"
          ]
        },
        "description": {
          "description": "The description of the aspect",
          "type": "string",
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "holderAssetId": {
          "$ref": "#/definitions/uniqueId"
        },
        "name": {
          "description": "Name of the aspect",
          "type": "string",
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectType": {
      "type": "object",
      "required": [
        "name",
        "category",
        "scope",
        "variables"
      ],
      "properties": {
        "category": {
          "description": "If the aspect-type is used for static data or time-series. Cannot be changed once the aspect-type is created.",
          "type": "string",
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "description": {
          "description": "The description of the aspect type",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "name": {
          "description": "Name of the aspect type. It has to be unique inside the tenant and cannot be changed later.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "scope": {
          "description": "Visibility of aspecttype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types can be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "variables": {
          "description": "Variables of the aspect-type. Variable names should be unique inside an aspect-type.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectTypeId": {
      "description": "The aspect type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id). Once set cannot be changed.",
      "type": "string",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "example": "mdsp.wing"
    },
    "AspectTypeLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "AspectTypeListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "aspectTypes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AspectTypeResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AspectTypeListResourceEmbedded": {
      "type": "object",
      "properties": {
        "aspectTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AspectTypeResource"
          }
        }
      }
    },
    "AspectTypePatch": {
      "type": "object",
      "properties": {
        "category": {
          "description": "If the aspect-type is used for static data or time-series. Cannot be changed once the aspect-type is created.",
          "type": "string",
          "enum": [
            "static",
            "dynamic"
          ]
        },
        "description": {
          "description": "The description of the aspect type",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^\\']*",
          "example": "The engine of the Millenium Falcon"
        },
        "name": {
          "description": "Name of the aspect type. It has to be unique inside the tenant and cannot be changed later.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "engine"
        },
        "scope": {
          "description": "Visibility of aspecttype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types can be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "variables": {
          "description": "Variables of the aspect-type. Variable names should be unique inside an aspect-type.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/AspectVariable"
          }
        }
      }
    },
    "AspectTypeResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AspectType"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AspectTypeLinks"
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "id": {
              "$ref": "#/definitions/AspectTypeId"
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            }
          }
        }
      ]
    },
    "AspectVariable": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableDefinition"
        },
        {
          "properties": {
            "qualityCode": {
              "description": "Indicates whether the variable has quality code. Cannot be changed.",
              "type": "boolean",
              "default": false,
              "example": true
            }
          }
        }
      ]
    },
    "Asset": {
      "type": "object",
      "required": [
        "typeId",
        "parentId"
      ],
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "parentId": {
          "$ref": "#/definitions/uniqueId"
        },
        "timezone": {
          "$ref": "#/definitions/timezone"
        },
        "twinType": {
          "$ref": "#/definitions/twinType"
        },
        "typeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AssetLinks": {
      "type": "object",
      "properties": {
        "aspects": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the aspect structure of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "children": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the children of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "location": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to update or delete the location of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "parent": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the parent of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "t2Tenant": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the end-customer of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "variables": {
          "type": "object",
          "properties": {
            "href": {
              "description": "URL to get the variable definitions of the asset",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "AssetLinksAspects": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the aspect structure of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksChildren": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the children of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksLocation": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to update or delete the location of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksParent": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the parent of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksSelf": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksT2Tenant": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the end-customer of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetLinksVariables": {
      "type": "object",
      "properties": {
        "href": {
          "description": "URL to get the variable definitions of the asset",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AssetListResourceEmbedded": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetResource"
          }
        }
      }
    },
    "AssetModelLock": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/enabled"
        },
        "jobs": {
          "$ref": "#/definitions/jobs"
        }
      }
    },
    "AssetMove": {
      "type": "object",
      "required": [
        "newParentId"
      ],
      "properties": {
        "newParentId": {
          "$ref": "#/definitions/uniqueId"
        }
      }
    },
    "AssetResource": {
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AssetLinks"
            },
            "assetId": {
              "$ref": "#/definitions/uniqueId"
            },
            "deleted": {
              "type": "string",
              "format": "date-time"
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "locks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LockResource"
              }
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "subTenant": {
              "description": "The id of the end-customer.",
              "type": "string",
              "maxLength": 255,
              "example": "UnkarPlutt Inc."
            },
            "t2Tenant": {
              "description": "The id of the end-customer. This field is DEPRECATED please use subTenant instead.",
              "type": "string",
              "maxLength": 255,
              "example": "DEPRECATED: use subTenant instead"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            }
          }
        }
      ]
    },
    "AssetResourceWithHierarchyPath": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        },
        {
          "properties": {
            "hierarchyPath": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetResourceWithHierarchyPathHierarchyPathItems0"
              }
            }
          }
        }
      ]
    },
    "AssetResourceWithHierarchyPathHierarchyPathItems0": {
      "type": "object",
      "properties": {
        "assetId": {
          "$ref": "#/definitions/uniqueId"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "example": "Millenium Falcon's parent"
        }
      }
    },
    "AssetType": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBase"
        },
        {
          "properties": {
            "aspects": {
              "description": "Aspects of the asset-type.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetTypeAspectsItems0"
              }
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignment"
              }
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        }
      ]
    },
    "AssetTypeAspectsItems0": {
      "type": "object",
      "required": [
        "name",
        "aspectTypeId"
      ],
      "properties": {
        "aspectId": {
          "$ref": "#/definitions/AspectId"
        },
        "aspectTypeId": {
          "$ref": "#/definitions/AspectTypeId"
        },
        "name": {
          "description": "Name of the aspect. It has to be unique inside the type-family (ancestors and descendants). Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as aspect names.",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "leftWing"
        }
      }
    },
    "AssetTypeBase": {
      "type": "object",
      "required": [
        "name",
        "parentTypeId"
      ],
      "properties": {
        "description": {
          "description": "description",
          "type": "string",
          "maxLength": 255,
          "example": "Hyperspace jump capable space ship"
        },
        "instantiable": {
          "description": "If instances can be created from this type. A non-instantiable type could be changed to be instantiable but not the other way around.",
          "type": "boolean",
          "default": true,
          "example": true
        },
        "name": {
          "description": "The type's name.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[\\p{L}_0-9_\\. ]+",
          "example": "X_Wing"
        },
        "parentTypeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "scope": {
          "description": "Visibility of the assettype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types could be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        }
      }
    },
    "AssetTypeBasePatch": {
      "type": "object",
      "properties": {
        "description": {
          "description": "description",
          "type": "string",
          "maxLength": 255,
          "example": "Hyperspace jump capable space ship"
        },
        "instantiable": {
          "description": "If instances can be created from this type. A non-instantiable type could be changed to be instantiable but not the other way around.",
          "type": "boolean",
          "default": true,
          "example": true
        },
        "name": {
          "description": "The type's name.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[\\p{L}_0-9_\\. ]+",
          "example": "X_Wing"
        },
        "parentTypeId": {
          "$ref": "#/definitions/AssetTypeId"
        },
        "scope": {
          "description": "Visibility of the assettype. Setting this property to public makes it available to other tenants. Private types are only visible to the user's own tenant. Currently only private types could be created.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        }
      }
    },
    "AssetTypeId": {
      "description": "The asset type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id). Once set cannot be changed.",
      "type": "string",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "example": "mdsp.spaceship"
    },
    "AssetTypeLinks": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the parent asset type",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "AssetTypeLinksParent": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the parent asset type",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssetTypeListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "assetTypes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetTypeResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "AssetTypeListResourceEmbedded": {
      "type": "object",
      "properties": {
        "assetTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetTypeResource"
          }
        }
      }
    },
    "AssetTypePatch": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBasePatch"
        },
        {
          "properties": {
            "aspects": {
              "description": "Aspects of the asset-type.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetTypePatchAspectsItems0"
              }
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignment"
              }
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        }
      ]
    },
    "AssetTypePatchAspectsItems0": {
      "type": "object",
      "properties": {
        "aspectId": {
          "$ref": "#/definitions/AspectId"
        },
        "aspectTypeId": {
          "$ref": "#/definitions/AspectTypeId"
        },
        "name": {
          "description": "Name of the aspect. It has to be unique inside the type-family (ancestors and descendants). Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as aspect names.",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "leftWing"
        }
      }
    },
    "AssetTypeResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssetTypeBase"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/AssetTypeLinks"
            },
            "aspects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetTypeResourceAspectsItems0"
              }
            },
            "etag": {
              "$ref": "#/definitions/ETag"
            },
            "fileAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileAssignmentResource"
              }
            },
            "id": {
              "$ref": "#/definitions/AssetTypeId"
            },
            "sharing": {
              "$ref": "#/definitions/SharingResource"
            },
            "tenantId": {
              "$ref": "#/definitions/tenantId"
            },
            "variables": {
              "description": "Direct variables of the asset-type. Variable names has to be unique inside the whole type-family (ancestors and descendants). Once added variables cannot be changed or removed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinitionResource"
              }
            }
          }
        }
      ]
    },
    "AssetTypeResourceAspectsItems0": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "properties": {
            "origin": {
              "type": "object",
              "properties": {
                "href": {
                  "description": "Link to the asset type defining the aspect. *Only visible if aspect is inherited.*",
                  "type": "string"
                }
              }
            }
          }
        },
        "aspectId": {
          "$ref": "#/definitions/AspectId"
        },
        "aspectType": {
          "allOf": [
            {
              "$ref": "#/definitions/AspectTypeResource"
            }
          ]
        },
        "name": {
          "description": "Name of the aspect type, it must be unique for the asset type.",
          "type": "string",
          "example": "leftWing"
        }
      }
    },
    "AssetTypeResourceAspectsItems0Links": {
      "type": "object",
      "properties": {
        "origin": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the asset type defining the aspect. *Only visible if aspect is inherited.*",
              "type": "string"
            }
          }
        }
      }
    },
    "AssetTypeResourceAspectsItems0LinksOrigin": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the asset type defining the aspect. *Only visible if aspect is inherited.*",
          "type": "string"
        }
      }
    },
    "AssetUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "AssetUpdatePatch": {
      "type": "object",
      "properties": {
        "aspects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aspect"
          }
        },
        "description": {
          "description": "The description of the asset",
          "type": "string",
          "maxLength": 255,
          "pattern": "[^']*",
          "example": "The ship of Han Solo and Chewbacca"
        },
        "externalId": {
          "description": "The id given by the user",
          "type": "string",
          "maxLength": 255,
          "example": "SN 123456-123-123456"
        },
        "fileAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileAssignment"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "name": {
          "description": "Name of the asset",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[^\\/\\\\]*",
          "example": "Millenium Falcon"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        }
      }
    },
    "BillboardResource": {
      "type": "object",
      "properties": {
        "aspectTypes": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to aspect-types resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "assetTypes": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to asset-types resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "assets": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to assets resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to files resource",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "self": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to the billboard url",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "BillboardResourceAspectTypes": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to aspect-types resource",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "BillboardResourceAssetTypes": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to asset-types resource",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "BillboardResourceAssets": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to assets resource",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "BillboardResourceFiles": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to files resource",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "BillboardResourceSelf": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to the billboard url",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ETag": {
      "description": "incremental counter for optimistic locking",
      "type": "integer",
      "example": 1
    },
    "ErrorsItems0": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "errorcode": {
          "type": "string"
        },
        "logref": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "example": {
        "code": "assetmngmnt.code",
        "errorcode": "assetmngmnt.errorcode",
        "logref": "c27a28b6eb16b507fabc11e75da8b4ce",
        "message": "Some meaningful message about the problems origin"
      }
    },
    "FileAssignment": {
      "type": "object",
      "properties": {
        "fileId": {
          "description": "The id of the file to be assigned",
          "type": "string",
          "example": "c27a28b6eb16b507fabc11e75da8b4ce"
        },
        "key": {
          "description": "Keyword for the file to be assigned to an asset.",
          "type": "string",
          "pattern": "[\\w]+",
          "example": "logo_small"
        }
      }
    },
    "FileAssignmentLinks": {
      "type": "object",
      "properties": {
        "download": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to download the file",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "metadata": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to get metadata of the file",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "origin": {
          "type": "object",
          "properties": {
            "href": {
              "description": "Link to access the file assignment. Only visible if assignment is inherited",
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    },
    "FileAssignmentLinksDownload": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to download the file",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "FileAssignmentLinksMetadata": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to get metadata of the file",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "FileAssignmentLinksOrigin": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to access the file assignment. Only visible if assignment is inherited",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "FileAssignmentResource": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/FileAssignment"
        },
        {
          "properties": {
            "_links": {
              "$ref": "#/definitions/FileAssignmentLinks"
            }
          }
        }
      ]
    },
    "FileMetadataListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileMetadataResource"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "FileMetadataListResourceEmbedded": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileMetadataResource"
          }
        }
      }
    },
    "FileMetadataResource": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "properties": {
            "download": {
              "title": "link for downloading the file",
              "properties": {
                "href": {
                  "type": "string"
                }
              }
            },
            "self": {
              "$ref": "#/definitions/rel.self"
            }
          }
        },
        "description": {
          "description": "File description",
          "type": "string",
          "example": "Company logo"
        },
        "etag": {
          "$ref": "#/definitions/ETag"
        },
        "id": {
          "$ref": "#/definitions/uniqueId"
        },
        "isAssigned": {
          "description": "Is the file used in any file assignment",
          "type": "boolean",
          "example": false
        },
        "lastModified": {
          "description": "The time of the latest modification of the file",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "File name given by the user",
          "type": "string",
          "example": "logo"
        },
        "originalFileName": {
          "description": "Original filename of the file",
          "type": "string",
          "example": "logo_small.png"
        },
        "scope": {
          "description": "The visibility of the file. PRIVATE hides files between subTenants and the t1Tenant's files from the subTenants. PUBLIC is visible for every user of the tenant.",
          "type": "string",
          "default": "private",
          "enum": [
            "public",
            "private"
          ],
          "example": "private"
        },
        "subTenant": {
          "description": "The id of the end-customer",
          "type": "string",
          "example": "UnkarPlutt Inc."
        },
        "tenantId": {
          "$ref": "#/definitions/tenantId"
        },
        "uploaded": {
          "description": "The time of the file upload",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "FileMetadataResourceLinks": {
      "type": "object",
      "properties": {
        "download": {
          "title": "link for downloading the file",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "FileMetadataResourceLinksDownload": {
      "title": "link for downloading the file",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "KeyedFileAssignment": {
      "type": "object",
      "properties": {
        "fileId": {
          "description": "The id of the file to be assigned",
          "type": "string",
          "example": "c27a28b6eb16b507fabc11e75da8b4ce"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "maxLength": 255,
          "example": "Austria"
        },
        "latitude": {
          "description": "The latitude part of the geographic coordinates",
          "type": "number",
          "maximum": 90,
          "minimum": -90,
          "example": 9.9763411
        },
        "locality": {
          "type": "string",
          "maxLength": 255,
          "pattern": "[\\p{L}0-9_ -\\']*",
          "example": "Innsbruck"
        },
        "longitude": {
          "description": "The longitude part of the geographic coordinates",
          "type": "number",
          "maximum": 180,
          "minimum": -180,
          "example": 53.5125546
        },
        "postalCode": {
          "type": "string",
          "maxLength": 255,
          "example": "6020"
        },
        "region": {
          "description": "County or other region code or name",
          "type": "string",
          "maxLength": 255,
          "example": "Tyrol"
        },
        "streetAddress": {
          "type": "string",
          "maxLength": 255,
          "example": "Industriestraße 21 A/II"
        }
      }
    },
    "LockResource": {
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "$ref": "#/definitions/rel.self"
            }
          }
        },
        "id": {
          "$ref": "#/definitions/uniqueId"
        },
        "reason": {
          "description": "Reason of lock",
          "type": "string",
          "example": "Agent is onboarded, cannot delete asset until offboard finished"
        },
        "reasonCode": {
          "description": "Code of the reason",
          "type": "string",
          "example": "agentmanagement.agent.onboarded"
        },
        "service": {
          "description": "Service creating the lock",
          "type": "string",
          "example": "AgentManagement"
        }
      }
    },
    "LockResourceLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "ModelLock": {
      "type": "object",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/enabled"
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "totalElements": {
          "type": "integer"
        },
        "totalPages": {
          "type": "integer"
        }
      }
    },
    "PagingLinks": {
      "type": "object",
      "properties": {
        "first": {
          "type": "object",
          "title": "link to first page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "last": {
          "type": "object",
          "title": "link to last page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "next": {
          "type": "object",
          "title": "link to next page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "prev": {
          "type": "object",
          "title": "link to previous page",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        },
        "self": {
          "$ref": "#/definitions/rel.self"
        }
      }
    },
    "PagingLinksFirst": {
      "type": "object",
      "title": "link to first page",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "PagingLinksLast": {
      "type": "object",
      "title": "link to last page",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "PagingLinksNext": {
      "type": "object",
      "title": "link to next page",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "PagingLinksPrev": {
      "type": "object",
      "title": "link to previous page",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "RootAssetResource": {
      "allOf": [
        {
          "$ref": "#/definitions/AssetResource"
        },
        {
          "properties": {
            "hierarchyPath": {
              "description": "Hieararchy path is empty for the root asset",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": []
            }
          }
        }
      ]
    },
    "SharingResource": {
      "description": "Contains sharing information.",
      "type": "object",
      "properties": {
        "modes": {
          "description": "List of sharing modes applicable for this resource. The currently supported modes are SHARER and RECEIVER. SHARER means this resource is shared by my tenant. RECEIVER means this resource is shared with my tenant. An empty array means this resource is not shared. New modes might be introduced later and clients must expect additional items to be contained in the array.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SHARER",
              "RECEIVER"
            ]
          }
        }
      }
    },
    "Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]+",
          "example": "color"
        },
        "value": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "yellow"
        }
      }
    },
    "VariableDefinition": {
      "required": [
        "name",
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VariableUpdate"
        }
      ],
      "properties": {
        "dataType": {
          "description": "Data type of the variable. BIG_STRING could only be used by variables in dynamic aspect-types. Cannot be changed.",
          "type": "string",
          "enum": [
            "BOOLEAN",
            "INT",
            "LONG",
            "DOUBLE",
            "STRING",
            "TIMESTAMP",
            "BIG_STRING"
          ],
          "example": "STRING"
        },
        "name": {
          "type": "string"
        },
        "searchable": {
          "description": "Indicates whether sorting and filtering is allowed on this variable. Only usable for static properties. Cannot be changed.",
          "type": "boolean",
          "default": false,
          "example": true
        }
      }
    },
    "VariableDefinitionResource": {
      "allOf": [
        {
          "$ref": "#/definitions/VariableDefinition"
        },
        {
          "properties": {
            "_links": {
              "properties": {
                "origin": {
                  "description": "Link to the asset type defining the variable. *Only visible if variable is inherited.*",
                  "properties": {
                    "href": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "VariableDefinitionResourceAO1Links": {
      "properties": {
        "origin": {
          "description": "Link to the asset type defining the variable. *Only visible if variable is inherited.*",
          "properties": {
            "href": {
              "type": "string"
            }
          }
        }
      }
    },
    "VariableDefinitionResourceAO1LinksOrigin": {
      "description": "Link to the asset type defining the variable. *Only visible if variable is inherited.*",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "VariableListResource": {
      "type": "object",
      "properties": {
        "_embedded": {
          "type": "object",
          "properties": {
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableDefinition"
              }
            }
          }
        },
        "_links": {
          "$ref": "#/definitions/PagingLinks"
        },
        "page": {
          "$ref": "#/definitions/Page"
        }
      }
    },
    "VariableListResourceEmbedded": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableDefinition"
          }
        }
      }
    },
    "VariableUpdate": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value of the variable. It must be compatible with the dataType! The default value will be inherited by the asset type's child types and by the asset instantiating it. It can be defined in aspect types and asset types.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1,
          "example": "25/77"
        },
        "length": {
          "description": "The max length of the variable's value. The length field is only used for variables of string or big_string dataType. Max length for string is 255 and max length for big_string 100000. Cannot be changed.",
          "type": "integer",
          "maximum": 100000,
          "minimum": 1,
          "example": 5
        },
        "name": {
          "description": "Name of the variable. Reserved words (id, name, description, tenant, etag, scope, properties, propertySets, extends, variables, aspects, parentTypeId) cannot be used as variable names.",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
          "example": "temperature"
        },
        "unit": {
          "description": "Unit of measurement. Can be changed",
          "type": "string",
          "maxLength": 32,
          "pattern": "[^\\']*",
          "example": "C/F"
        }
      }
    },
    "VariableUpdateMap": {
      "additionalProperties": {
        "$ref": "#/definitions/VariableUpdate"
      },
      "example": {
        "temperature": {
          "defaultValue": "25/77",
          "length": 5,
          "name": "engine_temperature",
          "unit": "C/F"
        }
      }
    },
    "aspectVariableUpdateMap": {
      "additionalProperties": {
        "$ref": "#/definitions/VariableDefinition"
      },
      "example": {
        "newVariable": {
          "dataType": "STRING",
          "defaultValue": "25/77",
          "length": 5,
          "name": "newVariable",
          "qualityCode": true,
          "searchable": true,
          "unit": "C/F"
        },
        "removeVariable": null,
        "temperature": {
          "dataType": "STRING",
          "defaultValue": "25/77",
          "length": 5,
          "name": "engine_temperature",
          "qualityCode": true,
          "searchable": true,
          "unit": "C/F"
        }
      }
    },
    "enabled": {
      "description": "Describes the state of model lock",
      "type": "boolean",
      "example": true
    },
    "errors": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorsItems0"
          }
        }
      }
    },
    "jobs": {
      "description": "Describes Jobs associtated with Model Lock",
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": [
        "mdsp-import-md33d31"
      ]
    },
    "rel.self": {
      "type": "object",
      "title": "self link",
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "tenantId": {
      "description": "The unique identifier of the tenant",
      "type": "string",
      "maxLength": 255,
      "pattern": "[a-zA-Z0-9-_.]+",
      "example": "mdsp"
    },
    "timezone": {
      "description": "The timezone to be used for timeseries aggregation. By default it is inherited from the tenant's defaultTimezone, but can be overwritten only during asset creation. The timezone value should be set to a Java time zone ID such as \"America/LosAngeles\" or \"Etc/GMT+2\". Time zones that 15 or 45 minutes off a UTC hour are not supported, such as Nepal standard time (UTC+05:45). Time zones that are 30 minutes off a UTC hour are supported, such as India (UTC+05:30). Once an asset is created with a specific timezone, it cannot be changed later.",
      "type": "string",
      "maxLength": 255,
      "example": "Europe/Berlin"
    },
    "twinType": {
      "description": "Indicates that the asset is a real asset (performance) or for simulation. If omitted on creation then it defaults to performance. Setting the twinType to simulation allows high resolution timestamps (microsecond precision).",
      "type": "string",
      "default": "performance",
      "enum": [
        "performance",
        "simulation"
      ]
    },
    "uniqueId": {
      "type": "string",
      "maxLength": 32,
      "minLength": 32,
      "pattern": "[0-9a-f]+",
      "example": "c27a28b6eb16b507fabc11e75da8b4ce"
    }
  },
  "parameters": {
    "TypeId": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[A-Za-z0-9_]{1,8}\\.[A-Za-z0-9_]+",
      "type": "string",
      "description": "The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols \"A-Z\", \"a-z\", \"0-9\", \"_\" and \".\" beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)",
      "name": "id",
      "in": "path",
      "required": true
    },
    "basicFieldsOnly": {
      "type": "boolean",
      "default": false,
      "description": "Specifies if the assets should include all of it's inherited variables and aspects from assettype and aspecttype.",
      "name": "basicFieldsOnly",
      "in": "query"
    },
    "exploded": {
      "type": "boolean",
      "description": "Specifies if the asset type should include all of it's inherited variables and aspects. Default is false.",
      "name": "exploded",
      "in": "query"
    },
    "fileId": {
      "pattern": "[0-9A-F]{32}",
      "type": "string",
      "description": "Unique identifier of the file.",
      "name": "fileId",
      "in": "path",
      "required": true
    },
    "fileKey": {
      "pattern": "[\\w]+",
      "type": "string",
      "description": "Keyword for the file to be assigned to an asset or asset type.",
      "name": "key",
      "in": "path",
      "required": true
    },
    "filter": {
      "type": "string",
      "description": "Specifies the additional filtering criteria",
      "name": "filter",
      "in": "query"
    },
    "ifMatch": {
      "type": "string",
      "description": "Last known version to facilitate optimistic locking.\n*Required for modification.\n",
      "name": "If-Match",
      "in": "header"
    },
    "ifMatchMandatory": {
      "type": "string",
      "description": "Last known version to facilitate optimistic locking",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "ifMatchVariable": {
      "type": "string",
      "description": "Last known version of asset type to facilitate optimistic locking. Etag from asset type response to be used.",
      "name": "If-Match",
      "in": "header",
      "required": true
    },
    "ifNoneMatch": {
      "type": "string",
      "description": "ETag hash of previous request to allow caching",
      "name": "If-None-Match",
      "in": "header"
    },
    "ifNoneMatchStar": {
      "type": "string",
      "description": "Set ifNoneMatch header to \"*\" for ensuring create request",
      "name": "If-None-Match",
      "in": "header"
    },
    "includeShared": {
      "type": "boolean",
      "default": false,
      "description": "Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.",
      "name": "includeShared",
      "in": "query"
    },
    "page": {
      "type": "integer",
      "description": "Specifies the requested page index",
      "name": "page",
      "in": "query"
    },
    "size": {
      "type": "integer",
      "description": "Specifies the number of elements in a page",
      "name": "size",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Specifies the ordering of returned elements",
      "name": "sort",
      "in": "query"
    },
    "uniqueId": {
      "pattern": "[0-9A-F]{32}",
      "type": "string",
      "description": "Unique identifier",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "aspecttype": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "atm.apt.d": "delete aspect types",
        "atm.apt.r": "read aspect types",
        "atm.apt.w": "write aspect types"
      }
    },
    "asset": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.c": "create assets",
        "asm.d": "delete assets",
        "asm.h.d": "delete an element of the hierarchy of assets",
        "asm.h.w": "create or modify hierarchy of assets",
        "asm.m": "move asset",
        "asm.r": "read asset",
        "asm.rh.d": "delete a root element of the hierarchy of assets",
        "asm.rh.w": "create or modify root hierarchy of assets",
        "asm.u": "update assets"
      }
    },
    "assetmodel": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "aml.r": "read lock state of an asset model",
        "aml.w": "enable/disable lock state of an asset model"
      }
    },
    "assettype": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "atm.d": "delete asset types",
        "atm.r": "read asset types",
        "atm.w": "create or update asset types"
      }
    },
    "file": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.f.d": "delete files",
        "asm.f.r": "read files",
        "asm.f.w": "write files",
        "asm.fa.d": "delete file assignments",
        "asm.fa.w": "assign files",
        "atm.fa.d": "delete file assignment from assettype",
        "atm.fa.w": "create file assignment to assettype"
      }
    },
    "location": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "asm.loc.d": "delete location",
        "asm.loc.w": "write location"
      }
    }
  },
  "tags": [
    {
      "description": "Managing static and dynamic aspect types.",
      "name": "aspecttype"
    },
    {
      "description": "Managing asset types.",
      "name": "assettype"
    },
    {
      "description": "Managing users' assets and their locations. Assets only can be created by types which are in three main topics; device types, agent types and hierarchy types.",
      "name": "assets"
    },
    {
      "description": "Managing structure of specific assets.",
      "name": "structure"
    },
    {
      "description": "Managing locations.",
      "name": "locations"
    },
    {
      "description": "Managing files.",
      "name": "files"
    },
    {
      "description": "Managing locks on asset model",
      "name": "assetmodellock"
    },
    {
      "name": "billboard"
    }
  ]
}`))
}
