// Code generated by go-swagger; DO NOT EDIT.

package time_series_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteTimeseriesParams creates a new DeleteTimeseriesParams object
//
// There are no default values defined in the spec.
func NewDeleteTimeseriesParams() DeleteTimeseriesParams {

	return DeleteTimeseriesParams{}
}

// DeleteTimeseriesParams contains all the bound params for the delete timeseries operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteTimeseries
type DeleteTimeseriesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*unique identifier of the asset (entity)
	  Required: true
	  Max Length: 32
	  Min Length: 32
	  Pattern: [a-f0-9]{32}
	  In: path
	*/
	EntityID string
	/*beginning of the timerange to delete (exclusive)
	  Required: true
	  In: query
	*/
	From strfmt.DateTime
	/*Name of the aspect (property set).
	  Required: true
	  In: path
	*/
	PropertySetName string
	/*end of the timerange to delete (inclusive)
	  Required: true
	  In: query
	*/
	To strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteTimeseriesParams() beforehand.
func (o *DeleteTimeseriesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rEntityID, rhkEntityID, _ := route.Params.GetOK("entityId")
	if err := o.bindEntityID(rEntityID, rhkEntityID, route.Formats); err != nil {
		res = append(res, err)
	}

	qFrom, qhkFrom, _ := qs.GetOK("from")
	if err := o.bindFrom(qFrom, qhkFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	rPropertySetName, rhkPropertySetName, _ := route.Params.GetOK("propertySetName")
	if err := o.bindPropertySetName(rPropertySetName, rhkPropertySetName, route.Formats); err != nil {
		res = append(res, err)
	}

	qTo, qhkTo, _ := qs.GetOK("to")
	if err := o.bindTo(qTo, qhkTo, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEntityID binds and validates parameter EntityID from path.
func (o *DeleteTimeseriesParams) bindEntityID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.EntityID = raw

	if err := o.validateEntityID(formats); err != nil {
		return err
	}

	return nil
}

// validateEntityID carries on validations for parameter EntityID
func (o *DeleteTimeseriesParams) validateEntityID(formats strfmt.Registry) error {

	if err := validate.MinLength("entityId", "path", o.EntityID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("entityId", "path", o.EntityID, 32); err != nil {
		return err
	}

	if err := validate.Pattern("entityId", "path", o.EntityID, `[a-f0-9]{32}`); err != nil {
		return err
	}

	return nil
}

// bindFrom binds and validates parameter From from query.
func (o *DeleteTimeseriesParams) bindFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("from", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("from", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("from", "query", "strfmt.DateTime", raw)
	}
	o.From = *(value.(*strfmt.DateTime))

	if err := o.validateFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateFrom carries on validations for parameter From
func (o *DeleteTimeseriesParams) validateFrom(formats strfmt.Registry) error {

	if err := validate.FormatOf("from", "query", "date-time", o.From.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPropertySetName binds and validates parameter PropertySetName from path.
func (o *DeleteTimeseriesParams) bindPropertySetName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.PropertySetName = raw

	return nil
}

// bindTo binds and validates parameter To from query.
func (o *DeleteTimeseriesParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("to", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("to", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("to", "query", "strfmt.DateTime", raw)
	}
	o.To = *(value.(*strfmt.DateTime))

	if err := o.validateTo(formats); err != nil {
		return err
	}

	return nil
}

// validateTo carries on validations for parameter To
func (o *DeleteTimeseriesParams) validateTo(formats strfmt.Registry) error {

	if err := validate.FormatOf("to", "query", "date-time", o.To.String(), formats); err != nil {
		return err
	}
	return nil
}
