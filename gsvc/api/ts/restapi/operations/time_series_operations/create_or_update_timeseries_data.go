// Code generated by go-swagger; DO NOT EDIT.

package time_series_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"gsvc/api/ts/models"
)

// CreateOrUpdateTimeseriesDataHandlerFunc turns a function with the right signature into a create or update timeseries data handler
type CreateOrUpdateTimeseriesDataHandlerFunc func(CreateOrUpdateTimeseriesDataParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateTimeseriesDataHandlerFunc) Handle(params CreateOrUpdateTimeseriesDataParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateOrUpdateTimeseriesDataHandler interface for that can handle valid create or update timeseries data params
type CreateOrUpdateTimeseriesDataHandler interface {
	Handle(CreateOrUpdateTimeseriesDataParams, *models.Principal) middleware.Responder
}

// NewCreateOrUpdateTimeseriesData creates a new http.Handler for the create or update timeseries data operation
func NewCreateOrUpdateTimeseriesData(ctx *middleware.Context, handler CreateOrUpdateTimeseriesDataHandler) *CreateOrUpdateTimeseriesData {
	return &CreateOrUpdateTimeseriesData{Context: ctx, Handler: handler}
}

/*
	CreateOrUpdateTimeseriesData swagger:route PUT /timeseries/{entityId}/{propertySetName} Time Series Operations createOrUpdateTimeseriesData

# Create or update time series data

Create or update time series data for one combination of an asset (entity) and an(a) aspect (property set). In case of an update of data at an already existing time, all properties at that time will be replaced by the ones provided in the request.
*/
type CreateOrUpdateTimeseriesData struct {
	Context *middleware.Context
	Handler CreateOrUpdateTimeseriesDataHandler
}

func (o *CreateOrUpdateTimeseriesData) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateOrUpdateTimeseriesDataParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
