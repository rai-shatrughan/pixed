// Code generated by go-swagger; DO NOT EDIT.

package time_series_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gsvc/api/ts/models"
)

// CreateOrUpdateTimeseriesAcceptedCode is the HTTP code returned for type CreateOrUpdateTimeseriesAccepted
const CreateOrUpdateTimeseriesAcceptedCode int = 202

/*
CreateOrUpdateTimeseriesAccepted Accepted. For each asset-aspect (entity-property set) pair a validation error can occur. In case an error is returned for an asset-aspect (entity-property set) pair, time series data for that pair is not considered. Possible validation errors are
  - 400: bad request schema for asset-aspect (entity-property set) pair
  - 404: asset (entity) and/or aspect(proprety set) not found
  - 429: asset-aspect (entity-property set) pair could not be processed due to too many requests
  - default: unexpected error while processing

swagger:response createOrUpdateTimeseriesAccepted
*/
type CreateOrUpdateTimeseriesAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.MultiStatusError `json:"body,omitempty"`
}

// NewCreateOrUpdateTimeseriesAccepted creates CreateOrUpdateTimeseriesAccepted with default headers values
func NewCreateOrUpdateTimeseriesAccepted() *CreateOrUpdateTimeseriesAccepted {

	return &CreateOrUpdateTimeseriesAccepted{}
}

// WithPayload adds the payload to the create or update timeseries accepted response
func (o *CreateOrUpdateTimeseriesAccepted) WithPayload(payload *models.MultiStatusError) *CreateOrUpdateTimeseriesAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update timeseries accepted response
func (o *CreateOrUpdateTimeseriesAccepted) SetPayload(payload *models.MultiStatusError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateOrUpdateTimeseriesBadRequestCode is the HTTP code returned for type CreateOrUpdateTimeseriesBadRequest
const CreateOrUpdateTimeseriesBadRequestCode int = 400

/*
CreateOrUpdateTimeseriesBadRequest Bad request, in case the resource is invalid.
Few of the validations as below -
- Total number of records for all assets (entites) and aspects (property sets) should not be more than 100 per PUT request.
- Total size of the payload should not be more than 100 kb per PUT request.
- Payload cannot have more than 5 asset (entity)/aspect (property set) combinations.

swagger:response createOrUpdateTimeseriesBadRequest
*/
type CreateOrUpdateTimeseriesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.MultiTimeseiresBadRequest `json:"body,omitempty"`
}

// NewCreateOrUpdateTimeseriesBadRequest creates CreateOrUpdateTimeseriesBadRequest with default headers values
func NewCreateOrUpdateTimeseriesBadRequest() *CreateOrUpdateTimeseriesBadRequest {

	return &CreateOrUpdateTimeseriesBadRequest{}
}

// WithPayload adds the payload to the create or update timeseries bad request response
func (o *CreateOrUpdateTimeseriesBadRequest) WithPayload(payload *models.MultiTimeseiresBadRequest) *CreateOrUpdateTimeseriesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update timeseries bad request response
func (o *CreateOrUpdateTimeseriesBadRequest) SetPayload(payload *models.MultiTimeseiresBadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateOrUpdateTimeseriesUnauthorizedCode is the HTTP code returned for type CreateOrUpdateTimeseriesUnauthorized
const CreateOrUpdateTimeseriesUnauthorizedCode int = 401

/*
CreateOrUpdateTimeseriesUnauthorized unauthorized

swagger:response createOrUpdateTimeseriesUnauthorized
*/
type CreateOrUpdateTimeseriesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Unauthorized `json:"body,omitempty"`
}

// NewCreateOrUpdateTimeseriesUnauthorized creates CreateOrUpdateTimeseriesUnauthorized with default headers values
func NewCreateOrUpdateTimeseriesUnauthorized() *CreateOrUpdateTimeseriesUnauthorized {

	return &CreateOrUpdateTimeseriesUnauthorized{}
}

// WithPayload adds the payload to the create or update timeseries unauthorized response
func (o *CreateOrUpdateTimeseriesUnauthorized) WithPayload(payload *models.Unauthorized) *CreateOrUpdateTimeseriesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update timeseries unauthorized response
func (o *CreateOrUpdateTimeseriesUnauthorized) SetPayload(payload *models.Unauthorized) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateOrUpdateTimeseriesForbiddenCode is the HTTP code returned for type CreateOrUpdateTimeseriesForbidden
const CreateOrUpdateTimeseriesForbiddenCode int = 403

/*
CreateOrUpdateTimeseriesForbidden Forbidden

swagger:response createOrUpdateTimeseriesForbidden
*/
type CreateOrUpdateTimeseriesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ForbiddenMultiTimeSeries `json:"body,omitempty"`
}

// NewCreateOrUpdateTimeseriesForbidden creates CreateOrUpdateTimeseriesForbidden with default headers values
func NewCreateOrUpdateTimeseriesForbidden() *CreateOrUpdateTimeseriesForbidden {

	return &CreateOrUpdateTimeseriesForbidden{}
}

// WithPayload adds the payload to the create or update timeseries forbidden response
func (o *CreateOrUpdateTimeseriesForbidden) WithPayload(payload *models.ForbiddenMultiTimeSeries) *CreateOrUpdateTimeseriesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update timeseries forbidden response
func (o *CreateOrUpdateTimeseriesForbidden) SetPayload(payload *models.ForbiddenMultiTimeSeries) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateOrUpdateTimeseriesServiceUnavailableCode is the HTTP code returned for type CreateOrUpdateTimeseriesServiceUnavailable
const CreateOrUpdateTimeseriesServiceUnavailableCode int = 503

/*
CreateOrUpdateTimeseriesServiceUnavailable Service unavailable

swagger:response createOrUpdateTimeseriesServiceUnavailable
*/
type CreateOrUpdateTimeseriesServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceUnavailableMultiTimeSeries `json:"body,omitempty"`
}

// NewCreateOrUpdateTimeseriesServiceUnavailable creates CreateOrUpdateTimeseriesServiceUnavailable with default headers values
func NewCreateOrUpdateTimeseriesServiceUnavailable() *CreateOrUpdateTimeseriesServiceUnavailable {

	return &CreateOrUpdateTimeseriesServiceUnavailable{}
}

// WithPayload adds the payload to the create or update timeseries service unavailable response
func (o *CreateOrUpdateTimeseriesServiceUnavailable) WithPayload(payload *models.ServiceUnavailableMultiTimeSeries) *CreateOrUpdateTimeseriesServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create or update timeseries service unavailable response
func (o *CreateOrUpdateTimeseriesServiceUnavailable) SetPayload(payload *models.ServiceUnavailableMultiTimeSeries) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateOrUpdateTimeseriesDefault Other error with any status code and response body format.

swagger:response createOrUpdateTimeseriesDefault
*/
type CreateOrUpdateTimeseriesDefault struct {
	_statusCode int
}

// NewCreateOrUpdateTimeseriesDefault creates CreateOrUpdateTimeseriesDefault with default headers values
func NewCreateOrUpdateTimeseriesDefault(code int) *CreateOrUpdateTimeseriesDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateOrUpdateTimeseriesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create or update timeseries default response
func (o *CreateOrUpdateTimeseriesDefault) WithStatusCode(code int) *CreateOrUpdateTimeseriesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create or update timeseries default response
func (o *CreateOrUpdateTimeseriesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *CreateOrUpdateTimeseriesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
