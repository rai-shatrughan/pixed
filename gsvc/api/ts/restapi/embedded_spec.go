// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Create, update, and query time series data with a precision of 1 millisecond.",
    "title": "IoT Time Series API",
    "version": "3.7.0",
    "x-visibility": "external"
  },
  "basePath": "/api/iottimeseries/v3",
  "paths": {
    "/timeseries": {
      "put": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or update time series data for multiple unique combinations of assets (entities) and aspects (property sets).\nIn case of an update of data at an already existing time, all properties at that time will be replaced by the ones provided in the request. All asset-aspect (entity-property set) combinations need to belong to the same tenant.\n\nRequest body limitations:\n1. A maximum of 5  asset-aspect (entity-property set) combinations can be provided\n2. The request body size must be equal or less than 100 kb\n3. A maximum of 100 time series data items can be provided overall\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or update time series data for mutiple unique asset-aspect (entity-property set) combinations.",
        "operationId": "createOrUpdateTimeseries",
        "parameters": [
          {
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeSeries"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. For each asset-aspect (entity-property set) pair a validation error can occur. In case an error is returned for an asset-aspect (entity-property set) pair, time series data for that pair is not considered. Possible validation errors are\n - 400: bad request schema for asset-aspect (entity-property set) pair\n - 404: asset (entity) and/or aspect(proprety set) not found\n - 429: asset-aspect (entity-property set) pair could not be processed due to too many requests\n - default: unexpected error while processing\n",
            "schema": {
              "$ref": "#/definitions/MultiStatusError"
            }
          },
          "400": {
            "description": "Bad request, in case the resource is invalid.\nFew of the validations as below -\n- Total number of records for all assets (entites) and aspects (property sets) should not be more than 100 per PUT request.\n- Total size of the payload should not be more than 100 kb per PUT request.\n- Payload cannot have more than 5 asset (entity)/aspect (property set) combinations.\n",
            "schema": {
              "$ref": "#/definitions/MultiTimeseiresBadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenMultiTimeSeries"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableMultiTimeSeries"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/timeseries/{entityId}/{propertySetName}": {
      "get": {
        "security": [
          {
            "timeseries": [
              "iot.tim.r"
            ]
          }
        ],
        "description": "Retrieve time series data for one combination of an asset (entity) and an(a) aspect (property set). The maximum number of time series data items returned per request is defined by parameter \u003ci\u003elimit\u003c/i\u003e. In case more time series data items are present in the requested time range, only a subset of data items will be returned and a header \u003ci\u003elink\u003c/i\u003e is added to the response. The header value contains the request URL to fetch the next set of  time series data items, by increasing the \u003ci\u003efrom\u003c/i\u003e parameter accordingly. Returns the latest available timestamp record if no range is provided. \nNote: \n  \u003e If no range is provided, Based on Customer data ingestion timestamp record, it may not contain all variables of aspect. For example, an Aspect has 5 variables; but latest timeseries record has only 3 variables with values. Only latest timeseries record will be returned in response with values of 3 variables only. It will not fetch latest value of all 5 variables of aspect.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Retrieve time series data",
        "operationId": "retrieveTimeseries",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the time range to be retrieved (exclusive).",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the time range to be retrieved (inclusive).",
            "name": "to",
            "in": "query"
          },
          {
            "maximum": 2000,
            "type": "integer",
            "default": 2000,
            "description": "Maximum number of time series data items to be retrieved.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of properties to be returned. By default all properties of an(a) aspect (property set) are considered.",
            "name": "select",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "description": "Define sorting order of returned data. Sorting can be chronologically ascending (\u003ci\u003easc\u003c/i\u003e) or descending (\u003ci\u003edesc\u003c/i\u003e).",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, only the latest value of each property is returned. Latest values must be at least two hours old and at maximum 30 days old, in order to be considered. The returned values might be co-located or spread over multiple timestamps. Each property appears at max once in the response. The select parameter can be used to limit the properties to be considered. Parameters from, to, and limit must not be used in conjunction with latest. The response only includes latest value with good and uncertain quality codes",
            "name": "latestValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "array of time series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            },
            "headers": {
              "link": {
                "type": "string",
                "description": "Contains a link to the next page, if there is a next page"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "Too many requests that can be arised based on subsequent case:\n- User has sent too many requests in a given amount of time. \n\nA Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/RateLimiter"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or update time series data for one combination of an asset (entity) and an(a) aspect (property set). In case of an update of data at an already existing time, all properties at that time will be replaced by the ones provided in the request.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or update time series data",
        "operationId": "createOrUpdateTimeseriesData",
        "parameters": [
          {
            "description": "time series data array",
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "timeseries written"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "too many requests\n A Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "security": [
          {
            "timeseries": [
              "iot.tim.d"
            ]
          }
        ],
        "description": "Delete time series data for one combination of an asset (entity) and an(a) aspect (property set). All property values within the given time range are deleted.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Delete time series data",
        "operationId": "deleteTimeseries",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "beginning of the timerange to delete (exclusive)",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "end of the timerange to delete (inclusive)",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "patch": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or merge time series data for one combination of an asset (entity) and an(a) aspect (property set). This api creates or merges the data when different devices Or 3rd party apps write to different variables but within one aspect (property set) and same timestamp. Only those properties will be replaced by the ones provided in the request.\n\nRequest body limitations:\n1. It may take several minutes after response until the provided changes are fully merged.\n2. The number of updates being processed simultaneously by the service is limited.\n3. The number of requests being accepted for processing is limited per time frame.\n4. The maximum size of acceptable request bodies is 600 KB.\n5. The maximum time range for PATCH request can't be older than 24 hours from current time. For example, if customer want to patch some timeseries record ingested for current time T; it needs to be patched maximum within T+24 hours\n6. The PATCH will not work on Future timestamp at the time of execution.\n7. The merge functionality does not support to create or update the variable value having data type as BigString.\n8. The maximum number of records supported in one request is 10.\n9. In case of errors, none of the changes for the provided time stamps will be applied.\n\n**Example**\n\n*Example 1: If we have asset (entity) which can send two sensor values say 'pressure' \u0026 'temperature'. Then the asset (entity) can send two separate calls to IoT for same device timesamp as below:*\n\n    Call-1: This is a put request\n      TS record for tenant1\\asset1\\aspect1\n      {\n          \"_time\" : \"2020-01-01T23:00:00.000Z\",\n          \"pressure\" : 42.56\n      }\n\n    Call-2: This is a patch request\n      TS record for tenant1\\asset1\\aspect1\n      {\n        \"_time\" : \"2020-01-01T23:00:00.000Z\",\n        \"temperature\" : 73.23\n      }\n\nAfter above two TimeSeries ingest calls, if we make GET call for this tenant-asset-aspect combination and for the same device timestamp, then expected output should have merged results from both the calls. This means the output should look as below:\n\n    TS record for tenant1\\asset1\\aspect1\n    {\n      \"_time\" : \"2020-01-01T23:00:00.000Z\",\n      \"pressure\" : 42.56,\n      \"temperature\" : 73.23\n    }\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or merge time series data",
        "operationId": "createOrMergeTimeseries",
        "parameters": [
          {
            "description": "time series data array",
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.\n"
          },
          "400": {
            "description": "Bad request, in case the resource is invalid.\nFew of the validations as below -\n- The maximum time range of time series data acceptable is one day from current time\n- The provided time stamps must be not later than the currently latest time stamp in the time series\n- The maximum size of acceptable request bodies is 1 MB\n- Request payload date should be in ISO format\n- The maximum number of records supported in one request is 10\n- The specified date is outside the acceptable range\n",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found, in case the resource is not found.\nFew of the validations as below -\n- Unable to find the tenant\n- Unable to find the asset\n- Unable to find the aspect\n- Unable to find the asset type\n",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "Too many requests that can be arised based on subsequent case:\n- User has sent too many requests in a given amount of time.\n\nA Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "500": {
            "description": "Internal service error."
          },
          "503": {
            "description": "Service unavailable.",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "[a-f0-9]{32}",
          "type": "string",
          "description": "unique identifier of the asset (entity)",
          "name": "entityId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of the aspect (property set).",
          "name": "propertySetName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "BadRequest": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Bad Request",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[6008] Invalid date format '2018-10-16T00:00:00Z111' for request param - from",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 400,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "Forbidden": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Forbidden",
        "message": "[6552] User is not having required access to perform this operation on given Asset/Entity {assetId}. Consult tenant admin for appropriate access.",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 403,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "ForbiddenMultiTimeSeries": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "errors": [
          {
            "entityId": "fc6040ce94934f2dba35cc82235210c3",
            "error": "Forbidden",
            "exception": "class com.diot.iot.exception.IotException",
            "message": "[6552] User is not having required access to perform this operation on given Asset/Entity fc6040ce94934f2dba35cc82235210c3. Consult tenant admin for appropriate access.",
            "path": "/api/iottimeseries/v3/timeseries",
            "propertysetName": "aspectName",
            "status": 403,
            "timestamp": "2019-04-08T06:32:01.261+0000"
          }
        ]
      }
    },
    "MultiStatusError": {
      "description": "a (errors, errorObject).",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiStatusErrorItem"
          }
        }
      }
    },
    "MultiStatusErrorItem": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string",
          "example": "entityId2"
        },
        "error": {
          "type": "string",
          "example": "Not Found"
        },
        "exception": {
          "type": "string",
          "example": "com.diot.iot.exception.IotException"
        },
        "message": {
          "type": "string",
          "example": "[6007] Invalid value ' for request param - propertysetname"
        },
        "path": {
          "type": "string",
          "example": "/api/iottimeseries/v3/timeseries"
        },
        "propertySetName": {
          "type": "string",
          "example": "propertySetName2"
        },
        "status": {
          "type": "number",
          "example": 404
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-08T06:32:01.261+0000"
        }
      }
    },
    "MultiTimeseiresBadRequest": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Bad Request",
        "exception": "com.diot.iot.exception.IotException",
        "message": "Size of payload should not be more than 100 kb",
        "path": "/api/iottimeseries/v3/timeseries",
        "status": 400,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "NotFound": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Not Found",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[6408] Unable to find the entity - entityId",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 404,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "RateLimiter": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "API rate limit exceeded"
      }
    },
    "ServiceUnavailable": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Service Unavailable",
        "message": "Service not available.",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 503,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "ServiceUnavailableMultiTimeSeries": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Service Unavailable",
        "message": "Service not available.",
        "path": "/api/iottimeseries/v3/timeseries",
        "status": 503,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "TimeSeries": {
      "description": "Time series of a set of asset-aspect (entity-property set) combinations.",
      "type": "object",
      "properties": {
        "timeseries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesItem"
          },
          "example": [
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "enginetemperature": "enginetemperatureValue1",
                  "rpm": "rpmValue1",
                  "rpm_qc": "rpm_qcValue1"
                },
                {
                  "enginetemperature": "enginetemperatureValue2",
                  "rpm": "rpmValue2",
                  "rpm_qc": "rpm_qcValue2",
                  "time": "2019-02-10T23:01:00Z"
                }
              ],
              "entityId": "entityId1",
              "propertySetName": "propertySetName1"
            },
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "carmanual": "carmanualValue",
                  "height": "heightValue",
                  "height_qc": "height_qcValue"
                }
              ],
              "entityId": "entityId2",
              "propertySetName": "propertySetName2"
            },
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "speed": "speedValue",
                  "speed_qc": "speed_qcValue",
                  "width": "widthValue"
                }
              ],
              "entityId": "entityId3",
              "propertySetName": "propertySetName3"
            }
          ]
        }
      }
    },
    "TimeSeriesDataItem": {
      "type": "object",
      "required": [
        "_time"
      ],
      "properties": {
        "_time": {
          "description": "Timestamp of the data points.",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": {
        "description": "Time series aspect (property set) variable with value. The property's key name is given by the corresponding variable name. The property's value type is given according to the variable type.\n\u003ctable\u003e \u003ctr\u003e \u003ctd\u003e Variable Type \u003c/td\u003e \u003ctd\u003e JSON Type \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eint/ long/ double \u003c/td\u003e \u003ctd\u003enumber\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003etimestamp/ string/ bigstring\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e"
      },
      "example": {
        "_time": "2019-02-10T23:01:00Z",
        "exampleproperty0": "examplepropertyValue",
        "exampleproperty0_qc": "exampleproperty0_qc_Value",
        "exampleproperty1": "exampleproperty1Value"
      }
    },
    "TimeSeriesItem": {
      "type": "object",
      "required": [
        "entityId",
        "propertySetName",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Timeseries data for corresponsding asset (entity) Id and aspect (property set) name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesDataItem"
          }
        },
        "entityId": {
          "description": "asset (entity) Id of timeseries data.",
          "type": "string"
        },
        "propertySetName": {
          "description": "aspect (property set) name of timeseries data.",
          "type": "string"
        }
      }
    },
    "TooManyRequests": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Too Many Requests",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[429] Your request rate is too high, all calls will be rejected for a while",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 429,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    }
  },
  "securityDefinitions": {
    "timeseries": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "iot.tim.d": "delete timeseries",
        "iot.tim.r": "read timeseries",
        "iot.tim.w": "write timeseries"
      }
    }
  },
  "x-ErrorTemplate": {
    "properties": {
      "error": {
        "type": "string"
      },
      "exception": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "path": {
        "type": "string"
      },
      "status": {
        "type": "number"
      },
      "timestamp": {
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Create, update, and query time series data with a precision of 1 millisecond.",
    "title": "IoT Time Series API",
    "version": "3.7.0",
    "x-visibility": "external"
  },
  "basePath": "/api/iottimeseries/v3",
  "paths": {
    "/timeseries": {
      "put": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or update time series data for multiple unique combinations of assets (entities) and aspects (property sets).\nIn case of an update of data at an already existing time, all properties at that time will be replaced by the ones provided in the request. All asset-aspect (entity-property set) combinations need to belong to the same tenant.\n\nRequest body limitations:\n1. A maximum of 5  asset-aspect (entity-property set) combinations can be provided\n2. The request body size must be equal or less than 100 kb\n3. A maximum of 100 time series data items can be provided overall\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or update time series data for mutiple unique asset-aspect (entity-property set) combinations.",
        "operationId": "createOrUpdateTimeseries",
        "parameters": [
          {
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeSeries"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted. For each asset-aspect (entity-property set) pair a validation error can occur. In case an error is returned for an asset-aspect (entity-property set) pair, time series data for that pair is not considered. Possible validation errors are\n - 400: bad request schema for asset-aspect (entity-property set) pair\n - 404: asset (entity) and/or aspect(proprety set) not found\n - 429: asset-aspect (entity-property set) pair could not be processed due to too many requests\n - default: unexpected error while processing\n",
            "schema": {
              "$ref": "#/definitions/MultiStatusError"
            }
          },
          "400": {
            "description": "Bad request, in case the resource is invalid.\nFew of the validations as below -\n- Total number of records for all assets (entites) and aspects (property sets) should not be more than 100 per PUT request.\n- Total size of the payload should not be more than 100 kb per PUT request.\n- Payload cannot have more than 5 asset (entity)/aspect (property set) combinations.\n",
            "schema": {
              "$ref": "#/definitions/MultiTimeseiresBadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenMultiTimeSeries"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableMultiTimeSeries"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      }
    },
    "/timeseries/{entityId}/{propertySetName}": {
      "get": {
        "security": [
          {
            "timeseries": [
              "iot.tim.r"
            ]
          }
        ],
        "description": "Retrieve time series data for one combination of an asset (entity) and an(a) aspect (property set). The maximum number of time series data items returned per request is defined by parameter \u003ci\u003elimit\u003c/i\u003e. In case more time series data items are present in the requested time range, only a subset of data items will be returned and a header \u003ci\u003elink\u003c/i\u003e is added to the response. The header value contains the request URL to fetch the next set of  time series data items, by increasing the \u003ci\u003efrom\u003c/i\u003e parameter accordingly. Returns the latest available timestamp record if no range is provided. \nNote: \n  \u003e If no range is provided, Based on Customer data ingestion timestamp record, it may not contain all variables of aspect. For example, an Aspect has 5 variables; but latest timeseries record has only 3 variables with values. Only latest timeseries record will be returned in response with values of 3 variables only. It will not fetch latest value of all 5 variables of aspect.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Retrieve time series data",
        "operationId": "retrieveTimeseries",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the time range to be retrieved (exclusive).",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the time range to be retrieved (inclusive).",
            "name": "to",
            "in": "query"
          },
          {
            "maximum": 2000,
            "type": "integer",
            "default": 2000,
            "description": "Maximum number of time series data items to be retrieved.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of properties to be returned. By default all properties of an(a) aspect (property set) are considered.",
            "name": "select",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "description": "Define sorting order of returned data. Sorting can be chronologically ascending (\u003ci\u003easc\u003c/i\u003e) or descending (\u003ci\u003edesc\u003c/i\u003e).",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, only the latest value of each property is returned. Latest values must be at least two hours old and at maximum 30 days old, in order to be considered. The returned values might be co-located or spread over multiple timestamps. Each property appears at max once in the response. The select parameter can be used to limit the properties to be considered. Parameters from, to, and limit must not be used in conjunction with latest. The response only includes latest value with good and uncertain quality codes",
            "name": "latestValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "array of time series",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            },
            "headers": {
              "link": {
                "type": "string",
                "description": "Contains a link to the next page, if there is a next page"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "Too many requests that can be arised based on subsequent case:\n- User has sent too many requests in a given amount of time. \n\nA Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/RateLimiter"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "put": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or update time series data for one combination of an asset (entity) and an(a) aspect (property set). In case of an update of data at an already existing time, all properties at that time will be replaced by the ones provided in the request.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or update time series data",
        "operationId": "createOrUpdateTimeseriesData",
        "parameters": [
          {
            "description": "time series data array",
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "timeseries written"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "too many requests\n A Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "delete": {
        "security": [
          {
            "timeseries": [
              "iot.tim.d"
            ]
          }
        ],
        "description": "Delete time series data for one combination of an asset (entity) and an(a) aspect (property set). All property values within the given time range are deleted.\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Delete time series data",
        "operationId": "deleteTimeseries",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "beginning of the timerange to delete (exclusive)",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "end of the timerange to delete (inclusive)",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "asset (entity) not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "patch": {
        "security": [
          {
            "timeseries": [
              "iot.tim.w"
            ]
          }
        ],
        "description": "Create or merge time series data for one combination of an asset (entity) and an(a) aspect (property set). This api creates or merges the data when different devices Or 3rd party apps write to different variables but within one aspect (property set) and same timestamp. Only those properties will be replaced by the ones provided in the request.\n\nRequest body limitations:\n1. It may take several minutes after response until the provided changes are fully merged.\n2. The number of updates being processed simultaneously by the service is limited.\n3. The number of requests being accepted for processing is limited per time frame.\n4. The maximum size of acceptable request bodies is 600 KB.\n5. The maximum time range for PATCH request can't be older than 24 hours from current time. For example, if customer want to patch some timeseries record ingested for current time T; it needs to be patched maximum within T+24 hours\n6. The PATCH will not work on Future timestamp at the time of execution.\n7. The merge functionality does not support to create or update the variable value having data type as BigString.\n8. The maximum number of records supported in one request is 10.\n9. In case of errors, none of the changes for the provided time stamps will be applied.\n\n**Example**\n\n*Example 1: If we have asset (entity) which can send two sensor values say 'pressure' \u0026 'temperature'. Then the asset (entity) can send two separate calls to IoT for same device timesamp as below:*\n\n    Call-1: This is a put request\n      TS record for tenant1\\asset1\\aspect1\n      {\n          \"_time\" : \"2020-01-01T23:00:00.000Z\",\n          \"pressure\" : 42.56\n      }\n\n    Call-2: This is a patch request\n      TS record for tenant1\\asset1\\aspect1\n      {\n        \"_time\" : \"2020-01-01T23:00:00.000Z\",\n        \"temperature\" : 73.23\n      }\n\nAfter above two TimeSeries ingest calls, if we make GET call for this tenant-asset-aspect combination and for the same device timestamp, then expected output should have merged results from both the calls. This means the output should look as below:\n\n    TS record for tenant1\\asset1\\aspect1\n    {\n      \"_time\" : \"2020-01-01T23:00:00.000Z\",\n      \"pressure\" : 42.56,\n      \"temperature\" : 73.23\n    }\n",
        "tags": [
          "Time Series Operations"
        ],
        "summary": "Create or merge time series data",
        "operationId": "createOrMergeTimeseries",
        "parameters": [
          {
            "description": "time series data array",
            "name": "timeseries",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeSeriesDataItem"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content.\n"
          },
          "400": {
            "description": "Bad request, in case the resource is invalid.\nFew of the validations as below -\n- The maximum time range of time series data acceptable is one day from current time\n- The provided time stamps must be not later than the currently latest time stamp in the time series\n- The maximum size of acceptable request bodies is 1 MB\n- Request payload date should be in ISO format\n- The maximum number of records supported in one request is 10\n- The specified date is outside the acceptable range\n",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found, in case the resource is not found.\nFew of the validations as below -\n- Unable to find the tenant\n- Unable to find the asset\n- Unable to find the aspect\n- Unable to find the asset type\n",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "429": {
            "description": "Too many requests that can be arised based on subsequent case:\n- User has sent too many requests in a given amount of time.\n\nA Retry-After header might be included to this response indicating how long in 'seconds' to wait before making a new request.\n",
            "schema": {
              "$ref": "#/definitions/TooManyRequests"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "description": "Time in seconds to wait before making a new request"
              }
            }
          },
          "500": {
            "description": "Internal service error."
          },
          "503": {
            "description": "Service unavailable.",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailable"
            }
          },
          "default": {
            "description": "Other error with any status code and response body format."
          }
        }
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "pattern": "[a-f0-9]{32}",
          "type": "string",
          "description": "unique identifier of the asset (entity)",
          "name": "entityId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of the aspect (property set).",
          "name": "propertySetName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "BadRequest": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Bad Request",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[6008] Invalid date format '2018-10-16T00:00:00Z111' for request param - from",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 400,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "Forbidden": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Forbidden",
        "message": "[6552] User is not having required access to perform this operation on given Asset/Entity {assetId}. Consult tenant admin for appropriate access.",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 403,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "ForbiddenMultiTimeSeries": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "errors": [
          {
            "entityId": "fc6040ce94934f2dba35cc82235210c3",
            "error": "Forbidden",
            "exception": "class com.diot.iot.exception.IotException",
            "message": "[6552] User is not having required access to perform this operation on given Asset/Entity fc6040ce94934f2dba35cc82235210c3. Consult tenant admin for appropriate access.",
            "path": "/api/iottimeseries/v3/timeseries",
            "propertysetName": "aspectName",
            "status": 403,
            "timestamp": "2019-04-08T06:32:01.261+0000"
          }
        ]
      }
    },
    "MultiStatusError": {
      "description": "a (errors, errorObject).",
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiStatusErrorItem"
          }
        }
      }
    },
    "MultiStatusErrorItem": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string",
          "example": "entityId2"
        },
        "error": {
          "type": "string",
          "example": "Not Found"
        },
        "exception": {
          "type": "string",
          "example": "com.diot.iot.exception.IotException"
        },
        "message": {
          "type": "string",
          "example": "[6007] Invalid value ' for request param - propertysetname"
        },
        "path": {
          "type": "string",
          "example": "/api/iottimeseries/v3/timeseries"
        },
        "propertySetName": {
          "type": "string",
          "example": "propertySetName2"
        },
        "status": {
          "type": "number",
          "example": 404
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2019-04-08T06:32:01.261+0000"
        }
      }
    },
    "MultiTimeseiresBadRequest": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Bad Request",
        "exception": "com.diot.iot.exception.IotException",
        "message": "Size of payload should not be more than 100 kb",
        "path": "/api/iottimeseries/v3/timeseries",
        "status": 400,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "NotFound": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Not Found",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[6408] Unable to find the entity - entityId",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 404,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "RateLimiter": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "API rate limit exceeded"
      }
    },
    "ServiceUnavailable": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Service Unavailable",
        "message": "Service not available.",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 503,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "ServiceUnavailableMultiTimeSeries": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Service Unavailable",
        "message": "Service not available.",
        "path": "/api/iottimeseries/v3/timeseries",
        "status": 503,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "TimeSeries": {
      "description": "Time series of a set of asset-aspect (entity-property set) combinations.",
      "type": "object",
      "properties": {
        "timeseries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesItem"
          },
          "example": [
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "enginetemperature": "enginetemperatureValue1",
                  "rpm": "rpmValue1",
                  "rpm_qc": "rpm_qcValue1"
                },
                {
                  "enginetemperature": "enginetemperatureValue2",
                  "rpm": "rpmValue2",
                  "rpm_qc": "rpm_qcValue2",
                  "time": "2019-02-10T23:01:00Z"
                }
              ],
              "entityId": "entityId1",
              "propertySetName": "propertySetName1"
            },
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "carmanual": "carmanualValue",
                  "height": "heightValue",
                  "height_qc": "height_qcValue"
                }
              ],
              "entityId": "entityId2",
              "propertySetName": "propertySetName2"
            },
            {
              "data": [
                {
                  "_time": "2019-02-10T23:00:00Z",
                  "speed": "speedValue",
                  "speed_qc": "speed_qcValue",
                  "width": "widthValue"
                }
              ],
              "entityId": "entityId3",
              "propertySetName": "propertySetName3"
            }
          ]
        }
      }
    },
    "TimeSeriesDataItem": {
      "type": "object",
      "required": [
        "_time"
      ],
      "properties": {
        "_time": {
          "description": "Timestamp of the data points.",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": {
        "description": "Time series aspect (property set) variable with value. The property's key name is given by the corresponding variable name. The property's value type is given according to the variable type.\n\u003ctable\u003e \u003ctr\u003e \u003ctd\u003e Variable Type \u003c/td\u003e \u003ctd\u003e JSON Type \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eint/ long/ double \u003c/td\u003e \u003ctd\u003enumber\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003ctd\u003eboolean\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003etimestamp/ string/ bigstring\u003c/td\u003e \u003ctd\u003estring\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e"
      },
      "example": {
        "_time": "2019-02-10T23:01:00Z",
        "exampleproperty0": "examplepropertyValue",
        "exampleproperty0_qc": "exampleproperty0_qc_Value",
        "exampleproperty1": "exampleproperty1Value"
      }
    },
    "TimeSeriesItem": {
      "type": "object",
      "required": [
        "entityId",
        "propertySetName",
        "data"
      ],
      "properties": {
        "data": {
          "description": "Timeseries data for corresponsding asset (entity) Id and aspect (property set) name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeSeriesDataItem"
          }
        },
        "entityId": {
          "description": "asset (entity) Id of timeseries data.",
          "type": "string"
        },
        "propertySetName": {
          "description": "aspect (property set) name of timeseries data.",
          "type": "string"
        }
      }
    },
    "TooManyRequests": {
      "properties": {
        "error": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "status": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "example": {
        "error": "Too Many Requests",
        "exception": "com.diot.iot.exception.IotException",
        "message": "[429] Your request rate is too high, all calls will be rejected for a while",
        "path": "/api/iottimeseries/v3/timeseries/entityId/propertySetName",
        "status": 429,
        "timestamp": "2019-04-08T06:32:01.261+0000"
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "type": "string",
          "example": "Not authorized to access this resource."
        }
      }
    }
  },
  "securityDefinitions": {
    "timeseries": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "iot.tim.d": "delete timeseries",
        "iot.tim.r": "read timeseries",
        "iot.tim.w": "write timeseries"
      }
    }
  },
  "x-ErrorTemplate": {
    "properties": {
      "error": {
        "type": "string"
      },
      "exception": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "path": {
        "type": "string"
      },
      "status": {
        "type": "number"
      },
      "timestamp": {
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  }
}`))
}
