// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TimeSeries Time series of a set of asset-aspect (entity-property set) combinations.
//
// swagger:model TimeSeries
type TimeSeries struct {

	// timeseries
	// Example: [{"data":[{"_time":"2019-02-10T23:00:00Z","enginetemperature":"enginetemperatureValue1","rpm":"rpmValue1","rpm_qc":"rpm_qcValue1"},{"enginetemperature":"enginetemperatureValue2","rpm":"rpmValue2","rpm_qc":"rpm_qcValue2","time":"2019-02-10T23:01:00Z"}],"entityId":"entityId1","propertySetName":"propertySetName1"},{"data":[{"_time":"2019-02-10T23:00:00Z","carmanual":"carmanualValue","height":"heightValue","height_qc":"height_qcValue"}],"entityId":"entityId2","propertySetName":"propertySetName2"},{"data":[{"_time":"2019-02-10T23:00:00Z","speed":"speedValue","speed_qc":"speed_qcValue","width":"widthValue"}],"entityId":"entityId3","propertySetName":"propertySetName3"}]
	Timeseries []*TimeSeriesItem `json:"timeseries"`
}

// Validate validates this time series
func (m *TimeSeries) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeseries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSeries) validateTimeseries(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeseries) { // not required
		return nil
	}

	for i := 0; i < len(m.Timeseries); i++ {
		if swag.IsZero(m.Timeseries[i]) { // not required
			continue
		}

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this time series based on the context it is used
func (m *TimeSeries) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeseries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSeries) contextValidateTimeseries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Timeseries); i++ {

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSeries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSeries) UnmarshalBinary(b []byte) error {
	var res TimeSeries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
