// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSeriesDataItem time series data item
// Example: {"_time":"2019-02-10T23:01:00Z","exampleproperty0":"examplepropertyValue","exampleproperty0_qc":"exampleproperty0_qc_Value","exampleproperty1":"exampleproperty1Value"}
//
// swagger:model TimeSeriesDataItem
type TimeSeriesDataItem struct {

	// Timestamp of the data points.
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"_time"`

	// Time series aspect (property set) variable with value. The property's key name is given by the corresponding variable name. The property's value type is given according to the variable type.
	// <table> <tr> <td> Variable Type </td> <td> JSON Type </td> </tr> <tr> <td>int/ long/ double </td> <td>number</td> </tr> <tr> <td>boolean</td> <td>boolean</td> </tr> <tr> <td>timestamp/ string/ bigstring</td> <td>string</td> </tr> </table>
	TimeSeriesDataItem map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *TimeSeriesDataItem) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// Timestamp of the data points.
		// Required: true
		// Format: date-time
		Time *strfmt.DateTime `json:"_time"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv TimeSeriesDataItem

	rcv.Time = stage1.Time
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "_time")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.TimeSeriesDataItem = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m TimeSeriesDataItem) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// Timestamp of the data points.
		// Required: true
		// Format: date-time
		Time *strfmt.DateTime `json:"_time"`
	}

	stage1.Time = m.Time

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.TimeSeriesDataItem) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.TimeSeriesDataItem)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this time series data item
func (m *TimeSeriesDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSeriesDataItem) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("_time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("_time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this time series data item based on context it is used
func (m *TimeSeriesDataItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TimeSeriesDataItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSeriesDataItem) UnmarshalBinary(b []byte) error {
	var res TimeSeriesDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
