// Code generated by go-swagger; DO NOT EDIT.

package agm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientIdentifier client identifier
//
// swagger:model ClientIdentifier
type ClientIdentifier struct {

	// client id
	// Required: true
	ClientID *ClientID `json:"client_id"`

	// Server generated client secret. Required if security profile is SHARED_SECRET.
	ClientSecret string `json:"client_secret,omitempty"`

	// Epoch time in seconds which client secret expires at.
	// Example: 1511020133
	ClientSecretExpiresAt int64 `json:"client_secret_expires_at,omitempty"`

	// grant types
	GrantTypes []string `json:"grant_types"`

	// The access token to be used at the client configuration endpoint to perform subsequent operations upon the client registration.
	// Example: eyJh...
	// Required: true
	RegistrationAccessToken *string `json:"registration_access_token"`

	// The fully qualified URL of the client configuration endpoint for this client.
	// Example: https://southgate.eu-central.mindsphere.io/api/agentmanagement/v3/register/0b2d1cde-cc76-11e7-abc4-cec278b6b50a
	// Required: true
	// Format: uri
	RegistrationClientURI *strfmt.URI `json:"registration_client_uri"`

	// The client authentication method.
	// Enum: [client_secret_jwt private_key_jwt]
	TokenEndpointAuthMethod string `json:"token_endpoint_auth_method,omitempty"`
}

// Validate validates this client identifier
func (m *ClientIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationClientURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientIdentifier) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	if m.ClientID != nil {
		if err := m.ClientID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_id")
			}
			return err
		}
	}

	return nil
}

var clientIdentifierGrantTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHARED_SECRET","RSA_3072"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientIdentifierGrantTypesItemsEnum = append(clientIdentifierGrantTypesItemsEnum, v)
	}
}

func (m *ClientIdentifier) validateGrantTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientIdentifierGrantTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClientIdentifier) validateGrantTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.GrantTypes); i++ {

		// value enum
		if err := m.validateGrantTypesItemsEnum("grant_types"+"."+strconv.Itoa(i), "body", m.GrantTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClientIdentifier) validateRegistrationAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("registration_access_token", "body", m.RegistrationAccessToken); err != nil {
		return err
	}

	return nil
}

func (m *ClientIdentifier) validateRegistrationClientURI(formats strfmt.Registry) error {

	if err := validate.Required("registration_client_uri", "body", m.RegistrationClientURI); err != nil {
		return err
	}

	if err := validate.FormatOf("registration_client_uri", "body", "uri", m.RegistrationClientURI.String(), formats); err != nil {
		return err
	}

	return nil
}

var clientIdentifierTypeTokenEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_jwt","private_key_jwt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientIdentifierTypeTokenEndpointAuthMethodPropEnum = append(clientIdentifierTypeTokenEndpointAuthMethodPropEnum, v)
	}
}

const (

	// ClientIdentifierTokenEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	ClientIdentifierTokenEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// ClientIdentifierTokenEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	ClientIdentifierTokenEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"
)

// prop value enum
func (m *ClientIdentifier) validateTokenEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientIdentifierTypeTokenEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClientIdentifier) validateTokenEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthMethodEnum("token_endpoint_auth_method", "body", m.TokenEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this client identifier based on the context it is used
func (m *ClientIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientIdentifier) contextValidateClientID(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientID != nil {
		if err := m.ClientID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientIdentifier) UnmarshalBinary(b []byte) error {
	var res ClientIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
