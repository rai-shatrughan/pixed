// Code generated by go-swagger; DO NOT EDIT.

package agm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// Whether sorting for this property shall be ascending.
	Ascending bool `json:"ascending,omitempty"`

	// Whether sorting for this property shall be descending.
	Descending bool `json:"descending,omitempty"`

	// The order the property shall be sorted for.
	// Enum: [ASC DESC]
	Direction string `json:"direction,omitempty"`

	// Whether or not the sort will be case sensitive.
	IgnoreCase bool `json:"ignoreCase,omitempty"`

	// null handling
	// Enum: [NATIVE NULLS_FIRST NULLS_LAST]
	NullHandling string `json:"nullHandling,omitempty"`

	// The property to order for.
	Property string `json:"property,omitempty"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNullHandling(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeDirectionPropEnum = append(orderTypeDirectionPropEnum, v)
	}
}

const (

	// OrderDirectionASC captures enum value "ASC"
	OrderDirectionASC string = "ASC"

	// OrderDirectionDESC captures enum value "DESC"
	OrderDirectionDESC string = "DESC"
)

// prop value enum
func (m *Order) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var orderTypeNullHandlingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NATIVE","NULLS_FIRST","NULLS_LAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderTypeNullHandlingPropEnum = append(orderTypeNullHandlingPropEnum, v)
	}
}

const (

	// OrderNullHandlingNATIVE captures enum value "NATIVE"
	OrderNullHandlingNATIVE string = "NATIVE"

	// OrderNullHandlingNULLSFIRST captures enum value "NULLS_FIRST"
	OrderNullHandlingNULLSFIRST string = "NULLS_FIRST"

	// OrderNullHandlingNULLSLAST captures enum value "NULLS_LAST"
	OrderNullHandlingNULLSLAST string = "NULLS_LAST"
)

// prop value enum
func (m *Order) validateNullHandlingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderTypeNullHandlingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Order) validateNullHandling(formats strfmt.Registry) error {
	if swag.IsZero(m.NullHandling) { // not required
		return nil
	}

	// value enum
	if err := m.validateNullHandlingEnum("nullHandling", "body", m.NullHandling); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order based on context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
